{"version":3,"file":"metadata.service.d.ts","sources":["metadata.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { MappedLayer } from './data/mapped-layer';\nimport { DapDDX, DapDAS } from 'dap-query-js/dist/dap-query';\nimport { OpendapService } from './opendap.service';\nimport { Bounds } from './data/bounds';\nimport { CatalogHost } from './data/catalog';\nimport { Observable } from 'rxjs';\nexport declare const LAT_NAMES: string[];\nexport declare const LNG_NAMES: string[];\nexport declare const TIME_NAMES: string[];\nexport declare class MetadataService {\n    private dap;\n    ddxCache: {\n        [key: string]: Observable<DapDDX>;\n    };\n    dasCache: {\n        [key: string]: Observable<DapDAS>;\n    };\n    constructor(dap: OpendapService);\n    identifyCoordinate(ddx: DapDDX, ...possibleNames: Array<string>): string;\n    getDDX(host: CatalogHost, file: string): Observable<DapDDX>;\n    ddxForUrl(url: string): Observable<DapDDX>;\n    getDDXForLayer(ml: MappedLayer): Observable<DapDDX>;\n    getDAS(host: CatalogHost, file: string): Observable<DapDAS>;\n    dasForUrl(url: string): Observable<DapDAS>;\n    getDASForLayer(ml: MappedLayer): Observable<DapDAS>;\n    getMetadata(ml: MappedLayer): Observable<any>;\n    populateMetadata(ml: MappedLayer): void;\n    getGrid(host: CatalogHost, file: string): Observable<number[][]>;\n    getGridForURL(url: string): Observable<number[][]>;\n    getGridForLayer(ml: MappedLayer): Observable<Array<Array<number>>>;\n    getSpatialExtent(ml: MappedLayer): Observable<Bounds>;\n    getTimeDimension(host: CatalogHost, file: string): Observable<Date[]>;\n    timeCache: {\n        [key: string]: Observable<Date[]>;\n    };\n    getTimeDimensionForURL(url: string): Observable<Date[]>;\n}\n"]}