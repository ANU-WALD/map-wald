import core from '@angular/core';
import common from '@angular/common';
import forms from '@angular/forms';
import http from '@angular/common/http';
import rxjs from 'rxjs';
import operators from 'rxjs/operators';
import dapQuery from 'dap-query-js/dist/dap-query';
import proj4 from 'proj4';

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
}

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

function getCjsExportFromNamespace (n) {
	return n && n['default'] || n;
}

var treeFilter_service = createCommonjsModule(function (module, exports) {
"use strict";
var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });

let TreeFilterService = class TreeFilterService {
    constructor() {
    }
    filterTree(tree, filterText) {
        tree.visible = false;
        filterText = filterText.trim().toLowerCase();
        const containsFilterText = (label, filterText) => label.trim().toLowerCase().indexOf(filterText) !== -1;
        tree.visible = containsFilterText(tree.label, filterText);
        if (tree.hasOwnProperty("children")) {
            if (tree.visible) {
                tree.children.forEach(child => this.showAll(child));
            }
            else {
                tree.children.map(child => {
                    this.filterTree(child, filterText);
                    tree.visible = tree.visible || child.visible;
                    tree.expanded = tree.expanded || child.visible || child.expanded;
                });
            }
        }
        return tree;
    }
    showAll(tree) {
        tree.visible = true;
        if (tree.hasOwnProperty("children")) {
            tree.children.forEach(c => this.showAll(c));
        }
    }
};
TreeFilterService = __decorate([
    core.Injectable(),
    __metadata("design:paramtypes", [])
], TreeFilterService);
exports.TreeFilterService = TreeFilterService;

});

var treeFilter_service$1 = unwrapExports(treeFilter_service);
var treeFilter_service_1 = treeFilter_service.TreeFilterService;

var colorbrewer = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.palettes = {
    Accent: {
        3: [
            "rgb(127,201,127)",
            "rgb(190,174,212)",
            "rgb(253,192,134)"
        ],
        4: [
            "rgb(127,201,127)",
            "rgb(190,174,212)",
            "rgb(253,192,134)",
            "rgb(255,255,153)"
        ],
        5: [
            "rgb(127,201,127)",
            "rgb(190,174,212)",
            "rgb(253,192,134)",
            "rgb(255,255,153)",
            "rgb(56,108,176)"
        ],
        6: [
            "rgb(127,201,127)",
            "rgb(190,174,212)",
            "rgb(253,192,134)",
            "rgb(255,255,153)",
            "rgb(56,108,176)",
            "rgb(240,2,127)"
        ],
        7: [
            "rgb(127,201,127)",
            "rgb(190,174,212)",
            "rgb(253,192,134)",
            "rgb(255,255,153)",
            "rgb(56,108,176)",
            "rgb(240,2,127)",
            "rgb(191,91,23)"
        ],
        8: [
            "rgb(127,201,127)",
            "rgb(190,174,212)",
            "rgb(253,192,134)",
            "rgb(255,255,153)",
            "rgb(56,108,176)",
            "rgb(240,2,127)",
            "rgb(191,91,23)",
            "rgb(102,102,102)"
        ],
        type: "qual"
    },
    Blues: {
        3: [
            "rgb(222,235,247)",
            "rgb(158,202,225)",
            "rgb(49,130,189)"
        ],
        4: [
            "rgb(239,243,255)",
            "rgb(189,215,231)",
            "rgb(107,174,214)",
            "rgb(33,113,181)"
        ],
        5: [
            "rgb(239,243,255)",
            "rgb(189,215,231)",
            "rgb(107,174,214)",
            "rgb(49,130,189)",
            "rgb(8,81,156)"
        ],
        6: [
            "rgb(239,243,255)",
            "rgb(198,219,239)",
            "rgb(158,202,225)",
            "rgb(107,174,214)",
            "rgb(49,130,189)",
            "rgb(8,81,156)"
        ],
        7: [
            "rgb(239,243,255)",
            "rgb(198,219,239)",
            "rgb(158,202,225)",
            "rgb(107,174,214)",
            "rgb(66,146,198)",
            "rgb(33,113,181)",
            "rgb(8,69,148)"
        ],
        8: [
            "rgb(247,251,255)",
            "rgb(222,235,247)",
            "rgb(198,219,239)",
            "rgb(158,202,225)",
            "rgb(107,174,214)",
            "rgb(66,146,198)",
            "rgb(33,113,181)",
            "rgb(8,69,148)"
        ],
        9: [
            "rgb(247,251,255)",
            "rgb(222,235,247)",
            "rgb(198,219,239)",
            "rgb(158,202,225)",
            "rgb(107,174,214)",
            "rgb(66,146,198)",
            "rgb(33,113,181)",
            "rgb(8,81,156)",
            "rgb(8,48,107)"
        ],
        type: "seq"
    },
    BrBG: {
        10: [
            "rgb(84,48,5)",
            "rgb(140,81,10)",
            "rgb(191,129,45)",
            "rgb(223,194,125)",
            "rgb(246,232,195)",
            "rgb(199,234,229)",
            "rgb(128,205,193)",
            "rgb(53,151,143)",
            "rgb(1,102,94)",
            "rgb(0,60,48)"
        ],
        11: [
            "rgb(84,48,5)",
            "rgb(140,81,10)",
            "rgb(191,129,45)",
            "rgb(223,194,125)",
            "rgb(246,232,195)",
            "rgb(245,245,245)",
            "rgb(199,234,229)",
            "rgb(128,205,193)",
            "rgb(53,151,143)",
            "rgb(1,102,94)",
            "rgb(0,60,48)"
        ],
        3: [
            "rgb(216,179,101)",
            "rgb(245,245,245)",
            "rgb(90,180,172)"
        ],
        4: [
            "rgb(166,97,26)",
            "rgb(223,194,125)",
            "rgb(128,205,193)",
            "rgb(1,133,113)"
        ],
        5: [
            "rgb(166,97,26)",
            "rgb(223,194,125)",
            "rgb(245,245,245)",
            "rgb(128,205,193)",
            "rgb(1,133,113)"
        ],
        6: [
            "rgb(140,81,10)",
            "rgb(216,179,101)",
            "rgb(246,232,195)",
            "rgb(199,234,229)",
            "rgb(90,180,172)",
            "rgb(1,102,94)"
        ],
        7: [
            "rgb(140,81,10)",
            "rgb(216,179,101)",
            "rgb(246,232,195)",
            "rgb(245,245,245)",
            "rgb(199,234,229)",
            "rgb(90,180,172)",
            "rgb(1,102,94)"
        ],
        8: [
            "rgb(140,81,10)",
            "rgb(191,129,45)",
            "rgb(223,194,125)",
            "rgb(246,232,195)",
            "rgb(199,234,229)",
            "rgb(128,205,193)",
            "rgb(53,151,143)",
            "rgb(1,102,94)"
        ],
        9: [
            "rgb(140,81,10)",
            "rgb(191,129,45)",
            "rgb(223,194,125)",
            "rgb(246,232,195)",
            "rgb(245,245,245)",
            "rgb(199,234,229)",
            "rgb(128,205,193)",
            "rgb(53,151,143)",
            "rgb(1,102,94)"
        ],
        type: "div"
    },
    BuGn: {
        3: [
            "rgb(229,245,249)",
            "rgb(153,216,201)",
            "rgb(44,162,95)"
        ],
        4: [
            "rgb(237,248,251)",
            "rgb(178,226,226)",
            "rgb(102,194,164)",
            "rgb(35,139,69)"
        ],
        5: [
            "rgb(237,248,251)",
            "rgb(178,226,226)",
            "rgb(102,194,164)",
            "rgb(44,162,95)",
            "rgb(0,109,44)"
        ],
        6: [
            "rgb(237,248,251)",
            "rgb(204,236,230)",
            "rgb(153,216,201)",
            "rgb(102,194,164)",
            "rgb(44,162,95)",
            "rgb(0,109,44)"
        ],
        7: [
            "rgb(237,248,251)",
            "rgb(204,236,230)",
            "rgb(153,216,201)",
            "rgb(102,194,164)",
            "rgb(65,174,118)",
            "rgb(35,139,69)",
            "rgb(0,88,36)"
        ],
        8: [
            "rgb(247,252,253)",
            "rgb(229,245,249)",
            "rgb(204,236,230)",
            "rgb(153,216,201)",
            "rgb(102,194,164)",
            "rgb(65,174,118)",
            "rgb(35,139,69)",
            "rgb(0,88,36)"
        ],
        9: [
            "rgb(247,252,253)",
            "rgb(229,245,249)",
            "rgb(204,236,230)",
            "rgb(153,216,201)",
            "rgb(102,194,164)",
            "rgb(65,174,118)",
            "rgb(35,139,69)",
            "rgb(0,109,44)",
            "rgb(0,68,27)"
        ],
        type: "seq"
    },
    BuPu: {
        3: [
            "rgb(224,236,244)",
            "rgb(158,188,218)",
            "rgb(136,86,167)"
        ],
        4: [
            "rgb(237,248,251)",
            "rgb(179,205,227)",
            "rgb(140,150,198)",
            "rgb(136,65,157)"
        ],
        5: [
            "rgb(237,248,251)",
            "rgb(179,205,227)",
            "rgb(140,150,198)",
            "rgb(136,86,167)",
            "rgb(129,15,124)"
        ],
        6: [
            "rgb(237,248,251)",
            "rgb(191,211,230)",
            "rgb(158,188,218)",
            "rgb(140,150,198)",
            "rgb(136,86,167)",
            "rgb(129,15,124)"
        ],
        7: [
            "rgb(237,248,251)",
            "rgb(191,211,230)",
            "rgb(158,188,218)",
            "rgb(140,150,198)",
            "rgb(140,107,177)",
            "rgb(136,65,157)",
            "rgb(110,1,107)"
        ],
        8: [
            "rgb(247,252,253)",
            "rgb(224,236,244)",
            "rgb(191,211,230)",
            "rgb(158,188,218)",
            "rgb(140,150,198)",
            "rgb(140,107,177)",
            "rgb(136,65,157)",
            "rgb(110,1,107)"
        ],
        9: [
            "rgb(247,252,253)",
            "rgb(224,236,244)",
            "rgb(191,211,230)",
            "rgb(158,188,218)",
            "rgb(140,150,198)",
            "rgb(140,107,177)",
            "rgb(136,65,157)",
            "rgb(129,15,124)",
            "rgb(77,0,75)"
        ],
        type: "seq"
    },
    Dark2: {
        3: [
            "rgb(27,158,119)",
            "rgb(217,95,2)",
            "rgb(117,112,179)"
        ],
        4: [
            "rgb(27,158,119)",
            "rgb(217,95,2)",
            "rgb(117,112,179)",
            "rgb(231,41,138)"
        ],
        5: [
            "rgb(27,158,119)",
            "rgb(217,95,2)",
            "rgb(117,112,179)",
            "rgb(231,41,138)",
            "rgb(102,166,30)"
        ],
        6: [
            "rgb(27,158,119)",
            "rgb(217,95,2)",
            "rgb(117,112,179)",
            "rgb(231,41,138)",
            "rgb(102,166,30)",
            "rgb(230,171,2)"
        ],
        7: [
            "rgb(27,158,119)",
            "rgb(217,95,2)",
            "rgb(117,112,179)",
            "rgb(231,41,138)",
            "rgb(102,166,30)",
            "rgb(230,171,2)",
            "rgb(166,118,29)"
        ],
        8: [
            "rgb(27,158,119)",
            "rgb(217,95,2)",
            "rgb(117,112,179)",
            "rgb(231,41,138)",
            "rgb(102,166,30)",
            "rgb(230,171,2)",
            "rgb(166,118,29)",
            "rgb(102,102,102)"
        ],
        type: "qual"
    },
    GnBu: {
        3: [
            "rgb(224,243,219)",
            "rgb(168,221,181)",
            "rgb(67,162,202)"
        ],
        4: [
            "rgb(240,249,232)",
            "rgb(186,228,188)",
            "rgb(123,204,196)",
            "rgb(43,140,190)"
        ],
        5: [
            "rgb(240,249,232)",
            "rgb(186,228,188)",
            "rgb(123,204,196)",
            "rgb(67,162,202)",
            "rgb(8,104,172)"
        ],
        6: [
            "rgb(240,249,232)",
            "rgb(204,235,197)",
            "rgb(168,221,181)",
            "rgb(123,204,196)",
            "rgb(67,162,202)",
            "rgb(8,104,172)"
        ],
        7: [
            "rgb(240,249,232)",
            "rgb(204,235,197)",
            "rgb(168,221,181)",
            "rgb(123,204,196)",
            "rgb(78,179,211)",
            "rgb(43,140,190)",
            "rgb(8,88,158)"
        ],
        8: [
            "rgb(247,252,240)",
            "rgb(224,243,219)",
            "rgb(204,235,197)",
            "rgb(168,221,181)",
            "rgb(123,204,196)",
            "rgb(78,179,211)",
            "rgb(43,140,190)",
            "rgb(8,88,158)"
        ],
        9: [
            "rgb(247,252,240)",
            "rgb(224,243,219)",
            "rgb(204,235,197)",
            "rgb(168,221,181)",
            "rgb(123,204,196)",
            "rgb(78,179,211)",
            "rgb(43,140,190)",
            "rgb(8,104,172)",
            "rgb(8,64,129)"
        ],
        type: "seq"
    },
    Greens: {
        3: [
            "rgb(229,245,224)",
            "rgb(161,217,155)",
            "rgb(49,163,84)"
        ],
        4: [
            "rgb(237,248,233)",
            "rgb(186,228,179)",
            "rgb(116,196,118)",
            "rgb(35,139,69)"
        ],
        5: [
            "rgb(237,248,233)",
            "rgb(186,228,179)",
            "rgb(116,196,118)",
            "rgb(49,163,84)",
            "rgb(0,109,44)"
        ],
        6: [
            "rgb(237,248,233)",
            "rgb(199,233,192)",
            "rgb(161,217,155)",
            "rgb(116,196,118)",
            "rgb(49,163,84)",
            "rgb(0,109,44)"
        ],
        7: [
            "rgb(237,248,233)",
            "rgb(199,233,192)",
            "rgb(161,217,155)",
            "rgb(116,196,118)",
            "rgb(65,171,93)",
            "rgb(35,139,69)",
            "rgb(0,90,50)"
        ],
        8: [
            "rgb(247,252,245)",
            "rgb(229,245,224)",
            "rgb(199,233,192)",
            "rgb(161,217,155)",
            "rgb(116,196,118)",
            "rgb(65,171,93)",
            "rgb(35,139,69)",
            "rgb(0,90,50)"
        ],
        9: [
            "rgb(247,252,245)",
            "rgb(229,245,224)",
            "rgb(199,233,192)",
            "rgb(161,217,155)",
            "rgb(116,196,118)",
            "rgb(65,171,93)",
            "rgb(35,139,69)",
            "rgb(0,109,44)",
            "rgb(0,68,27)"
        ],
        type: "seq"
    },
    Greys: {
        3: [
            "rgb(240,240,240)",
            "rgb(189,189,189)",
            "rgb(99,99,99)"
        ],
        4: [
            "rgb(247,247,247)",
            "rgb(204,204,204)",
            "rgb(150,150,150)",
            "rgb(82,82,82)"
        ],
        5: [
            "rgb(247,247,247)",
            "rgb(204,204,204)",
            "rgb(150,150,150)",
            "rgb(99,99,99)",
            "rgb(37,37,37)"
        ],
        6: [
            "rgb(247,247,247)",
            "rgb(217,217,217)",
            "rgb(189,189,189)",
            "rgb(150,150,150)",
            "rgb(99,99,99)",
            "rgb(37,37,37)"
        ],
        7: [
            "rgb(247,247,247)",
            "rgb(217,217,217)",
            "rgb(189,189,189)",
            "rgb(150,150,150)",
            "rgb(115,115,115)",
            "rgb(82,82,82)",
            "rgb(37,37,37)"
        ],
        8: [
            "rgb(255,255,255)",
            "rgb(240,240,240)",
            "rgb(217,217,217)",
            "rgb(189,189,189)",
            "rgb(150,150,150)",
            "rgb(115,115,115)",
            "rgb(82,82,82)",
            "rgb(37,37,37)"
        ],
        9: [
            "rgb(255,255,255)",
            "rgb(240,240,240)",
            "rgb(217,217,217)",
            "rgb(189,189,189)",
            "rgb(150,150,150)",
            "rgb(115,115,115)",
            "rgb(82,82,82)",
            "rgb(37,37,37)",
            "rgb(0,0,0)"
        ],
        type: "seq"
    },
    OrRd: {
        3: [
            "rgb(254,232,200)",
            "rgb(253,187,132)",
            "rgb(227,74,51)"
        ],
        4: [
            "rgb(254,240,217)",
            "rgb(253,204,138)",
            "rgb(252,141,89)",
            "rgb(215,48,31)"
        ],
        5: [
            "rgb(254,240,217)",
            "rgb(253,204,138)",
            "rgb(252,141,89)",
            "rgb(227,74,51)",
            "rgb(179,0,0)"
        ],
        6: [
            "rgb(254,240,217)",
            "rgb(253,212,158)",
            "rgb(253,187,132)",
            "rgb(252,141,89)",
            "rgb(227,74,51)",
            "rgb(179,0,0)"
        ],
        7: [
            "rgb(254,240,217)",
            "rgb(253,212,158)",
            "rgb(253,187,132)",
            "rgb(252,141,89)",
            "rgb(239,101,72)",
            "rgb(215,48,31)",
            "rgb(153,0,0)"
        ],
        8: [
            "rgb(255,247,236)",
            "rgb(254,232,200)",
            "rgb(253,212,158)",
            "rgb(253,187,132)",
            "rgb(252,141,89)",
            "rgb(239,101,72)",
            "rgb(215,48,31)",
            "rgb(153,0,0)"
        ],
        9: [
            "rgb(255,247,236)",
            "rgb(254,232,200)",
            "rgb(253,212,158)",
            "rgb(253,187,132)",
            "rgb(252,141,89)",
            "rgb(239,101,72)",
            "rgb(215,48,31)",
            "rgb(179,0,0)",
            "rgb(127,0,0)"
        ],
        type: "seq"
    },
    Oranges: {
        3: [
            "rgb(254,230,206)",
            "rgb(253,174,107)",
            "rgb(230,85,13)"
        ],
        4: [
            "rgb(254,237,222)",
            "rgb(253,190,133)",
            "rgb(253,141,60)",
            "rgb(217,71,1)"
        ],
        5: [
            "rgb(254,237,222)",
            "rgb(253,190,133)",
            "rgb(253,141,60)",
            "rgb(230,85,13)",
            "rgb(166,54,3)"
        ],
        6: [
            "rgb(254,237,222)",
            "rgb(253,208,162)",
            "rgb(253,174,107)",
            "rgb(253,141,60)",
            "rgb(230,85,13)",
            "rgb(166,54,3)"
        ],
        7: [
            "rgb(254,237,222)",
            "rgb(253,208,162)",
            "rgb(253,174,107)",
            "rgb(253,141,60)",
            "rgb(241,105,19)",
            "rgb(217,72,1)",
            "rgb(140,45,4)"
        ],
        8: [
            "rgb(255,245,235)",
            "rgb(254,230,206)",
            "rgb(253,208,162)",
            "rgb(253,174,107)",
            "rgb(253,141,60)",
            "rgb(241,105,19)",
            "rgb(217,72,1)",
            "rgb(140,45,4)"
        ],
        9: [
            "rgb(255,245,235)",
            "rgb(254,230,206)",
            "rgb(253,208,162)",
            "rgb(253,174,107)",
            "rgb(253,141,60)",
            "rgb(241,105,19)",
            "rgb(217,72,1)",
            "rgb(166,54,3)",
            "rgb(127,39,4)"
        ],
        type: "seq"
    },
    PRGn: {
        10: [
            "rgb(64,0,75)",
            "rgb(118,42,131)",
            "rgb(153,112,171)",
            "rgb(194,165,207)",
            "rgb(231,212,232)",
            "rgb(217,240,211)",
            "rgb(166,219,160)",
            "rgb(90,174,97)",
            "rgb(27,120,55)",
            "rgb(0,68,27)"
        ],
        11: [
            "rgb(64,0,75)",
            "rgb(118,42,131)",
            "rgb(153,112,171)",
            "rgb(194,165,207)",
            "rgb(231,212,232)",
            "rgb(247,247,247)",
            "rgb(217,240,211)",
            "rgb(166,219,160)",
            "rgb(90,174,97)",
            "rgb(27,120,55)",
            "rgb(0,68,27)"
        ],
        3: [
            "rgb(175,141,195)",
            "rgb(247,247,247)",
            "rgb(127,191,123)"
        ],
        4: [
            "rgb(123,50,148)",
            "rgb(194,165,207)",
            "rgb(166,219,160)",
            "rgb(0,136,55)"
        ],
        5: [
            "rgb(123,50,148)",
            "rgb(194,165,207)",
            "rgb(247,247,247)",
            "rgb(166,219,160)",
            "rgb(0,136,55)"
        ],
        6: [
            "rgb(118,42,131)",
            "rgb(175,141,195)",
            "rgb(231,212,232)",
            "rgb(217,240,211)",
            "rgb(127,191,123)",
            "rgb(27,120,55)"
        ],
        7: [
            "rgb(118,42,131)",
            "rgb(175,141,195)",
            "rgb(231,212,232)",
            "rgb(247,247,247)",
            "rgb(217,240,211)",
            "rgb(127,191,123)",
            "rgb(27,120,55)"
        ],
        8: [
            "rgb(118,42,131)",
            "rgb(153,112,171)",
            "rgb(194,165,207)",
            "rgb(231,212,232)",
            "rgb(217,240,211)",
            "rgb(166,219,160)",
            "rgb(90,174,97)",
            "rgb(27,120,55)"
        ],
        9: [
            "rgb(118,42,131)",
            "rgb(153,112,171)",
            "rgb(194,165,207)",
            "rgb(231,212,232)",
            "rgb(247,247,247)",
            "rgb(217,240,211)",
            "rgb(166,219,160)",
            "rgb(90,174,97)",
            "rgb(27,120,55)"
        ],
        type: "div"
    },
    Paired: {
        10: [
            "rgb(166,206,227)",
            "rgb(31,120,180)",
            "rgb(178,223,138)",
            "rgb(51,160,44)",
            "rgb(251,154,153)",
            "rgb(227,26,28)",
            "rgb(253,191,111)",
            "rgb(255,127,0)",
            "rgb(202,178,214)",
            "rgb(106,61,154)"
        ],
        11: [
            "rgb(166,206,227)",
            "rgb(31,120,180)",
            "rgb(178,223,138)",
            "rgb(51,160,44)",
            "rgb(251,154,153)",
            "rgb(227,26,28)",
            "rgb(253,191,111)",
            "rgb(255,127,0)",
            "rgb(202,178,214)",
            "rgb(106,61,154)",
            "rgb(255,255,153)"
        ],
        12: [
            "rgb(166,206,227)",
            "rgb(31,120,180)",
            "rgb(178,223,138)",
            "rgb(51,160,44)",
            "rgb(251,154,153)",
            "rgb(227,26,28)",
            "rgb(253,191,111)",
            "rgb(255,127,0)",
            "rgb(202,178,214)",
            "rgb(106,61,154)",
            "rgb(255,255,153)",
            "rgb(177,89,40)"
        ],
        3: [
            "rgb(166,206,227)",
            "rgb(31,120,180)",
            "rgb(178,223,138)"
        ],
        4: [
            "rgb(166,206,227)",
            "rgb(31,120,180)",
            "rgb(178,223,138)",
            "rgb(51,160,44)"
        ],
        5: [
            "rgb(166,206,227)",
            "rgb(31,120,180)",
            "rgb(178,223,138)",
            "rgb(51,160,44)",
            "rgb(251,154,153)"
        ],
        6: [
            "rgb(166,206,227)",
            "rgb(31,120,180)",
            "rgb(178,223,138)",
            "rgb(51,160,44)",
            "rgb(251,154,153)",
            "rgb(227,26,28)"
        ],
        7: [
            "rgb(166,206,227)",
            "rgb(31,120,180)",
            "rgb(178,223,138)",
            "rgb(51,160,44)",
            "rgb(251,154,153)",
            "rgb(227,26,28)",
            "rgb(253,191,111)"
        ],
        8: [
            "rgb(166,206,227)",
            "rgb(31,120,180)",
            "rgb(178,223,138)",
            "rgb(51,160,44)",
            "rgb(251,154,153)",
            "rgb(227,26,28)",
            "rgb(253,191,111)",
            "rgb(255,127,0)"
        ],
        9: [
            "rgb(166,206,227)",
            "rgb(31,120,180)",
            "rgb(178,223,138)",
            "rgb(51,160,44)",
            "rgb(251,154,153)",
            "rgb(227,26,28)",
            "rgb(253,191,111)",
            "rgb(255,127,0)",
            "rgb(202,178,214)"
        ],
        type: "qual"
    },
    Pastel1: {
        3: [
            "rgb(251,180,174)",
            "rgb(179,205,227)",
            "rgb(204,235,197)"
        ],
        4: [
            "rgb(251,180,174)",
            "rgb(179,205,227)",
            "rgb(204,235,197)",
            "rgb(222,203,228)"
        ],
        5: [
            "rgb(251,180,174)",
            "rgb(179,205,227)",
            "rgb(204,235,197)",
            "rgb(222,203,228)",
            "rgb(254,217,166)"
        ],
        6: [
            "rgb(251,180,174)",
            "rgb(179,205,227)",
            "rgb(204,235,197)",
            "rgb(222,203,228)",
            "rgb(254,217,166)",
            "rgb(255,255,204)"
        ],
        7: [
            "rgb(251,180,174)",
            "rgb(179,205,227)",
            "rgb(204,235,197)",
            "rgb(222,203,228)",
            "rgb(254,217,166)",
            "rgb(255,255,204)",
            "rgb(229,216,189)"
        ],
        8: [
            "rgb(251,180,174)",
            "rgb(179,205,227)",
            "rgb(204,235,197)",
            "rgb(222,203,228)",
            "rgb(254,217,166)",
            "rgb(255,255,204)",
            "rgb(229,216,189)",
            "rgb(253,218,236)"
        ],
        9: [
            "rgb(251,180,174)",
            "rgb(179,205,227)",
            "rgb(204,235,197)",
            "rgb(222,203,228)",
            "rgb(254,217,166)",
            "rgb(255,255,204)",
            "rgb(229,216,189)",
            "rgb(253,218,236)",
            "rgb(242,242,242)"
        ],
        type: "qual"
    },
    Pastel2: {
        3: [
            "rgb(179,226,205)",
            "rgb(253,205,172)",
            "rgb(203,213,232)"
        ],
        4: [
            "rgb(179,226,205)",
            "rgb(253,205,172)",
            "rgb(203,213,232)",
            "rgb(244,202,228)"
        ],
        5: [
            "rgb(179,226,205)",
            "rgb(253,205,172)",
            "rgb(203,213,232)",
            "rgb(244,202,228)",
            "rgb(230,245,201)"
        ],
        6: [
            "rgb(179,226,205)",
            "rgb(253,205,172)",
            "rgb(203,213,232)",
            "rgb(244,202,228)",
            "rgb(230,245,201)",
            "rgb(255,242,174)"
        ],
        7: [
            "rgb(179,226,205)",
            "rgb(253,205,172)",
            "rgb(203,213,232)",
            "rgb(244,202,228)",
            "rgb(230,245,201)",
            "rgb(255,242,174)",
            "rgb(241,226,204)"
        ],
        8: [
            "rgb(179,226,205)",
            "rgb(253,205,172)",
            "rgb(203,213,232)",
            "rgb(244,202,228)",
            "rgb(230,245,201)",
            "rgb(255,242,174)",
            "rgb(241,226,204)",
            "rgb(204,204,204)"
        ],
        type: "qual"
    },
    PiYG: {
        10: [
            "rgb(142,1,82)",
            "rgb(197,27,125)",
            "rgb(222,119,174)",
            "rgb(241,182,218)",
            "rgb(253,224,239)",
            "rgb(230,245,208)",
            "rgb(184,225,134)",
            "rgb(127,188,65)",
            "rgb(77,146,33)",
            "rgb(39,100,25)"
        ],
        11: [
            "rgb(142,1,82)",
            "rgb(197,27,125)",
            "rgb(222,119,174)",
            "rgb(241,182,218)",
            "rgb(253,224,239)",
            "rgb(247,247,247)",
            "rgb(230,245,208)",
            "rgb(184,225,134)",
            "rgb(127,188,65)",
            "rgb(77,146,33)",
            "rgb(39,100,25)"
        ],
        3: [
            "rgb(233,163,201)",
            "rgb(247,247,247)",
            "rgb(161,215,106)"
        ],
        4: [
            "rgb(208,28,139)",
            "rgb(241,182,218)",
            "rgb(184,225,134)",
            "rgb(77,172,38)"
        ],
        5: [
            "rgb(208,28,139)",
            "rgb(241,182,218)",
            "rgb(247,247,247)",
            "rgb(184,225,134)",
            "rgb(77,172,38)"
        ],
        6: [
            "rgb(197,27,125)",
            "rgb(233,163,201)",
            "rgb(253,224,239)",
            "rgb(230,245,208)",
            "rgb(161,215,106)",
            "rgb(77,146,33)"
        ],
        7: [
            "rgb(197,27,125)",
            "rgb(233,163,201)",
            "rgb(253,224,239)",
            "rgb(247,247,247)",
            "rgb(230,245,208)",
            "rgb(161,215,106)",
            "rgb(77,146,33)"
        ],
        8: [
            "rgb(197,27,125)",
            "rgb(222,119,174)",
            "rgb(241,182,218)",
            "rgb(253,224,239)",
            "rgb(230,245,208)",
            "rgb(184,225,134)",
            "rgb(127,188,65)",
            "rgb(77,146,33)"
        ],
        9: [
            "rgb(197,27,125)",
            "rgb(222,119,174)",
            "rgb(241,182,218)",
            "rgb(253,224,239)",
            "rgb(247,247,247)",
            "rgb(230,245,208)",
            "rgb(184,225,134)",
            "rgb(127,188,65)",
            "rgb(77,146,33)"
        ],
        type: "div"
    },
    PuBu: {
        3: [
            "rgb(236,231,242)",
            "rgb(166,189,219)",
            "rgb(43,140,190)"
        ],
        4: [
            "rgb(241,238,246)",
            "rgb(189,201,225)",
            "rgb(116,169,207)",
            "rgb(5,112,176)"
        ],
        5: [
            "rgb(241,238,246)",
            "rgb(189,201,225)",
            "rgb(116,169,207)",
            "rgb(43,140,190)",
            "rgb(4,90,141)"
        ],
        6: [
            "rgb(241,238,246)",
            "rgb(208,209,230)",
            "rgb(166,189,219)",
            "rgb(116,169,207)",
            "rgb(43,140,190)",
            "rgb(4,90,141)"
        ],
        7: [
            "rgb(241,238,246)",
            "rgb(208,209,230)",
            "rgb(166,189,219)",
            "rgb(116,169,207)",
            "rgb(54,144,192)",
            "rgb(5,112,176)",
            "rgb(3,78,123)"
        ],
        8: [
            "rgb(255,247,251)",
            "rgb(236,231,242)",
            "rgb(208,209,230)",
            "rgb(166,189,219)",
            "rgb(116,169,207)",
            "rgb(54,144,192)",
            "rgb(5,112,176)",
            "rgb(3,78,123)"
        ],
        9: [
            "rgb(255,247,251)",
            "rgb(236,231,242)",
            "rgb(208,209,230)",
            "rgb(166,189,219)",
            "rgb(116,169,207)",
            "rgb(54,144,192)",
            "rgb(5,112,176)",
            "rgb(4,90,141)",
            "rgb(2,56,88)"
        ],
        type: "seq"
    },
    PuBuGn: {
        3: [
            "rgb(236,226,240)",
            "rgb(166,189,219)",
            "rgb(28,144,153)"
        ],
        4: [
            "rgb(246,239,247)",
            "rgb(189,201,225)",
            "rgb(103,169,207)",
            "rgb(2,129,138)"
        ],
        5: [
            "rgb(246,239,247)",
            "rgb(189,201,225)",
            "rgb(103,169,207)",
            "rgb(28,144,153)",
            "rgb(1,108,89)"
        ],
        6: [
            "rgb(246,239,247)",
            "rgb(208,209,230)",
            "rgb(166,189,219)",
            "rgb(103,169,207)",
            "rgb(28,144,153)",
            "rgb(1,108,89)"
        ],
        7: [
            "rgb(246,239,247)",
            "rgb(208,209,230)",
            "rgb(166,189,219)",
            "rgb(103,169,207)",
            "rgb(54,144,192)",
            "rgb(2,129,138)",
            "rgb(1,100,80)"
        ],
        8: [
            "rgb(255,247,251)",
            "rgb(236,226,240)",
            "rgb(208,209,230)",
            "rgb(166,189,219)",
            "rgb(103,169,207)",
            "rgb(54,144,192)",
            "rgb(2,129,138)",
            "rgb(1,100,80)"
        ],
        9: [
            "rgb(255,247,251)",
            "rgb(236,226,240)",
            "rgb(208,209,230)",
            "rgb(166,189,219)",
            "rgb(103,169,207)",
            "rgb(54,144,192)",
            "rgb(2,129,138)",
            "rgb(1,108,89)",
            "rgb(1,70,54)"
        ],
        type: "seq"
    },
    PuOr: {
        10: [
            "rgb(127,59,8)",
            "rgb(179,88,6)",
            "rgb(224,130,20)",
            "rgb(253,184,99)",
            "rgb(254,224,182)",
            "rgb(216,218,235)",
            "rgb(178,171,210)",
            "rgb(128,115,172)",
            "rgb(84,39,136)",
            "rgb(45,0,75)"
        ],
        11: [
            "rgb(127,59,8)",
            "rgb(179,88,6)",
            "rgb(224,130,20)",
            "rgb(253,184,99)",
            "rgb(254,224,182)",
            "rgb(247,247,247)",
            "rgb(216,218,235)",
            "rgb(178,171,210)",
            "rgb(128,115,172)",
            "rgb(84,39,136)",
            "rgb(45,0,75)"
        ],
        3: [
            "rgb(241,163,64)",
            "rgb(247,247,247)",
            "rgb(153,142,195)"
        ],
        4: [
            "rgb(230,97,1)",
            "rgb(253,184,99)",
            "rgb(178,171,210)",
            "rgb(94,60,153)"
        ],
        5: [
            "rgb(230,97,1)",
            "rgb(253,184,99)",
            "rgb(247,247,247)",
            "rgb(178,171,210)",
            "rgb(94,60,153)"
        ],
        6: [
            "rgb(179,88,6)",
            "rgb(241,163,64)",
            "rgb(254,224,182)",
            "rgb(216,218,235)",
            "rgb(153,142,195)",
            "rgb(84,39,136)"
        ],
        7: [
            "rgb(179,88,6)",
            "rgb(241,163,64)",
            "rgb(254,224,182)",
            "rgb(247,247,247)",
            "rgb(216,218,235)",
            "rgb(153,142,195)",
            "rgb(84,39,136)"
        ],
        8: [
            "rgb(179,88,6)",
            "rgb(224,130,20)",
            "rgb(253,184,99)",
            "rgb(254,224,182)",
            "rgb(216,218,235)",
            "rgb(178,171,210)",
            "rgb(128,115,172)",
            "rgb(84,39,136)"
        ],
        9: [
            "rgb(179,88,6)",
            "rgb(224,130,20)",
            "rgb(253,184,99)",
            "rgb(254,224,182)",
            "rgb(247,247,247)",
            "rgb(216,218,235)",
            "rgb(178,171,210)",
            "rgb(128,115,172)",
            "rgb(84,39,136)"
        ],
        type: "div"
    },
    PuRd: {
        3: [
            "rgb(231,225,239)",
            "rgb(201,148,199)",
            "rgb(221,28,119)"
        ],
        4: [
            "rgb(241,238,246)",
            "rgb(215,181,216)",
            "rgb(223,101,176)",
            "rgb(206,18,86)"
        ],
        5: [
            "rgb(241,238,246)",
            "rgb(215,181,216)",
            "rgb(223,101,176)",
            "rgb(221,28,119)",
            "rgb(152,0,67)"
        ],
        6: [
            "rgb(241,238,246)",
            "rgb(212,185,218)",
            "rgb(201,148,199)",
            "rgb(223,101,176)",
            "rgb(221,28,119)",
            "rgb(152,0,67)"
        ],
        7: [
            "rgb(241,238,246)",
            "rgb(212,185,218)",
            "rgb(201,148,199)",
            "rgb(223,101,176)",
            "rgb(231,41,138)",
            "rgb(206,18,86)",
            "rgb(145,0,63)"
        ],
        8: [
            "rgb(247,244,249)",
            "rgb(231,225,239)",
            "rgb(212,185,218)",
            "rgb(201,148,199)",
            "rgb(223,101,176)",
            "rgb(231,41,138)",
            "rgb(206,18,86)",
            "rgb(145,0,63)"
        ],
        9: [
            "rgb(247,244,249)",
            "rgb(231,225,239)",
            "rgb(212,185,218)",
            "rgb(201,148,199)",
            "rgb(223,101,176)",
            "rgb(231,41,138)",
            "rgb(206,18,86)",
            "rgb(152,0,67)",
            "rgb(103,0,31)"
        ],
        type: "seq"
    },
    Purples: {
        3: [
            "rgb(239,237,245)",
            "rgb(188,189,220)",
            "rgb(117,107,177)"
        ],
        4: [
            "rgb(242,240,247)",
            "rgb(203,201,226)",
            "rgb(158,154,200)",
            "rgb(106,81,163)"
        ],
        5: [
            "rgb(242,240,247)",
            "rgb(203,201,226)",
            "rgb(158,154,200)",
            "rgb(117,107,177)",
            "rgb(84,39,143)"
        ],
        6: [
            "rgb(242,240,247)",
            "rgb(218,218,235)",
            "rgb(188,189,220)",
            "rgb(158,154,200)",
            "rgb(117,107,177)",
            "rgb(84,39,143)"
        ],
        7: [
            "rgb(242,240,247)",
            "rgb(218,218,235)",
            "rgb(188,189,220)",
            "rgb(158,154,200)",
            "rgb(128,125,186)",
            "rgb(106,81,163)",
            "rgb(74,20,134)"
        ],
        8: [
            "rgb(252,251,253)",
            "rgb(239,237,245)",
            "rgb(218,218,235)",
            "rgb(188,189,220)",
            "rgb(158,154,200)",
            "rgb(128,125,186)",
            "rgb(106,81,163)",
            "rgb(74,20,134)"
        ],
        9: [
            "rgb(252,251,253)",
            "rgb(239,237,245)",
            "rgb(218,218,235)",
            "rgb(188,189,220)",
            "rgb(158,154,200)",
            "rgb(128,125,186)",
            "rgb(106,81,163)",
            "rgb(84,39,143)",
            "rgb(63,0,125)"
        ],
        type: "seq"
    },
    RdBu: {
        10: [
            "rgb(103,0,31)",
            "rgb(178,24,43)",
            "rgb(214,96,77)",
            "rgb(244,165,130)",
            "rgb(253,219,199)",
            "rgb(209,229,240)",
            "rgb(146,197,222)",
            "rgb(67,147,195)",
            "rgb(33,102,172)",
            "rgb(5,48,97)"
        ],
        11: [
            "rgb(103,0,31)",
            "rgb(178,24,43)",
            "rgb(214,96,77)",
            "rgb(244,165,130)",
            "rgb(253,219,199)",
            "rgb(247,247,247)",
            "rgb(209,229,240)",
            "rgb(146,197,222)",
            "rgb(67,147,195)",
            "rgb(33,102,172)",
            "rgb(5,48,97)"
        ],
        3: [
            "rgb(239,138,98)",
            "rgb(247,247,247)",
            "rgb(103,169,207)"
        ],
        4: [
            "rgb(202,0,32)",
            "rgb(244,165,130)",
            "rgb(146,197,222)",
            "rgb(5,113,176)"
        ],
        5: [
            "rgb(202,0,32)",
            "rgb(244,165,130)",
            "rgb(247,247,247)",
            "rgb(146,197,222)",
            "rgb(5,113,176)"
        ],
        6: [
            "rgb(178,24,43)",
            "rgb(239,138,98)",
            "rgb(253,219,199)",
            "rgb(209,229,240)",
            "rgb(103,169,207)",
            "rgb(33,102,172)"
        ],
        7: [
            "rgb(178,24,43)",
            "rgb(239,138,98)",
            "rgb(253,219,199)",
            "rgb(247,247,247)",
            "rgb(209,229,240)",
            "rgb(103,169,207)",
            "rgb(33,102,172)"
        ],
        8: [
            "rgb(178,24,43)",
            "rgb(214,96,77)",
            "rgb(244,165,130)",
            "rgb(253,219,199)",
            "rgb(209,229,240)",
            "rgb(146,197,222)",
            "rgb(67,147,195)",
            "rgb(33,102,172)"
        ],
        9: [
            "rgb(178,24,43)",
            "rgb(214,96,77)",
            "rgb(244,165,130)",
            "rgb(253,219,199)",
            "rgb(247,247,247)",
            "rgb(209,229,240)",
            "rgb(146,197,222)",
            "rgb(67,147,195)",
            "rgb(33,102,172)"
        ],
        type: "div"
    },
    RdGy: {
        10: [
            "rgb(103,0,31)",
            "rgb(178,24,43)",
            "rgb(214,96,77)",
            "rgb(244,165,130)",
            "rgb(253,219,199)",
            "rgb(224,224,224)",
            "rgb(186,186,186)",
            "rgb(135,135,135)",
            "rgb(77,77,77)",
            "rgb(26,26,26)"
        ],
        11: [
            "rgb(103,0,31)",
            "rgb(178,24,43)",
            "rgb(214,96,77)",
            "rgb(244,165,130)",
            "rgb(253,219,199)",
            "rgb(255,255,255)",
            "rgb(224,224,224)",
            "rgb(186,186,186)",
            "rgb(135,135,135)",
            "rgb(77,77,77)",
            "rgb(26,26,26)"
        ],
        3: [
            "rgb(239,138,98)",
            "rgb(255,255,255)",
            "rgb(153,153,153)"
        ],
        4: [
            "rgb(202,0,32)",
            "rgb(244,165,130)",
            "rgb(186,186,186)",
            "rgb(64,64,64)"
        ],
        5: [
            "rgb(202,0,32)",
            "rgb(244,165,130)",
            "rgb(255,255,255)",
            "rgb(186,186,186)",
            "rgb(64,64,64)"
        ],
        6: [
            "rgb(178,24,43)",
            "rgb(239,138,98)",
            "rgb(253,219,199)",
            "rgb(224,224,224)",
            "rgb(153,153,153)",
            "rgb(77,77,77)"
        ],
        7: [
            "rgb(178,24,43)",
            "rgb(239,138,98)",
            "rgb(253,219,199)",
            "rgb(255,255,255)",
            "rgb(224,224,224)",
            "rgb(153,153,153)",
            "rgb(77,77,77)"
        ],
        8: [
            "rgb(178,24,43)",
            "rgb(214,96,77)",
            "rgb(244,165,130)",
            "rgb(253,219,199)",
            "rgb(224,224,224)",
            "rgb(186,186,186)",
            "rgb(135,135,135)",
            "rgb(77,77,77)"
        ],
        9: [
            "rgb(178,24,43)",
            "rgb(214,96,77)",
            "rgb(244,165,130)",
            "rgb(253,219,199)",
            "rgb(255,255,255)",
            "rgb(224,224,224)",
            "rgb(186,186,186)",
            "rgb(135,135,135)",
            "rgb(77,77,77)"
        ],
        type: "div"
    },
    RdPu: {
        3: [
            "rgb(253,224,221)",
            "rgb(250,159,181)",
            "rgb(197,27,138)"
        ],
        4: [
            "rgb(254,235,226)",
            "rgb(251,180,185)",
            "rgb(247,104,161)",
            "rgb(174,1,126)"
        ],
        5: [
            "rgb(254,235,226)",
            "rgb(251,180,185)",
            "rgb(247,104,161)",
            "rgb(197,27,138)",
            "rgb(122,1,119)"
        ],
        6: [
            "rgb(254,235,226)",
            "rgb(252,197,192)",
            "rgb(250,159,181)",
            "rgb(247,104,161)",
            "rgb(197,27,138)",
            "rgb(122,1,119)"
        ],
        7: [
            "rgb(254,235,226)",
            "rgb(252,197,192)",
            "rgb(250,159,181)",
            "rgb(247,104,161)",
            "rgb(221,52,151)",
            "rgb(174,1,126)",
            "rgb(122,1,119)"
        ],
        8: [
            "rgb(255,247,243)",
            "rgb(253,224,221)",
            "rgb(252,197,192)",
            "rgb(250,159,181)",
            "rgb(247,104,161)",
            "rgb(221,52,151)",
            "rgb(174,1,126)",
            "rgb(122,1,119)"
        ],
        9: [
            "rgb(255,247,243)",
            "rgb(253,224,221)",
            "rgb(252,197,192)",
            "rgb(250,159,181)",
            "rgb(247,104,161)",
            "rgb(221,52,151)",
            "rgb(174,1,126)",
            "rgb(122,1,119)",
            "rgb(73,0,106)"
        ],
        type: "seq"
    },
    RdYlBu: {
        10: [
            "rgb(165,0,38)",
            "rgb(215,48,39)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,144)",
            "rgb(224,243,248)",
            "rgb(171,217,233)",
            "rgb(116,173,209)",
            "rgb(69,117,180)",
            "rgb(49,54,149)"
        ],
        11: [
            "rgb(165,0,38)",
            "rgb(215,48,39)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,144)",
            "rgb(255,255,191)",
            "rgb(224,243,248)",
            "rgb(171,217,233)",
            "rgb(116,173,209)",
            "rgb(69,117,180)",
            "rgb(49,54,149)"
        ],
        3: [
            "rgb(252,141,89)",
            "rgb(255,255,191)",
            "rgb(145,191,219)"
        ],
        4: [
            "rgb(215,25,28)",
            "rgb(253,174,97)",
            "rgb(171,217,233)",
            "rgb(44,123,182)"
        ],
        5: [
            "rgb(215,25,28)",
            "rgb(253,174,97)",
            "rgb(255,255,191)",
            "rgb(171,217,233)",
            "rgb(44,123,182)"
        ],
        6: [
            "rgb(215,48,39)",
            "rgb(252,141,89)",
            "rgb(254,224,144)",
            "rgb(224,243,248)",
            "rgb(145,191,219)",
            "rgb(69,117,180)"
        ],
        7: [
            "rgb(215,48,39)",
            "rgb(252,141,89)",
            "rgb(254,224,144)",
            "rgb(255,255,191)",
            "rgb(224,243,248)",
            "rgb(145,191,219)",
            "rgb(69,117,180)"
        ],
        8: [
            "rgb(215,48,39)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,144)",
            "rgb(224,243,248)",
            "rgb(171,217,233)",
            "rgb(116,173,209)",
            "rgb(69,117,180)"
        ],
        9: [
            "rgb(215,48,39)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,144)",
            "rgb(255,255,191)",
            "rgb(224,243,248)",
            "rgb(171,217,233)",
            "rgb(116,173,209)",
            "rgb(69,117,180)"
        ],
        type: "div"
    },
    RdYlGn: {
        10: [
            "rgb(165,0,38)",
            "rgb(215,48,39)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,139)",
            "rgb(217,239,139)",
            "rgb(166,217,106)",
            "rgb(102,189,99)",
            "rgb(26,152,80)",
            "rgb(0,104,55)"
        ],
        11: [
            "rgb(165,0,38)",
            "rgb(215,48,39)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,139)",
            "rgb(255,255,191)",
            "rgb(217,239,139)",
            "rgb(166,217,106)",
            "rgb(102,189,99)",
            "rgb(26,152,80)",
            "rgb(0,104,55)"
        ],
        3: [
            "rgb(252,141,89)",
            "rgb(255,255,191)",
            "rgb(145,207,96)"
        ],
        4: [
            "rgb(215,25,28)",
            "rgb(253,174,97)",
            "rgb(166,217,106)",
            "rgb(26,150,65)"
        ],
        5: [
            "rgb(215,25,28)",
            "rgb(253,174,97)",
            "rgb(255,255,191)",
            "rgb(166,217,106)",
            "rgb(26,150,65)"
        ],
        6: [
            "rgb(215,48,39)",
            "rgb(252,141,89)",
            "rgb(254,224,139)",
            "rgb(217,239,139)",
            "rgb(145,207,96)",
            "rgb(26,152,80)"
        ],
        7: [
            "rgb(215,48,39)",
            "rgb(252,141,89)",
            "rgb(254,224,139)",
            "rgb(255,255,191)",
            "rgb(217,239,139)",
            "rgb(145,207,96)",
            "rgb(26,152,80)"
        ],
        8: [
            "rgb(215,48,39)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,139)",
            "rgb(217,239,139)",
            "rgb(166,217,106)",
            "rgb(102,189,99)",
            "rgb(26,152,80)"
        ],
        9: [
            "rgb(215,48,39)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,139)",
            "rgb(255,255,191)",
            "rgb(217,239,139)",
            "rgb(166,217,106)",
            "rgb(102,189,99)",
            "rgb(26,152,80)"
        ],
        type: "div"
    },
    Reds: {
        3: [
            "rgb(254,224,210)",
            "rgb(252,146,114)",
            "rgb(222,45,38)"
        ],
        4: [
            "rgb(254,229,217)",
            "rgb(252,174,145)",
            "rgb(251,106,74)",
            "rgb(203,24,29)"
        ],
        5: [
            "rgb(254,229,217)",
            "rgb(252,174,145)",
            "rgb(251,106,74)",
            "rgb(222,45,38)",
            "rgb(165,15,21)"
        ],
        6: [
            "rgb(254,229,217)",
            "rgb(252,187,161)",
            "rgb(252,146,114)",
            "rgb(251,106,74)",
            "rgb(222,45,38)",
            "rgb(165,15,21)"
        ],
        7: [
            "rgb(254,229,217)",
            "rgb(252,187,161)",
            "rgb(252,146,114)",
            "rgb(251,106,74)",
            "rgb(239,59,44)",
            "rgb(203,24,29)",
            "rgb(153,0,13)"
        ],
        8: [
            "rgb(255,245,240)",
            "rgb(254,224,210)",
            "rgb(252,187,161)",
            "rgb(252,146,114)",
            "rgb(251,106,74)",
            "rgb(239,59,44)",
            "rgb(203,24,29)",
            "rgb(153,0,13)"
        ],
        9: [
            "rgb(255,245,240)",
            "rgb(254,224,210)",
            "rgb(252,187,161)",
            "rgb(252,146,114)",
            "rgb(251,106,74)",
            "rgb(239,59,44)",
            "rgb(203,24,29)",
            "rgb(165,15,21)",
            "rgb(103,0,13)"
        ],
        type: "seq"
    },
    Set1: {
        3: [
            "rgb(228,26,28)",
            "rgb(55,126,184)",
            "rgb(77,175,74)"
        ],
        4: [
            "rgb(228,26,28)",
            "rgb(55,126,184)",
            "rgb(77,175,74)",
            "rgb(152,78,163)"
        ],
        5: [
            "rgb(228,26,28)",
            "rgb(55,126,184)",
            "rgb(77,175,74)",
            "rgb(152,78,163)",
            "rgb(255,127,0)"
        ],
        6: [
            "rgb(228,26,28)",
            "rgb(55,126,184)",
            "rgb(77,175,74)",
            "rgb(152,78,163)",
            "rgb(255,127,0)",
            "rgb(255,255,51)"
        ],
        7: [
            "rgb(228,26,28)",
            "rgb(55,126,184)",
            "rgb(77,175,74)",
            "rgb(152,78,163)",
            "rgb(255,127,0)",
            "rgb(255,255,51)",
            "rgb(166,86,40)"
        ],
        8: [
            "rgb(228,26,28)",
            "rgb(55,126,184)",
            "rgb(77,175,74)",
            "rgb(152,78,163)",
            "rgb(255,127,0)",
            "rgb(255,255,51)",
            "rgb(166,86,40)",
            "rgb(247,129,191)"
        ],
        9: [
            "rgb(228,26,28)",
            "rgb(55,126,184)",
            "rgb(77,175,74)",
            "rgb(152,78,163)",
            "rgb(255,127,0)",
            "rgb(255,255,51)",
            "rgb(166,86,40)",
            "rgb(247,129,191)",
            "rgb(153,153,153)"
        ],
        type: "qual"
    },
    Set2: {
        3: [
            "rgb(102,194,165)",
            "rgb(252,141,98)",
            "rgb(141,160,203)"
        ],
        4: [
            "rgb(102,194,165)",
            "rgb(252,141,98)",
            "rgb(141,160,203)",
            "rgb(231,138,195)"
        ],
        5: [
            "rgb(102,194,165)",
            "rgb(252,141,98)",
            "rgb(141,160,203)",
            "rgb(231,138,195)",
            "rgb(166,216,84)"
        ],
        6: [
            "rgb(102,194,165)",
            "rgb(252,141,98)",
            "rgb(141,160,203)",
            "rgb(231,138,195)",
            "rgb(166,216,84)",
            "rgb(255,217,47)"
        ],
        7: [
            "rgb(102,194,165)",
            "rgb(252,141,98)",
            "rgb(141,160,203)",
            "rgb(231,138,195)",
            "rgb(166,216,84)",
            "rgb(255,217,47)",
            "rgb(229,196,148)"
        ],
        8: [
            "rgb(102,194,165)",
            "rgb(252,141,98)",
            "rgb(141,160,203)",
            "rgb(231,138,195)",
            "rgb(166,216,84)",
            "rgb(255,217,47)",
            "rgb(229,196,148)",
            "rgb(179,179,179)"
        ],
        type: "qual"
    },
    Set3: {
        10: [
            "rgb(141,211,199)",
            "rgb(255,255,179)",
            "rgb(190,186,218)",
            "rgb(251,128,114)",
            "rgb(128,177,211)",
            "rgb(253,180,98)",
            "rgb(179,222,105)",
            "rgb(252,205,229)",
            "rgb(217,217,217)",
            "rgb(188,128,189)"
        ],
        11: [
            "rgb(141,211,199)",
            "rgb(255,255,179)",
            "rgb(190,186,218)",
            "rgb(251,128,114)",
            "rgb(128,177,211)",
            "rgb(253,180,98)",
            "rgb(179,222,105)",
            "rgb(252,205,229)",
            "rgb(217,217,217)",
            "rgb(188,128,189)",
            "rgb(204,235,197)"
        ],
        12: [
            "rgb(141,211,199)",
            "rgb(255,255,179)",
            "rgb(190,186,218)",
            "rgb(251,128,114)",
            "rgb(128,177,211)",
            "rgb(253,180,98)",
            "rgb(179,222,105)",
            "rgb(252,205,229)",
            "rgb(217,217,217)",
            "rgb(188,128,189)",
            "rgb(204,235,197)",
            "rgb(255,237,111)"
        ],
        3: [
            "rgb(141,211,199)",
            "rgb(255,255,179)",
            "rgb(190,186,218)"
        ],
        4: [
            "rgb(141,211,199)",
            "rgb(255,255,179)",
            "rgb(190,186,218)",
            "rgb(251,128,114)"
        ],
        5: [
            "rgb(141,211,199)",
            "rgb(255,255,179)",
            "rgb(190,186,218)",
            "rgb(251,128,114)",
            "rgb(128,177,211)"
        ],
        6: [
            "rgb(141,211,199)",
            "rgb(255,255,179)",
            "rgb(190,186,218)",
            "rgb(251,128,114)",
            "rgb(128,177,211)",
            "rgb(253,180,98)"
        ],
        7: [
            "rgb(141,211,199)",
            "rgb(255,255,179)",
            "rgb(190,186,218)",
            "rgb(251,128,114)",
            "rgb(128,177,211)",
            "rgb(253,180,98)",
            "rgb(179,222,105)"
        ],
        8: [
            "rgb(141,211,199)",
            "rgb(255,255,179)",
            "rgb(190,186,218)",
            "rgb(251,128,114)",
            "rgb(128,177,211)",
            "rgb(253,180,98)",
            "rgb(179,222,105)",
            "rgb(252,205,229)"
        ],
        9: [
            "rgb(141,211,199)",
            "rgb(255,255,179)",
            "rgb(190,186,218)",
            "rgb(251,128,114)",
            "rgb(128,177,211)",
            "rgb(253,180,98)",
            "rgb(179,222,105)",
            "rgb(252,205,229)",
            "rgb(217,217,217)"
        ],
        type: "qual"
    },
    Spectral: {
        10: [
            "rgb(158,1,66)",
            "rgb(213,62,79)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,139)",
            "rgb(230,245,152)",
            "rgb(171,221,164)",
            "rgb(102,194,165)",
            "rgb(50,136,189)",
            "rgb(94,79,162)"
        ],
        11: [
            "rgb(158,1,66)",
            "rgb(213,62,79)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,139)",
            "rgb(255,255,191)",
            "rgb(230,245,152)",
            "rgb(171,221,164)",
            "rgb(102,194,165)",
            "rgb(50,136,189)",
            "rgb(94,79,162)"
        ],
        3: [
            "rgb(252,141,89)",
            "rgb(255,255,191)",
            "rgb(153,213,148)"
        ],
        4: [
            "rgb(215,25,28)",
            "rgb(253,174,97)",
            "rgb(171,221,164)",
            "rgb(43,131,186)"
        ],
        5: [
            "rgb(215,25,28)",
            "rgb(253,174,97)",
            "rgb(255,255,191)",
            "rgb(171,221,164)",
            "rgb(43,131,186)"
        ],
        6: [
            "rgb(213,62,79)",
            "rgb(252,141,89)",
            "rgb(254,224,139)",
            "rgb(230,245,152)",
            "rgb(153,213,148)",
            "rgb(50,136,189)"
        ],
        7: [
            "rgb(213,62,79)",
            "rgb(252,141,89)",
            "rgb(254,224,139)",
            "rgb(255,255,191)",
            "rgb(230,245,152)",
            "rgb(153,213,148)",
            "rgb(50,136,189)"
        ],
        8: [
            "rgb(213,62,79)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,139)",
            "rgb(230,245,152)",
            "rgb(171,221,164)",
            "rgb(102,194,165)",
            "rgb(50,136,189)"
        ],
        9: [
            "rgb(213,62,79)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,139)",
            "rgb(255,255,191)",
            "rgb(230,245,152)",
            "rgb(171,221,164)",
            "rgb(102,194,165)",
            "rgb(50,136,189)"
        ],
        type: "div"
    },
    YlGn: {
        3: [
            "rgb(247,252,185)",
            "rgb(173,221,142)",
            "rgb(49,163,84)"
        ],
        4: [
            "rgb(255,255,204)",
            "rgb(194,230,153)",
            "rgb(120,198,121)",
            "rgb(35,132,67)"
        ],
        5: [
            "rgb(255,255,204)",
            "rgb(194,230,153)",
            "rgb(120,198,121)",
            "rgb(49,163,84)",
            "rgb(0,104,55)"
        ],
        6: [
            "rgb(255,255,204)",
            "rgb(217,240,163)",
            "rgb(173,221,142)",
            "rgb(120,198,121)",
            "rgb(49,163,84)",
            "rgb(0,104,55)"
        ],
        7: [
            "rgb(255,255,204)",
            "rgb(217,240,163)",
            "rgb(173,221,142)",
            "rgb(120,198,121)",
            "rgb(65,171,93)",
            "rgb(35,132,67)",
            "rgb(0,90,50)"
        ],
        8: [
            "rgb(255,255,229)",
            "rgb(247,252,185)",
            "rgb(217,240,163)",
            "rgb(173,221,142)",
            "rgb(120,198,121)",
            "rgb(65,171,93)",
            "rgb(35,132,67)",
            "rgb(0,90,50)"
        ],
        9: [
            "rgb(255,255,229)",
            "rgb(247,252,185)",
            "rgb(217,240,163)",
            "rgb(173,221,142)",
            "rgb(120,198,121)",
            "rgb(65,171,93)",
            "rgb(35,132,67)",
            "rgb(0,104,55)",
            "rgb(0,69,41)"
        ],
        type: "seq"
    },
    YlGnBu: {
        3: [
            "rgb(237,248,177)",
            "rgb(127,205,187)",
            "rgb(44,127,184)"
        ],
        4: [
            "rgb(255,255,204)",
            "rgb(161,218,180)",
            "rgb(65,182,196)",
            "rgb(34,94,168)"
        ],
        5: [
            "rgb(255,255,204)",
            "rgb(161,218,180)",
            "rgb(65,182,196)",
            "rgb(44,127,184)",
            "rgb(37,52,148)"
        ],
        6: [
            "rgb(255,255,204)",
            "rgb(199,233,180)",
            "rgb(127,205,187)",
            "rgb(65,182,196)",
            "rgb(44,127,184)",
            "rgb(37,52,148)"
        ],
        7: [
            "rgb(255,255,204)",
            "rgb(199,233,180)",
            "rgb(127,205,187)",
            "rgb(65,182,196)",
            "rgb(29,145,192)",
            "rgb(34,94,168)",
            "rgb(12,44,132)"
        ],
        8: [
            "rgb(255,255,217)",
            "rgb(237,248,177)",
            "rgb(199,233,180)",
            "rgb(127,205,187)",
            "rgb(65,182,196)",
            "rgb(29,145,192)",
            "rgb(34,94,168)",
            "rgb(12,44,132)"
        ],
        9: [
            "rgb(255,255,217)",
            "rgb(237,248,177)",
            "rgb(199,233,180)",
            "rgb(127,205,187)",
            "rgb(65,182,196)",
            "rgb(29,145,192)",
            "rgb(34,94,168)",
            "rgb(37,52,148)",
            "rgb(8,29,88)"
        ],
        type: "seq"
    },
    YlOrBr: {
        3: [
            "rgb(255,247,188)",
            "rgb(254,196,79)",
            "rgb(217,95,14)"
        ],
        4: [
            "rgb(255,255,212)",
            "rgb(254,217,142)",
            "rgb(254,153,41)",
            "rgb(204,76,2)"
        ],
        5: [
            "rgb(255,255,212)",
            "rgb(254,217,142)",
            "rgb(254,153,41)",
            "rgb(217,95,14)",
            "rgb(153,52,4)"
        ],
        6: [
            "rgb(255,255,212)",
            "rgb(254,227,145)",
            "rgb(254,196,79)",
            "rgb(254,153,41)",
            "rgb(217,95,14)",
            "rgb(153,52,4)"
        ],
        7: [
            "rgb(255,255,212)",
            "rgb(254,227,145)",
            "rgb(254,196,79)",
            "rgb(254,153,41)",
            "rgb(236,112,20)",
            "rgb(204,76,2)",
            "rgb(140,45,4)"
        ],
        8: [
            "rgb(255,255,229)",
            "rgb(255,247,188)",
            "rgb(254,227,145)",
            "rgb(254,196,79)",
            "rgb(254,153,41)",
            "rgb(236,112,20)",
            "rgb(204,76,2)",
            "rgb(140,45,4)"
        ],
        9: [
            "rgb(255,255,229)",
            "rgb(255,247,188)",
            "rgb(254,227,145)",
            "rgb(254,196,79)",
            "rgb(254,153,41)",
            "rgb(236,112,20)",
            "rgb(204,76,2)",
            "rgb(153,52,4)",
            "rgb(102,37,6)"
        ],
        type: "seq"
    },
    YlOrRd: {
        3: [
            "rgb(255,237,160)",
            "rgb(254,178,76)",
            "rgb(240,59,32)"
        ],
        4: [
            "rgb(255,255,178)",
            "rgb(254,204,92)",
            "rgb(253,141,60)",
            "rgb(227,26,28)"
        ],
        5: [
            "rgb(255,255,178)",
            "rgb(254,204,92)",
            "rgb(253,141,60)",
            "rgb(240,59,32)",
            "rgb(189,0,38)"
        ],
        6: [
            "rgb(255,255,178)",
            "rgb(254,217,118)",
            "rgb(254,178,76)",
            "rgb(253,141,60)",
            "rgb(240,59,32)",
            "rgb(189,0,38)"
        ],
        7: [
            "rgb(255,255,178)",
            "rgb(254,217,118)",
            "rgb(254,178,76)",
            "rgb(253,141,60)",
            "rgb(252,78,42)",
            "rgb(227,26,28)",
            "rgb(177,0,38)"
        ],
        8: [
            "rgb(255,255,204)",
            "rgb(255,237,160)",
            "rgb(254,217,118)",
            "rgb(254,178,76)",
            "rgb(253,141,60)",
            "rgb(252,78,42)",
            "rgb(227,26,28)",
            "rgb(177,0,38)"
        ],
        type: "seq"
    }
};

});

var colorbrewer$1 = unwrapExports(colorbrewer);
var colorbrewer_1 = colorbrewer.palettes;

var palette_service = createCommonjsModule(function (module, exports) {
"use strict";
var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });





const DEFAULT_NUM_COLOURS = 3;
let PaletteService = class PaletteService {
    constructor(_http) {
        this._http = _http;
        this.namedPalettes = {};
        this._source = '';
    }
    set source(val) {
        this._source = val;
    }
    getPalette(name, reverse, numColours) {
        var palette = null;
        if (this.namedPalettes[name]) {
            palette = this.namedPalettes[name];
        }
        else if (colorbrewer.palettes[name]) {
            palette = colorbrewer.palettes[name][numColours || DEFAULT_NUM_COLOURS];
        }
        if (palette) {
            if (reverse) {
                return rxjs.of(palette.slice().reverse());
            }
            return rxjs.of(palette.slice());
        }
        return this._http.get(this._source + '/' + name + '.pal', { responseType: 'text' }).pipe(operators.map((text) => this.parseNCWMSPalette(text)));
    }
    parseNCWMSPalette(txt) {
        return txt.split('\n')
            .map(ln => ln.replace(/\#.*/g, '').trim().replace(/ +/g, ' '))
            .filter(ln => ln.length)
            .map(e => `rgb(${e.split(' ').join(',')})`);
    }
    colourIndex(val, min, max, count) {
        let point = (val - min) / (max - min);
        let pos = Math.round(point * (count - 1));
        return pos;
    }
};
PaletteService.ctorParameters = () => [
    { type: http.HttpClient }
];
PaletteService = __decorate([
    core.Injectable(),
    __metadata("design:paramtypes", [http.HttpClient])
], PaletteService);
exports.PaletteService = PaletteService;

});

var palette_service$1 = unwrapExports(palette_service);
var palette_service_1 = palette_service.PaletteService;

var timeUtils_service = createCommonjsModule(function (module, exports) {
"use strict";
var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });

function utcDate(y, m, d) {
    return new Date(Date.UTC(y, m, d));
}
exports.utcDate = utcDate;
function utcDateCopy(d) {
    return utcDate(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());
}
exports.utcDateCopy = utcDateCopy;
let TimeUtilsService = class TimeUtilsService {
    constructor() {
        this.specialDates = {
            yesterday: () => {
                var d = new Date();
                d.setDate(d.getDate() - 1);
                return d;
            }
        };
    }
    convertDate(d) {
        if (!d) {
            d = new Date();
        }
        var date;
        if (typeof (d) === 'string') {
            var dateText = d;
            if (this.specialDates[dateText]) {
                date = this.specialDates[dateText]();
            }
            else {
                var [year, month, day, other] = d.split('-').map(c => +c);
                date = utcDate(year, month, day);
            }
        }
        else {
            date = d;
        }
        return {
            day: date.getUTCDate(),
            month: date.getUTCMonth() + 1,
            year: date.getUTCFullYear()
        };
    }
    datesEqual(lhs, rhs) {
        if (!lhs || !rhs) {
            return false;
        }
        return (lhs.year === rhs.year) &&
            (lhs.month === rhs.month) &&
            (lhs.day === rhs.day);
    }
};
TimeUtilsService = __decorate([
    core.Injectable(),
    __metadata("design:paramtypes", [])
], TimeUtilsService);
exports.TimeUtilsService = TimeUtilsService;

});

var timeUtils_service$1 = unwrapExports(timeUtils_service);
var timeUtils_service_1 = timeUtils_service.utcDate;
var timeUtils_service_2 = timeUtils_service.utcDateCopy;
var timeUtils_service_3 = timeUtils_service.TimeUtilsService;

var staticData_service = createCommonjsModule(function (module, exports) {
"use strict";
var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });



let StaticDataService = class StaticDataService {
    constructor(http) {
        this.http = http;
        this.cache = {};
    }
    get(host, path) {
        var url = `${host.url}${path}`;
        if (!this.cache[url]) {
            let uniqueUrl = url;
            if (uniqueUrl.indexOf('?') < 0) {
                uniqueUrl += '?';
            }
            else {
                uniqueUrl += '&';
            }
            uniqueUrl += `time=${new Date().getTime()}`;
            this.cache[url] = this.http.get(uniqueUrl).pipe(operators.publishReplay(), operators.refCount());
        }
        return this.cache[url];
    }
};
StaticDataService.ctorParameters = () => [
    { type: http.HttpClient }
];
StaticDataService = __decorate([
    core.Injectable(),
    __metadata("design:paramtypes", [http.HttpClient])
], StaticDataService);
exports.StaticDataService = StaticDataService;

});

var staticData_service$1 = unwrapExports(staticData_service);
var staticData_service_1 = staticData_service.StaticDataService;

var opendap_service = createCommonjsModule(function (module, exports) {
"use strict";
var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });





let OpendapService = class OpendapService {
    constructor(http) {
        this.http = http;
    }
    makeURL(host, filepath) {
        return host.url + '/dodsC/' + filepath;
    }
    get(url) {
        return this.http.get(url, { responseType: 'text' });
    }
    getData(queryUrl, das) {
        return this.get(queryUrl).pipe(operators.map((txt) => dapQuery.simplify(dapQuery.parseData(txt, das))));
    }
    getDAS(url) {
        return this.get(url + '.das').pipe(operators.map(dapQuery.parseDAS));
    }
    getDDX(url) {
        return this.get(url + '.ddx').pipe(operators.map(dapQuery.parseDDX));
    }
    getExtent(url) {
        console.log(url);
        return rxjs.forkJoin([
            this.getDAS(url),
            this.getDDX(url)
        ]).pipe(operators.switchMap(([theDAS, theDDX]) => {
            var das = theDAS;
            return rxjs.forkJoin([
                this.getData(url + '.ascii?latitude', das),
                this.getData(url + '.ascii?longitude', das)
            ]);
        }), operators.map((ll) => {
            var lats = ll[0].latitude;
            var lons = ll[1].longitude;
            return [lats[0], lats[lats.length - 1],
                lons[0], lons[lons.length - 1]];
        }));
    }
    dapRangeQuery(from, to, step) {
        step = step || 1;
        if (to === undefined) {
            to = from;
        }
        return '[' + from + ':' + step + ':' + to + ']';
    }
};
OpendapService.ctorParameters = () => [
    { type: http.HttpClient }
];
OpendapService = __decorate([
    core.Injectable(),
    __metadata("design:paramtypes", [http.HttpClient])
], OpendapService);
exports.OpendapService = OpendapService;

});

var opendap_service$1 = unwrapExports(opendap_service);
var opendap_service_1 = opendap_service.OpendapService;

var metadata_service = createCommonjsModule(function (module, exports) {
"use strict";
var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });




exports.LAT_NAMES = ['latitude', 'lat'];
exports.LNG_NAMES = ['longitude', 'lng', 'lon'];
exports.TIME_NAMES = ['time', 't'];
let MetadataService = class MetadataService {
    constructor(dap) {
        this.dap = dap;
        this.ddxCache = {};
        this.dasCache = {};
        this.timeCache = {};
    }
    identifyCoordinate(ddx, ...possibleNames) {
        for (let n of possibleNames) {
            if (ddx.variables[n]) {
                return n;
            }
        }
        return undefined;
    }
    getDDX(host, file) {
        var url = this.dap.makeURL(host, file);
        return this.ddxForUrl(url);
    }
    ddxForUrl(url) {
        if (!this.ddxCache[url]) {
            this.ddxCache[url] =
                this.dap.getDDX(url).pipe(operators.publishReplay(), operators.refCount());
        }
        return this.ddxCache[url];
    }
    getDDXForLayer(ml) {
        return this.getDDX(ml.flattenedSettings.host, ml.interpolatedFile);
    }
    getDAS(host, file) {
        var url = this.dap.makeURL(host, file);
        return this.dasForUrl(url);
    }
    dasForUrl(url) {
        if (!this.dasCache[url]) {
            this.dasCache[url] =
                this.dap.getDAS(url).pipe(operators.publishReplay(), operators.refCount());
        }
        return this.dasCache[url];
    }
    getDASForLayer(ml) {
        return this.getDAS(ml.flattenedSettings.host, ml.interpolatedFile);
    }
    getMetadata(ml) {
        if (ml.flattenedSettings.host.software !== 'tds') {
            return rxjs.of({});
        }
        return rxjs.forkJoin([this.getDASForLayer(ml), this.getDDXForLayer(ml)]).pipe(operators.map(meta => {
            return {
                das: meta[0],
                ddx: meta[1]
            };
        }), operators.map(meta => {
            return Object.assign({}, meta.das.attr || {}, meta.ddx.variables[ml.flattenedSettings.layer || ml.flattenedSettings.variable] || {});
        }));
    }
    populateMetadata(ml) {
        this.getMetadata(ml).subscribe(entry => {
            setTimeout(() => {
                ml.retrievedMetadata = entry;
            });
        });
    }
    getGrid(host, file) {
        const url = this.dap.makeURL(host, file);
        return this.getGridForURL(url);
    }
    getGridForURL(url) {
        const ddx$ = this.ddxForUrl(url);
        const das$ = this.dasForUrl(url);
        const res$ = rxjs.forkJoin([ddx$, das$]).pipe(operators.map((metadata) => {
            const ddx = metadata[0];
            const das = metadata[1];
            const latCoord = this.identifyCoordinate(ddx, ...exports.LAT_NAMES);
            const lngCoord = this.identifyCoordinate(ddx, ...exports.LNG_NAMES);
            const lat$ = this.dap.getData(`${url}.ascii?${latCoord}`, das).pipe(operators.map((dd) => dd[latCoord]));
            const lng$ = this.dap.getData(`${url}.ascii?${lngCoord}`, das).pipe(operators.map((dd) => dd[lngCoord]));
            return rxjs.forkJoin(lat$, lng$);
        }), operators.switchAll(), operators.publishReplay(), operators.refCount());
        return res$;
    }
    getGridForLayer(ml) {
        return this.getGrid(ml.flattenedSettings.host, ml.interpolatedFile);
    }
    getSpatialExtent(ml) {
        return this.getGridForLayer(ml).pipe(operators.map(([lats, lngs]) => {
            var result = {
                east: Math.max(...lngs),
                west: Math.min(...lngs),
                north: Math.max(...lats),
                south: Math.min(...lats)
            };
            return result;
        })).pipe(operators.publishReplay(), operators.refCount());
    }
    getTimeDimension(host, file) {
        const url = this.dap.makeURL(host, file);
        return this.getTimeDimensionForURL(url);
    }
    getTimeDimensionForURL(url) {
        if (!this.timeCache[url]) {
            const ddx$ = this.ddxForUrl(url);
            const das$ = this.dasForUrl(url);
            const res$ = rxjs.forkJoin([ddx$, das$]).pipe(operators.map((metadata) => {
                const ddx = metadata[0];
                const das = metadata[1];
                const timeCoord = this.identifyCoordinate(ddx, ...exports.TIME_NAMES);
                const time$ = this.dap.getData(`${url}.ascii?${timeCoord}`, das).pipe(operators.map((dd) => dd[timeCoord]));
                return time$;
            }), operators.switchAll(), operators.shareReplay());
            this.timeCache[url] = res$;
        }
        return this.timeCache[url];
    }
};
MetadataService.ctorParameters = () => [
    { type: opendap_service.OpendapService }
];
MetadataService = __decorate([
    core.Injectable(),
    __metadata("design:paramtypes", [opendap_service.OpendapService])
], MetadataService);
exports.MetadataService = MetadataService;

});

var metadata_service$1 = unwrapExports(metadata_service);
var metadata_service_1 = metadata_service.LAT_NAMES;
var metadata_service_2 = metadata_service.LNG_NAMES;
var metadata_service_3 = metadata_service.TIME_NAMES;
var metadata_service_4 = metadata_service.MetadataService;

var timeseries_service = createCommonjsModule(function (module, exports) {
"use strict";
var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });





;
let TimeseriesService = class TimeseriesService {
    constructor(metadata, dap) {
        this.metadata = metadata;
        this.dap = dap;
    }
    getTimeseries(host, file, variable, pt, additionalIndices, fillValue) {
        additionalIndices = additionalIndices || {};
        var url = this.dap.makeURL(host, file);
        var ddx$ = this.metadata.ddxForUrl(url);
        var das$ = this.metadata.dasForUrl(url);
        var variable = variable;
        return rxjs.forkJoin(ddx$, das$, this.metadata.getGrid(host, file)).pipe(operators.switchMap(([ddx, das, latsAndLngs]) => {
            const lats = latsAndLngs[0];
            const lngs = latsAndLngs[1];
            var latIndex = this.indexInDimension(pt.lat, lats);
            var lngIndex = this.indexInDimension(pt.lng, lngs);
            if (fillValue === undefined) {
                fillValue = +ddx.variables[variable]._FillValue;
            }
            var query = this.makeTimeQuery(ddx, variable, latIndex, lngIndex, additionalIndices);
            return this.dap.getData(`${url}.ascii?${variable}${query}`, das);
        }), operators.map((data) => {
            let vals = data[variable];
            if (!vals.length) {
                vals = [data[variable]];
            }
            return {
                dates: (data.time || data.t),
                values: vals.map(v => (v === fillValue) ? NaN : v)
            };
        }));
    }
    getTimeseriesForLayer(ml, pt) {
        return this.getTimeseries(ml.flattenedSettings.host, ml.interpolatedFile, ml.flattenedSettings.layer || ml.flattenedSettings.variable, pt, null, ml.flattenedSettings.fillValue);
    }
    makeTimeQuery(ddx, variable, latIndex, lngIndex, additionalIndices) {
        var metadata = ddx.variables[variable];
        var query = '';
        metadata.dimensions.forEach((dim) => {
            var dName = dim.name.toLowerCase();
            if (metadata_service.TIME_NAMES.indexOf(dName) >= 0) {
                query += this.dapRangeQuery(0, +(dim.size) - 1);
            }
            else if (metadata_service.LAT_NAMES.indexOf(dName) >= 0) {
                query += this.dapRangeQuery(latIndex);
            }
            else if (metadata_service.LNG_NAMES.indexOf(dName) >= 0) {
                query += this.dapRangeQuery(lngIndex);
            }
            else {
                query += this.dapRangeQuery(additionalIndices[dName] || 0);
            }
        });
        return query;
    }
    dapRangeQuery(from, to, step) {
        step = step || 1;
        if (to === undefined) {
            to = from;
        }
        return '[' + from + ':' + step + ':' + to + ']';
    }
    indexInDimension(c, dim, trim) {
        var minIndex = 0;
        var maxIndex = dim.length - 1;
        if (trim) {
            maxIndex -= trim;
        }
        const rev = dim[0] > dim[dim.length - 1];
        if (rev) {
            minIndex = maxIndex;
            maxIndex = 0;
        }
        var currentIndex;
        while ((minIndex <= maxIndex) || (rev && (maxIndex <= minIndex))) {
            if (c <= dim[minIndex]) {
                return minIndex;
            }
            if (c >= dim[maxIndex]) {
                return maxIndex;
            }
            currentIndex = Math.floor((minIndex + maxIndex) / 2);
            var d1 = Math.abs(dim[currentIndex] - c);
            var d2 = Math.abs(dim[currentIndex + 1] - c);
            if (rev) {
                if (d2 <= d1) {
                    maxIndex = currentIndex + 1;
                }
                else {
                    minIndex = currentIndex;
                }
            }
            else {
                if (d2 <= d1) {
                    minIndex = currentIndex + 1;
                }
                else {
                    maxIndex = currentIndex;
                }
            }
        }
        return currentIndex;
    }
    ;
};
TimeseriesService.ctorParameters = () => [
    { type: metadata_service.MetadataService },
    { type: opendap_service.OpendapService }
];
TimeseriesService = __decorate([
    core.Injectable(),
    __metadata("design:paramtypes", [metadata_service.MetadataService, opendap_service.OpendapService])
], TimeseriesService);
exports.TimeseriesService = TimeseriesService;

});

var timeseries_service$1 = unwrapExports(timeseries_service);
var timeseries_service_1 = timeseries_service.TimeseriesService;

var interpolation_service = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// @dynamic
class InterpolationService {
    static isDefined(val) {
        return val !== undefined && val !== null;
    }
    static interpolate(expr, params) {
        if (typeof expr !== 'string' || !params) {
            return expr;
        }
        return expr.replace(InterpolationService.templateMatcher, (substring, b) => {
            let r = InterpolationService.getValue(params, b);
            return InterpolationService.isDefined(r) ? r : substring;
        });
    }
    static getValue(target, key) {
        let keys = key.split('.');
        key = '';
        do {
            key += keys.shift();
            if (InterpolationService.isDefined(target) && InterpolationService.isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {
                target = target[key];
                key = '';
            }
            else if (!keys.length) {
                target = undefined;
            }
            else {
                key += '.';
            }
        } while (keys.length);
        return target;
    }
}
InterpolationService.templateMatcher = /{{\s?([^{}\s]*)\s?}}/g;
exports.InterpolationService = InterpolationService;

});

var interpolation_service$1 = unwrapExports(interpolation_service);
var interpolation_service_1 = interpolation_service.InterpolationService;

var pointSelection_service = createCommonjsModule(function (module, exports) {
"use strict";
var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });





let PointSelectionService = class PointSelectionService {
    constructor(meta) {
        this.meta = meta;
        this.latestPointSelectionSource = new rxjs.BehaviorSubject(null);
        this.latestPointSelection = this.latestPointSelectionSource.asObservable();
    }
    unchanged(current, updated) {
        if (!current && !updated) {
            return true;
        }
        if (!current || !updated) {
            return false;
        }
        if (current.variable !== updated.variable) {
            return false;
        }
        if (!Object.keys(current.tags).every(t => current.tags[t] === updated.tags[t])) {
            return false;
        }
        if (current.catalog.url !== updated.catalog.url) {
            return false;
        }
        if (current.feature !== updated.feature) {
            return false;
        }
        return true;
        // return false; // TODO
    }
    pointSelection(sel) {
        let current = this.latestPointSelectionSource.getValue();
        if (this.unchanged(current, sel)) {
            return;
        }
        let url = this.fullUrl(sel);
        if (!this.validUrl(url)) {
            return; // Not a complete selection
        }
        if (!sel.variable) {
            return; // Not a complete selection
        }
        this.latestPointSelectionSource.next(sel);
    }
    fullUrl(sel) {
        let params = Object.assign({}, sel.feature ? sel.feature.properties : {}, sel.tags);
        return interpolation_service.InterpolationService.interpolate(sel.catalog.url, params);
    }
    validUrl(url) {
        return url.indexOf('{{') < 0;
    }
    timeseriesVariables(sel) {
        let coords = sel.catalog.coordinates || {};
        let url = this.fullUrl(sel);
        if (!this.validUrl(url)) {
            return rxjs.of([]);
        }
        return this.meta.ddxForUrl(url).pipe(operators.map(ddx => {
            let variables = ddx.variables;
            let variableNames = Object.keys(variables).filter(v => {
                let dims = ddx.variables[v].dimensions;
                return Object.keys(coords).every(coord => {
                    return dims.find(dim => dim.name === coord);
                });
            });
            return variableNames.map(v => {
                if (sel.catalog && sel.catalog.displayFormat) {
                    let fmt = Object.assign({ variable: v }, ddx.variables[v]);
                    return {
                        value: v,
                        label: interpolation_service.InterpolationService.interpolate(sel.catalog.displayFormat, fmt)
                    };
                }
                if (ddx.variables[v].long_name) {
                    return {
                        value: v,
                        label: ddx.variables[v].long_name
                    };
                }
                return {
                    value: v,
                    label: v
                };
            });
        }));
    }
};
PointSelectionService.ctorParameters = () => [
    { type: metadata_service.MetadataService }
];
PointSelectionService = __decorate([
    core.Injectable(),
    __metadata("design:paramtypes", [metadata_service.MetadataService])
], PointSelectionService);
exports.PointSelectionService = PointSelectionService;

});

var pointSelection_service$1 = unwrapExports(pointSelection_service);
var pointSelection_service_1 = pointSelection_service.PointSelectionService;

var availableDates_service = createCommonjsModule(function (module, exports) {
"use strict";
var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });





let AvailableDatesService = class AvailableDatesService {
    constructor(metadata) {
        this.metadata = metadata;
    }
    fnForYear(mapped, year) {
        const publication = mapped.layer.publications[mapped.options.publication];
        return interpolation_service.InterpolationService.interpolate(publication.options.filepath, {
            year: year
        });
    }
    availableDates(mapped, year) {
        let layer = mapped.layer;
        let fn = this.fnForYear(mapped, year);
        let res$ = this.metadata.getTimeDimension(layer.options.host, fn);
        if (!layer.timeshift) {
            return res$;
        }
        if (layer.timePeriod.containsYear(year - 1)) {
            fn = this.fnForYear(mapped, year - 1);
            let prev$ = this.metadata.getTimeDimension(layer.host, fn);
            res$ = rxjs.forkJoin(...[prev$, res$]).pipe(operators.map((years) => years[0].concat(years[1])));
        }
        return res$.pipe(operators.map(dates => {
            return dates.map(d => {
                let res = new Date(d.getTime());
                res.setUTCDate(d.getUTCDate() - layer.timeshift * layer.timestep);
                return res;
            });
        }), operators.map(dates => dates.filter((d, i) => (i >= Math.abs(layer.timeshift)) && (d.getUTCFullYear() === year))));
    }
};
AvailableDatesService.ctorParameters = () => [
    { type: metadata_service.MetadataService }
];
AvailableDatesService = __decorate([
    core.Injectable(),
    __metadata("design:paramtypes", [metadata_service.MetadataService])
], AvailableDatesService);
exports.AvailableDatesService = AvailableDatesService;

});

var availableDates_service$1 = unwrapExports(availableDates_service);
var availableDates_service_1 = availableDates_service.AvailableDatesService;

var catalog = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const NAMED_OPTIONS = {
    host: 'namedHosts',
    interval: 'namedIntervals'
};
function clone(v) {
    return JSON.parse(JSON.stringify(v));
}
function matchFirstDefinedKey(keys, lhs, rhs) {
    for (let k of keys) {
        if (lhs[k] && rhs[k]) {
            return lhs[k] === rhs[k];
        }
    }
    return false;
}
function mergeArraysByKeys(keys, ...sources) {
    if (!sources.length) {
        return [];
    }
    var result = clone(sources[0]).map(p => new Publication(p));
    for (var i = 1; i < sources.length; i++) {
        var source = sources[i];
        for (var j = 0; j < source.length; j++) {
            var publication = source[j];
            var match = result.findIndex((pub) => matchFirstDefinedKey(keys, pub, publication));
            if (match >= 0) {
                var options = Object.assign({}, publication.options || {}, result[match].options || {});
                result[match] = Object.assign(new Publication(), publication, result[match]);
                result[match].options = options;
            }
            else {
                result.push(new Publication(clone(publication)));
            }
        }
    }
    result = result.filter(p => !p.skip);
    return result;
}
function propagate(target, source, skipPublications) {
    target.options = Object.assign({}, source.options || {}, target.options || {});
    if (!skipPublications) {
        target.publications = mergeArraysByKeys(['timestep', 'label'], target.publications || [], source.publications || []);
        //    console.log(target.publications);
    }
}
function instantiateNamedOptions(dest, source) {
    for (var key in NAMED_OPTIONS) {
        const configKey = NAMED_OPTIONS[key];
        if (!source[configKey]) {
            continue;
        }
        if (!dest[key] || (typeof (dest[key]) !== 'string')) {
            continue;
        }
        const lookup = dest[key];
        dest[key] = source[configKey][lookup];
    }
}
class CatalogOptions {
}
exports.CatalogOptions = CatalogOptions;
class Catalog {
    constructor(config) {
        this.themes = [];
        if (!config) {
            return;
        }
        Object.assign(this, config);
        this.themes = config.themes.map((t) => new Theme(t));
        this.propagateOptions();
        this.instantiateNamedOptions();
    }
    propagateOptions() {
        this.themes.forEach(t => {
            propagate(t, this);
            t.propagateOptions();
        });
    }
    instantiateNamedOptions() {
        if (this.publications) {
            this.publications.forEach(p => p.instantiateNamedOptions(this));
        }
        this.themes.forEach(t => t.instantiateNamedOptions(this));
    }
    allLayers() {
        return this.themes.map(t => t.layers).reduce((prev, curr) => prev.concat(curr), []);
    }
}
exports.Catalog = Catalog;
class Theme {
    constructor(config) {
        this.layers = [];
        if (!config) {
            return;
        }
        Object.assign(this, config);
        if (config.layers) {
            this.layers = config.layers.map((l) => new Layer(l));
        }
        else {
            this.layers = [];
        }
    }
    propagateOptions() {
        this.layers.forEach(l => {
            propagate(l, this);
            l.propagateOptions();
            l.dataCreator = l.dataCreator || this.dataCreator;
        });
    }
    instantiateNamedOptions(source) {
        instantiateNamedOptions(this.options, source);
        this.publications.forEach(p => p.instantiateNamedOptions(source));
        this.layers.forEach(l => l.instantiateNamedOptions(source));
    }
}
exports.Theme = Theme;
class Layer {
    constructor(config) {
        this.publications = [];
        this.options = new CatalogOptions();
        if (!config) {
            return;
        }
        Object.assign(this, config);
        if (config.publications) {
            this.publications = config.publications.map((p) => new Publication(p));
        }
        else {
            this.publications = [];
        }
    }
    propagateOptions() {
        this.publications.forEach(p => {
            propagate(p, this, true);
        });
    }
    instantiateNamedOptions(source) {
        instantiateNamedOptions(this.options, source);
        this.publications.forEach(p => p.instantiateNamedOptions(source));
    }
}
exports.Layer = Layer;
class Publication {
    constructor(config) {
        this.options = new CatalogOptions();
        if (!config) {
            return;
        }
        Object.assign(this, config);
    }
    instantiateNamedOptions(source) {
        instantiateNamedOptions(this.options, source);
    }
}
exports.Publication = Publication;

});

var catalog$1 = unwrapExports(catalog);
var catalog_1 = catalog.CatalogOptions;
var catalog_2 = catalog.Catalog;
var catalog_3 = catalog.Theme;
var catalog_4 = catalog.Layer;
var catalog_5 = catalog.Publication;

var mappedLayer = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

const PUBLICATION_PRIORITY_ORDER = [
    'annual',
    'monthly',
    'daily'
];
const ɵ0 = (host, fn) => {
    let components = fn.split('/');
    components.pop();
    return `${host}/catalog/${components.join('/')}/catalog.html`;
}, ɵ1 = (host, fn, ml) => {
    return ml.layer.options.downloadPath || `${host}${fn}`;
};
exports.ɵ0 = ɵ0;
exports.ɵ1 = ɵ1;
const MAKE_DOWNLOAD_URL = {
    tds: ɵ0,
    static: ɵ1
};
exports.WMS_PARAMETER_NAMES = {
    tds: [
        'layers',
        'styles',
        'colorscalerange',
        'abovemaxcolor',
        'belowmincolor',
        'time',
        'transparent',
        'logscale'
    ],
    geoserver: [
        'transparent',
        'layers'
    ],
    esri: [
        'layers',
        'styles',
        'transparent'
    ]
};
exports.WMS_URL_FORMAT = {
    tds: '/wms/',
    geoserver: '/wms/',
    esri: '/'
};
exports.INTERPOLATED_PARAMETERS = [
    'styles',
    'layers'
];
class MappedLayer {
    constructor(data) {
        this.options = {
            date: new Date(2016, 0, 1) // Set to most recent available date
        };
        this.retrievedMetadata = {};
        this.wmsParameters = {};
        this.flattenedSettings = {};
        this.opacity = 1.0;
        Object.assign(this, data || {});
        if (this.layerType === undefined) {
            this.layerType = this.wmsParameters ? 'wms' : undefined;
        }
    }
    description() {
        return this.layer.description ||
            (this.retrievedMetadata &&
                this.retrievedMetadata[this.layer.descriptionField || 'long_name']);
    }
    leading0(n) {
        if (n < 10) {
            return '0' + n;
        }
        return '' + n;
    }
    defaultPublication() {
        const priorityPublication = PUBLICATION_PRIORITY_ORDER.find(pp => this.layer.publications.findIndex(lp => (lp.timestep === pp) || (lp.label === pp)) >= 0);
        if (priorityPublication) {
            return this.layer.publications.findIndex(p => (p.label === priorityPublication) || (p.timestep === priorityPublication));
        }
        return this.layer.publications.findIndex(p => !p.skip);
    }
    update() {
        this.options.publication = (this.options.publication === undefined) ?
            this.defaultPublication() :
            this.options.publication;
        const publication = this.layer.publications[this.options.publication];
        const host = publication.options.host || {};
        const baseURL = host.url;
        const software = host.software || 'tds';
        this.interpolatedFile = (publication.options.filepath || '');
        const mapParams = Object.assign({}, this.layer, publication.options, publication.options.mapOptions || {}, this.options.date ? {
            decade: decadeText(this.options.date),
            year: this.options.date.getFullYear(),
            month: this.leading0(this.options.date.getMonth() + 1),
            day: this.leading0(this.options.date.getDate()),
        } : {}, this.options, this.options.tags || {});
        if (mapParams.timeFormat) {
            mapParams['time'] = interpolation_service.InterpolationService.interpolate(mapParams.timeFormat, mapParams);
        }
        mapParams.layers = mapParams.layers || mapParams.layer || mapParams.variable;
        exports.INTERPOLATED_PARAMETERS.forEach(p => {
            if (mapParams[p]) {
                mapParams[p] = interpolation_service.InterpolationService.interpolate(mapParams[p], mapParams);
            }
        });
        this.interpolatedFile = interpolation_service.InterpolationService.interpolate(this.interpolatedFile, mapParams);
        this.url = baseURL + exports.WMS_URL_FORMAT[software] + this.interpolatedFile;
        if (MAKE_DOWNLOAD_URL[software]) {
            this.interpolatedDownloadURL = MAKE_DOWNLOAD_URL[software](host.downloadLink || baseURL, this.interpolatedFile, this);
        }
        else {
            this.interpolatedDownloadURL = host.downloadLink || null;
        }
        if (this.layer.options.legend === 'wms') {
            this.legendURL = this.url + '?service=WMS&request=GetLegendGraphic&format=image/png';
            this.legendURL += `&layer=${interpolation_service.InterpolationService.interpolate(mapParams.layers, mapParams)}`;
            this.legendURL += '&version=1.1.1';
            this.options.legend = true;
        }
        else {
            this.legendURL = null;
        }
        if (mapParams.vectors) {
            this.wmsParameters = null;
            this.layerType = 'vector';
            let styles = mapParams.styles || {};
            this._styleFunc = (f) => {
                return styles;
            };
            if (mapParams.vectors === 'point' && mapParams.styles) {
                this.layerType = 'circle';
            }
        }
        else {
            this.layerType = 'wms';
            this.wmsParameters = {};
            exports.WMS_PARAMETER_NAMES[software].forEach(param => {
                if (mapParams[param]) {
                    this.wmsParameters[param] = mapParams[param];
                }
            });
        }
        this.flattenedSettings = mapParams;
        if (mapParams.titleFormat) {
            this.title = interpolation_service.InterpolationService.interpolate(mapParams.titleFormat, mapParams);
        }
        else {
            this.title = this.layer.name;
        }
    }
}
exports.MappedLayer = MappedLayer;
function decadeText(d) {
    let decade = d.getFullYear().toString().slice(0, 3);
    return `${decade}0-${decade}9`;
}

});

var mappedLayer$1 = unwrapExports(mappedLayer);
var mappedLayer_1 = mappedLayer.WMS_PARAMETER_NAMES;
var mappedLayer_2 = mappedLayer.WMS_URL_FORMAT;
var mappedLayer_3 = mappedLayer.INTERPOLATED_PARAMETERS;
var mappedLayer_4 = mappedLayer.MappedLayer;

var catalog_service = createCommonjsModule(function (module, exports) {
"use strict";
var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });






let CatalogService = class CatalogService {
    constructor(_http, metadata) {
        this._http = _http;
        this.metadata = metadata;
    }
    load(catalogJSON) {
        this.current = new catalog.Catalog(catalogJSON);
        this.current.allLayers().filter(l => l.options.smallExtent).forEach(l => {
            l.spatialExtent = this.findExtentOfLayer(l);
        });
    }
    loadFrom(path) {
        return this._http.get(path).pipe(operators.tap(json => this.load(json)), operators.map(_ => this.current));
        //   var result = new Promise<Catalog>((res,rej)=>{
        //     this._http.get(path).subscribe(json=>{
        //       this.load(json);
        //       res(this.current);
        //     });
        //   });
        // return from(result);
    }
    findExtentOfLayer(l) {
        const tmp = new mappedLayer.MappedLayer();
        tmp.layer = l;
        tmp.update();
        return this.metadata.getSpatialExtent(tmp);
    }
};
CatalogService.ctorParameters = () => [
    { type: http.HttpClient },
    { type: metadata_service.MetadataService }
];
CatalogService = __decorate([
    core.Injectable(),
    __metadata("design:paramtypes", [http.HttpClient, metadata_service.MetadataService])
], CatalogService);
exports.CatalogService = CatalogService;

});

var catalog_service$1 = unwrapExports(catalog_service);
var catalog_service_1 = catalog_service.CatalogService;

var mapView_service = createCommonjsModule(function (module, exports) {
"use strict";
var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var MapViewParameterService_1;
Object.defineProperty(exports, "__esModule", { value: true });


let MapViewParameterService = MapViewParameterService_1 = class MapViewParameterService {
    constructor(_location) {
        this._location = _location;
    }
    current() {
        if (!this._location) {
            return {};
        }
        let path = this._location.path().split('/');
        if (path.length > MapViewParameterService_1.parameterNames.length) {
            path.shift();
        }
        let result = {};
        MapViewParameterService_1.parameterNames.forEach((p, i) => result[p] = path[i] || '_');
        return result;
    }
    update(changes) {
        if (!this._location) {
            return;
        }
        let updated = this.current();
        Object.assign(updated, changes);
        this._location.go(this.constructRoute(updated));
    }
    retrieveFromRoute(route) {
        let result = {};
        for (let name of MapViewParameterService_1.parameterNames) {
            result[name] = route.snapshot.params[name];
        }
        return result;
    }
    ;
    constructRoute(parameters) {
        return MapViewParameterService_1.parameterNames.map(n => parameters[n] || '_').join('/');
    }
    routerPaths( /*component:any*/) {
        let result = [];
        let path = '';
        result.push(path);
        //    result.push({path:path,component:component});
        for (let name of MapViewParameterService_1.parameterNames) {
            path += `:${name}`;
            //      result.unshift({path:path,component:component});
            result.unshift(path);
            path += '/';
        }
        return result;
    }
};
MapViewParameterService.ctorParameters = () => [
    { type: common.Location }
];
MapViewParameterService.parameterNames = [];
MapViewParameterService = MapViewParameterService_1 = __decorate([
    core.Injectable(),
    __metadata("design:paramtypes", [common.Location])
], MapViewParameterService);
exports.MapViewParameterService = MapViewParameterService;

});

var mapView_service$1 = unwrapExports(mapView_service);
var mapView_service_1 = mapView_service.MapViewParameterService;

var wms_service = createCommonjsModule(function (module, exports) {
"use strict";
var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var WMSService_1;
Object.defineProperty(exports, "__esModule", { value: true });

//const proj4 = require('proj4');
//const Proj = proj4.Proj;
//const defs = proj4.defs;
//proj4.InterfaceProjection;
//const InterfaceCoordinates = proj4.InterfaceCoordinates;
//const TemplateCoordinates = proj4.TemplateCoordinates;
//const proj4 = require('proj4').default;

const D2R = Math.PI / 180;
let WMSService = WMSService_1 = class WMSService {
    constructor() {
        this.webMercator = (proj4.default || proj4).Proj('EPSG:3857');
        //this.webMercator = proj4.Proj(proj4.defs('EPSG:3857'));
    }
    pointToWebMercator(pt) {
        var ptRadians = { x: pt.lng() * D2R, y: pt.lat() * D2R };
        var ptWM = this.webMercator.forward({ x: ptRadians.x, y: ptRadians.y });
        return ptWM;
    }
    ;
    computeTileBounds(map, coord, zoom) {
        var proj = map.getProjection();
        var zfactor = Math.pow(2, zoom);
        var xScale = WMSService_1.TILE_WIDTH / zfactor;
        var yScale = WMSService_1.TILE_HEIGHT / zfactor;
        var topLeftLatLng = proj.fromPointToLatLng({ x: coord.x * xScale, y: coord.y * yScale });
        var bottomRightLatLng = proj.fromPointToLatLng({ x: (coord.x + 1) * xScale, y: (coord.y + 1) * yScale });
        var topLeftWebMercator = this.pointToWebMercator(topLeftLatLng);
        var bottomRightWebMercator = this.pointToWebMercator(bottomRightLatLng);
        if (topLeftWebMercator.x > bottomRightWebMercator.x) {
            if (topLeftLatLng.lng() === 180.0) {
                topLeftWebMercator.x = -topLeftWebMercator.x;
            }
            else {
                bottomRightWebMercator.x = -bottomRightWebMercator.x;
            }
        }
        var bbox = [topLeftWebMercator.x, bottomRightWebMercator.y, bottomRightWebMercator.x, topLeftWebMercator.y];
        var bboxTxt = bbox.map((n) => n.toFixed(20).replace(/\.?0+$/, "")); // Avoid e notation on small numbers
        return bboxTxt.join(',');
    }
    ;
    buildImageMap(getMap, getURL, getOptions, getOpacity) {
        var me = this;
        return new window.google.maps.ImageMapType({
            getTileUrl: function (coord, zoom) {
                var theMap = getMap();
                if (!theMap) {
                    return '';
                }
                var bbox = me.computeTileBounds(theMap, coord, zoom);
                var url = getURL(zoom) + '&service=WMS&version=1.1.1&request=GetMap';
                url += "&BBOX=" + bbox; // set bounding box
                url += "&FORMAT=image/png"; //WMS format
                var layerParams = getOptions ? getOptions(zoom) : {};
                layerParams.width = WMSService_1.TILE_WIDTH;
                layerParams.height = WMSService_1.TILE_HEIGHT;
                for (var key in layerParams) {
                    url += '&' + key + '=' + layerParams[key];
                }
                url += "&SRS=EPSG:3857"; //set Web Mercator
                return url;
            },
            tileSize: new window.google.maps.Size(WMSService_1.TILE_SIZE, WMSService_1.TILE_SIZE),
            isPng: true,
            opacity: getOpacity ? getOpacity() : 1.0
        });
    }
    ;
};
WMSService.TILE_SIZE = 256;
WMSService.TILE_WIDTH = WMSService_1.TILE_SIZE;
WMSService.TILE_HEIGHT = WMSService_1.TILE_SIZE;
WMSService = WMSService_1 = __decorate([
    core.Injectable(),
    __metadata("design:paramtypes", [])
], WMSService);
exports.WMSService = WMSService;

});

var wms_service$1 = unwrapExports(wms_service);
var wms_service_1 = wms_service.WMSService;

var projection_service = createCommonjsModule(function (module, exports) {
"use strict";
var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });

//import * as proj4 from 'proj4';

//const proj4 = require('proj4').default;
let ProjectionService = class ProjectionService {
    constructor() {
    }
    proj4() {
        return proj4;
    }
};
ProjectionService = __decorate([
    core.Injectable(),
    __metadata("design:paramtypes", [])
], ProjectionService);
exports.ProjectionService = ProjectionService;

});

var projection_service$1 = unwrapExports(projection_service);
var projection_service_1 = projection_service.ProjectionService;

var csv = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function parseCSV(txt) {
    let lines = txt.split('\n');
    let header = lines[0];
    lines = lines.slice(1);
    let columns = header.split(',');
    return lines.filter(ln => ln.length).map(ln => {
        let data = ln.split(',');
        let result = {};
        data.forEach((val, i) => {
            result[columns[i]] = parseVal(val);
        });
        return result;
    });
}
exports.parseCSV = parseCSV;
function parseVal(val) {
    // Try date...
    let components = val.split('-');
    if (components.length === 3) {
        let dateComponents = components.map(c => +c);
        if (!dateComponents.some(isNaN)) {
            return new Date(Date.UTC(dateComponents[0], dateComponents[1] - 1, dateComponents[2]));
        }
    }
    if (val === '') {
        return val;
    }
    // Try numeric
    let numeric = +val;
    if (!isNaN(numeric)) {
        return numeric;
    }
    return val;
}

});

var csv$1 = unwrapExports(csv);
var csv_1 = csv.parseCSV;

var esm2015 = createCommonjsModule(function (module, exports) {
"use strict";
var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var MapWaldCoreModule_1;
Object.defineProperty(exports, "__esModule", { value: true });

















__export(catalog);
__export(mappedLayer);
__export(wms_service);
__export(projection_service);
__export(mapView_service);
__export(interpolation_service);
__export(availableDates_service);
__export(pointSelection_service);
__export(metadata_service);
__export(catalog_service);
__export(palette_service);
__export(staticData_service);
__export(opendap_service);
__export(timeseries_service);
__export(timeUtils_service);
__export(treeFilter_service);
__export(csv);
const services = [
    //$serviceList
    availableDates_service.AvailableDatesService,
    pointSelection_service.PointSelectionService,
    timeseries_service.TimeseriesService,
    staticData_service.StaticDataService,
    metadata_service.MetadataService,
    opendap_service.OpendapService,
    palette_service.PaletteService,
    timeUtils_service.TimeUtilsService,
    wms_service.WMSService,
    mapView_service.MapViewParameterService,
    projection_service.ProjectionService,
    catalog_service.CatalogService,
    treeFilter_service.TreeFilterService
];
//import { CSVService } from './src/csv.service';
//$importList
//$exportList
let MapWaldCoreModule = MapWaldCoreModule_1 = class MapWaldCoreModule {
    static forRoot(moduleInitialisation) {
        return {
            ngModule: MapWaldCoreModule_1,
            providers: services
        };
    }
};
MapWaldCoreModule = MapWaldCoreModule_1 = __decorate([
    core.NgModule({
        imports: [
            common.CommonModule,
            forms.FormsModule,
            http.HttpClientModule
        ],
        declarations: [],
        exports: [],
        providers: services
    })
], MapWaldCoreModule);
exports.MapWaldCoreModule = MapWaldCoreModule;

});

var index = unwrapExports(esm2015);
var esm2015_1 = esm2015.MapWaldCoreModule;

var mapWald = createCommonjsModule(function (module, exports) {
"use strict";
/**
 * Generated bundle index. Do not edit.
 */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(esm2015);

});

var mapWald$1 = unwrapExports(mapWald);

export default mapWald$1;
//# sourceMappingURL=map-wald.js.map
