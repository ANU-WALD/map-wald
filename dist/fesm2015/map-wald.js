import { __decorate, __metadata } from 'tslib';
import { Injectable, NgModule, Input, Component, ElementRef, ViewChild, EventEmitter, Output, NgZone, ViewChildren, QueryList } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { NgbModal, NgbModule } from '@ng-bootstrap/ng-bootstrap';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { NgPipesModule } from 'ngx-pipes';
import { MapsAPILoader, AgmCoreModule, GoogleMapsAPIWrapper, AgmMap } from '@agm/core';
import { Location, CommonModule } from '@angular/common';
import { of, forkJoin, BehaviorSubject, from } from 'rxjs';
import { map, publishReplay, refCount, switchMap, switchAll, shareReplay, tap } from 'rxjs/operators';
import { simplify, parseData, parseDAS, parseDDX } from 'dap-query-js/dist/dap-query';
import * as proj4 from 'proj4';
import proj4__default, {  } from 'proj4';
import { get, set } from 'store';
import { ControlPosition } from '@agm/core/services/google-maps-types';
import { purge, plot } from 'plotly.js/dist/plotly-basic';

let TreeFilterService = class TreeFilterService {
    constructor() {
    }
    filterTree(tree, filterText) {
        tree.visible = false;
        filterText = filterText.trim().toLowerCase();
        const containsFilterText = (label, filterText) => label.trim().toLowerCase().indexOf(filterText) !== -1;
        tree.visible = containsFilterText(tree.label, filterText);
        if (tree.hasOwnProperty("children")) {
            if (tree.visible) {
                tree.children.forEach(child => this.showAll(child));
            }
            else {
                tree.children.map(child => {
                    this.filterTree(child, filterText);
                    tree.visible = tree.visible || child.visible;
                    tree.expanded = tree.expanded || child.visible || child.expanded;
                });
            }
        }
        return tree;
    }
    showAll(tree) {
        tree.visible = true;
        if (tree.hasOwnProperty("children")) {
            tree.children.forEach(c => this.showAll(c));
        }
    }
};
TreeFilterService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [])
], TreeFilterService);

const palettes = {
    Accent: {
        3: [
            "rgb(127,201,127)",
            "rgb(190,174,212)",
            "rgb(253,192,134)"
        ],
        4: [
            "rgb(127,201,127)",
            "rgb(190,174,212)",
            "rgb(253,192,134)",
            "rgb(255,255,153)"
        ],
        5: [
            "rgb(127,201,127)",
            "rgb(190,174,212)",
            "rgb(253,192,134)",
            "rgb(255,255,153)",
            "rgb(56,108,176)"
        ],
        6: [
            "rgb(127,201,127)",
            "rgb(190,174,212)",
            "rgb(253,192,134)",
            "rgb(255,255,153)",
            "rgb(56,108,176)",
            "rgb(240,2,127)"
        ],
        7: [
            "rgb(127,201,127)",
            "rgb(190,174,212)",
            "rgb(253,192,134)",
            "rgb(255,255,153)",
            "rgb(56,108,176)",
            "rgb(240,2,127)",
            "rgb(191,91,23)"
        ],
        8: [
            "rgb(127,201,127)",
            "rgb(190,174,212)",
            "rgb(253,192,134)",
            "rgb(255,255,153)",
            "rgb(56,108,176)",
            "rgb(240,2,127)",
            "rgb(191,91,23)",
            "rgb(102,102,102)"
        ],
        type: "qual"
    },
    Blues: {
        3: [
            "rgb(222,235,247)",
            "rgb(158,202,225)",
            "rgb(49,130,189)"
        ],
        4: [
            "rgb(239,243,255)",
            "rgb(189,215,231)",
            "rgb(107,174,214)",
            "rgb(33,113,181)"
        ],
        5: [
            "rgb(239,243,255)",
            "rgb(189,215,231)",
            "rgb(107,174,214)",
            "rgb(49,130,189)",
            "rgb(8,81,156)"
        ],
        6: [
            "rgb(239,243,255)",
            "rgb(198,219,239)",
            "rgb(158,202,225)",
            "rgb(107,174,214)",
            "rgb(49,130,189)",
            "rgb(8,81,156)"
        ],
        7: [
            "rgb(239,243,255)",
            "rgb(198,219,239)",
            "rgb(158,202,225)",
            "rgb(107,174,214)",
            "rgb(66,146,198)",
            "rgb(33,113,181)",
            "rgb(8,69,148)"
        ],
        8: [
            "rgb(247,251,255)",
            "rgb(222,235,247)",
            "rgb(198,219,239)",
            "rgb(158,202,225)",
            "rgb(107,174,214)",
            "rgb(66,146,198)",
            "rgb(33,113,181)",
            "rgb(8,69,148)"
        ],
        9: [
            "rgb(247,251,255)",
            "rgb(222,235,247)",
            "rgb(198,219,239)",
            "rgb(158,202,225)",
            "rgb(107,174,214)",
            "rgb(66,146,198)",
            "rgb(33,113,181)",
            "rgb(8,81,156)",
            "rgb(8,48,107)"
        ],
        type: "seq"
    },
    BrBG: {
        10: [
            "rgb(84,48,5)",
            "rgb(140,81,10)",
            "rgb(191,129,45)",
            "rgb(223,194,125)",
            "rgb(246,232,195)",
            "rgb(199,234,229)",
            "rgb(128,205,193)",
            "rgb(53,151,143)",
            "rgb(1,102,94)",
            "rgb(0,60,48)"
        ],
        11: [
            "rgb(84,48,5)",
            "rgb(140,81,10)",
            "rgb(191,129,45)",
            "rgb(223,194,125)",
            "rgb(246,232,195)",
            "rgb(245,245,245)",
            "rgb(199,234,229)",
            "rgb(128,205,193)",
            "rgb(53,151,143)",
            "rgb(1,102,94)",
            "rgb(0,60,48)"
        ],
        3: [
            "rgb(216,179,101)",
            "rgb(245,245,245)",
            "rgb(90,180,172)"
        ],
        4: [
            "rgb(166,97,26)",
            "rgb(223,194,125)",
            "rgb(128,205,193)",
            "rgb(1,133,113)"
        ],
        5: [
            "rgb(166,97,26)",
            "rgb(223,194,125)",
            "rgb(245,245,245)",
            "rgb(128,205,193)",
            "rgb(1,133,113)"
        ],
        6: [
            "rgb(140,81,10)",
            "rgb(216,179,101)",
            "rgb(246,232,195)",
            "rgb(199,234,229)",
            "rgb(90,180,172)",
            "rgb(1,102,94)"
        ],
        7: [
            "rgb(140,81,10)",
            "rgb(216,179,101)",
            "rgb(246,232,195)",
            "rgb(245,245,245)",
            "rgb(199,234,229)",
            "rgb(90,180,172)",
            "rgb(1,102,94)"
        ],
        8: [
            "rgb(140,81,10)",
            "rgb(191,129,45)",
            "rgb(223,194,125)",
            "rgb(246,232,195)",
            "rgb(199,234,229)",
            "rgb(128,205,193)",
            "rgb(53,151,143)",
            "rgb(1,102,94)"
        ],
        9: [
            "rgb(140,81,10)",
            "rgb(191,129,45)",
            "rgb(223,194,125)",
            "rgb(246,232,195)",
            "rgb(245,245,245)",
            "rgb(199,234,229)",
            "rgb(128,205,193)",
            "rgb(53,151,143)",
            "rgb(1,102,94)"
        ],
        type: "div"
    },
    BuGn: {
        3: [
            "rgb(229,245,249)",
            "rgb(153,216,201)",
            "rgb(44,162,95)"
        ],
        4: [
            "rgb(237,248,251)",
            "rgb(178,226,226)",
            "rgb(102,194,164)",
            "rgb(35,139,69)"
        ],
        5: [
            "rgb(237,248,251)",
            "rgb(178,226,226)",
            "rgb(102,194,164)",
            "rgb(44,162,95)",
            "rgb(0,109,44)"
        ],
        6: [
            "rgb(237,248,251)",
            "rgb(204,236,230)",
            "rgb(153,216,201)",
            "rgb(102,194,164)",
            "rgb(44,162,95)",
            "rgb(0,109,44)"
        ],
        7: [
            "rgb(237,248,251)",
            "rgb(204,236,230)",
            "rgb(153,216,201)",
            "rgb(102,194,164)",
            "rgb(65,174,118)",
            "rgb(35,139,69)",
            "rgb(0,88,36)"
        ],
        8: [
            "rgb(247,252,253)",
            "rgb(229,245,249)",
            "rgb(204,236,230)",
            "rgb(153,216,201)",
            "rgb(102,194,164)",
            "rgb(65,174,118)",
            "rgb(35,139,69)",
            "rgb(0,88,36)"
        ],
        9: [
            "rgb(247,252,253)",
            "rgb(229,245,249)",
            "rgb(204,236,230)",
            "rgb(153,216,201)",
            "rgb(102,194,164)",
            "rgb(65,174,118)",
            "rgb(35,139,69)",
            "rgb(0,109,44)",
            "rgb(0,68,27)"
        ],
        type: "seq"
    },
    BuPu: {
        3: [
            "rgb(224,236,244)",
            "rgb(158,188,218)",
            "rgb(136,86,167)"
        ],
        4: [
            "rgb(237,248,251)",
            "rgb(179,205,227)",
            "rgb(140,150,198)",
            "rgb(136,65,157)"
        ],
        5: [
            "rgb(237,248,251)",
            "rgb(179,205,227)",
            "rgb(140,150,198)",
            "rgb(136,86,167)",
            "rgb(129,15,124)"
        ],
        6: [
            "rgb(237,248,251)",
            "rgb(191,211,230)",
            "rgb(158,188,218)",
            "rgb(140,150,198)",
            "rgb(136,86,167)",
            "rgb(129,15,124)"
        ],
        7: [
            "rgb(237,248,251)",
            "rgb(191,211,230)",
            "rgb(158,188,218)",
            "rgb(140,150,198)",
            "rgb(140,107,177)",
            "rgb(136,65,157)",
            "rgb(110,1,107)"
        ],
        8: [
            "rgb(247,252,253)",
            "rgb(224,236,244)",
            "rgb(191,211,230)",
            "rgb(158,188,218)",
            "rgb(140,150,198)",
            "rgb(140,107,177)",
            "rgb(136,65,157)",
            "rgb(110,1,107)"
        ],
        9: [
            "rgb(247,252,253)",
            "rgb(224,236,244)",
            "rgb(191,211,230)",
            "rgb(158,188,218)",
            "rgb(140,150,198)",
            "rgb(140,107,177)",
            "rgb(136,65,157)",
            "rgb(129,15,124)",
            "rgb(77,0,75)"
        ],
        type: "seq"
    },
    Dark2: {
        3: [
            "rgb(27,158,119)",
            "rgb(217,95,2)",
            "rgb(117,112,179)"
        ],
        4: [
            "rgb(27,158,119)",
            "rgb(217,95,2)",
            "rgb(117,112,179)",
            "rgb(231,41,138)"
        ],
        5: [
            "rgb(27,158,119)",
            "rgb(217,95,2)",
            "rgb(117,112,179)",
            "rgb(231,41,138)",
            "rgb(102,166,30)"
        ],
        6: [
            "rgb(27,158,119)",
            "rgb(217,95,2)",
            "rgb(117,112,179)",
            "rgb(231,41,138)",
            "rgb(102,166,30)",
            "rgb(230,171,2)"
        ],
        7: [
            "rgb(27,158,119)",
            "rgb(217,95,2)",
            "rgb(117,112,179)",
            "rgb(231,41,138)",
            "rgb(102,166,30)",
            "rgb(230,171,2)",
            "rgb(166,118,29)"
        ],
        8: [
            "rgb(27,158,119)",
            "rgb(217,95,2)",
            "rgb(117,112,179)",
            "rgb(231,41,138)",
            "rgb(102,166,30)",
            "rgb(230,171,2)",
            "rgb(166,118,29)",
            "rgb(102,102,102)"
        ],
        type: "qual"
    },
    GnBu: {
        3: [
            "rgb(224,243,219)",
            "rgb(168,221,181)",
            "rgb(67,162,202)"
        ],
        4: [
            "rgb(240,249,232)",
            "rgb(186,228,188)",
            "rgb(123,204,196)",
            "rgb(43,140,190)"
        ],
        5: [
            "rgb(240,249,232)",
            "rgb(186,228,188)",
            "rgb(123,204,196)",
            "rgb(67,162,202)",
            "rgb(8,104,172)"
        ],
        6: [
            "rgb(240,249,232)",
            "rgb(204,235,197)",
            "rgb(168,221,181)",
            "rgb(123,204,196)",
            "rgb(67,162,202)",
            "rgb(8,104,172)"
        ],
        7: [
            "rgb(240,249,232)",
            "rgb(204,235,197)",
            "rgb(168,221,181)",
            "rgb(123,204,196)",
            "rgb(78,179,211)",
            "rgb(43,140,190)",
            "rgb(8,88,158)"
        ],
        8: [
            "rgb(247,252,240)",
            "rgb(224,243,219)",
            "rgb(204,235,197)",
            "rgb(168,221,181)",
            "rgb(123,204,196)",
            "rgb(78,179,211)",
            "rgb(43,140,190)",
            "rgb(8,88,158)"
        ],
        9: [
            "rgb(247,252,240)",
            "rgb(224,243,219)",
            "rgb(204,235,197)",
            "rgb(168,221,181)",
            "rgb(123,204,196)",
            "rgb(78,179,211)",
            "rgb(43,140,190)",
            "rgb(8,104,172)",
            "rgb(8,64,129)"
        ],
        type: "seq"
    },
    Greens: {
        3: [
            "rgb(229,245,224)",
            "rgb(161,217,155)",
            "rgb(49,163,84)"
        ],
        4: [
            "rgb(237,248,233)",
            "rgb(186,228,179)",
            "rgb(116,196,118)",
            "rgb(35,139,69)"
        ],
        5: [
            "rgb(237,248,233)",
            "rgb(186,228,179)",
            "rgb(116,196,118)",
            "rgb(49,163,84)",
            "rgb(0,109,44)"
        ],
        6: [
            "rgb(237,248,233)",
            "rgb(199,233,192)",
            "rgb(161,217,155)",
            "rgb(116,196,118)",
            "rgb(49,163,84)",
            "rgb(0,109,44)"
        ],
        7: [
            "rgb(237,248,233)",
            "rgb(199,233,192)",
            "rgb(161,217,155)",
            "rgb(116,196,118)",
            "rgb(65,171,93)",
            "rgb(35,139,69)",
            "rgb(0,90,50)"
        ],
        8: [
            "rgb(247,252,245)",
            "rgb(229,245,224)",
            "rgb(199,233,192)",
            "rgb(161,217,155)",
            "rgb(116,196,118)",
            "rgb(65,171,93)",
            "rgb(35,139,69)",
            "rgb(0,90,50)"
        ],
        9: [
            "rgb(247,252,245)",
            "rgb(229,245,224)",
            "rgb(199,233,192)",
            "rgb(161,217,155)",
            "rgb(116,196,118)",
            "rgb(65,171,93)",
            "rgb(35,139,69)",
            "rgb(0,109,44)",
            "rgb(0,68,27)"
        ],
        type: "seq"
    },
    Greys: {
        3: [
            "rgb(240,240,240)",
            "rgb(189,189,189)",
            "rgb(99,99,99)"
        ],
        4: [
            "rgb(247,247,247)",
            "rgb(204,204,204)",
            "rgb(150,150,150)",
            "rgb(82,82,82)"
        ],
        5: [
            "rgb(247,247,247)",
            "rgb(204,204,204)",
            "rgb(150,150,150)",
            "rgb(99,99,99)",
            "rgb(37,37,37)"
        ],
        6: [
            "rgb(247,247,247)",
            "rgb(217,217,217)",
            "rgb(189,189,189)",
            "rgb(150,150,150)",
            "rgb(99,99,99)",
            "rgb(37,37,37)"
        ],
        7: [
            "rgb(247,247,247)",
            "rgb(217,217,217)",
            "rgb(189,189,189)",
            "rgb(150,150,150)",
            "rgb(115,115,115)",
            "rgb(82,82,82)",
            "rgb(37,37,37)"
        ],
        8: [
            "rgb(255,255,255)",
            "rgb(240,240,240)",
            "rgb(217,217,217)",
            "rgb(189,189,189)",
            "rgb(150,150,150)",
            "rgb(115,115,115)",
            "rgb(82,82,82)",
            "rgb(37,37,37)"
        ],
        9: [
            "rgb(255,255,255)",
            "rgb(240,240,240)",
            "rgb(217,217,217)",
            "rgb(189,189,189)",
            "rgb(150,150,150)",
            "rgb(115,115,115)",
            "rgb(82,82,82)",
            "rgb(37,37,37)",
            "rgb(0,0,0)"
        ],
        type: "seq"
    },
    OrRd: {
        3: [
            "rgb(254,232,200)",
            "rgb(253,187,132)",
            "rgb(227,74,51)"
        ],
        4: [
            "rgb(254,240,217)",
            "rgb(253,204,138)",
            "rgb(252,141,89)",
            "rgb(215,48,31)"
        ],
        5: [
            "rgb(254,240,217)",
            "rgb(253,204,138)",
            "rgb(252,141,89)",
            "rgb(227,74,51)",
            "rgb(179,0,0)"
        ],
        6: [
            "rgb(254,240,217)",
            "rgb(253,212,158)",
            "rgb(253,187,132)",
            "rgb(252,141,89)",
            "rgb(227,74,51)",
            "rgb(179,0,0)"
        ],
        7: [
            "rgb(254,240,217)",
            "rgb(253,212,158)",
            "rgb(253,187,132)",
            "rgb(252,141,89)",
            "rgb(239,101,72)",
            "rgb(215,48,31)",
            "rgb(153,0,0)"
        ],
        8: [
            "rgb(255,247,236)",
            "rgb(254,232,200)",
            "rgb(253,212,158)",
            "rgb(253,187,132)",
            "rgb(252,141,89)",
            "rgb(239,101,72)",
            "rgb(215,48,31)",
            "rgb(153,0,0)"
        ],
        9: [
            "rgb(255,247,236)",
            "rgb(254,232,200)",
            "rgb(253,212,158)",
            "rgb(253,187,132)",
            "rgb(252,141,89)",
            "rgb(239,101,72)",
            "rgb(215,48,31)",
            "rgb(179,0,0)",
            "rgb(127,0,0)"
        ],
        type: "seq"
    },
    Oranges: {
        3: [
            "rgb(254,230,206)",
            "rgb(253,174,107)",
            "rgb(230,85,13)"
        ],
        4: [
            "rgb(254,237,222)",
            "rgb(253,190,133)",
            "rgb(253,141,60)",
            "rgb(217,71,1)"
        ],
        5: [
            "rgb(254,237,222)",
            "rgb(253,190,133)",
            "rgb(253,141,60)",
            "rgb(230,85,13)",
            "rgb(166,54,3)"
        ],
        6: [
            "rgb(254,237,222)",
            "rgb(253,208,162)",
            "rgb(253,174,107)",
            "rgb(253,141,60)",
            "rgb(230,85,13)",
            "rgb(166,54,3)"
        ],
        7: [
            "rgb(254,237,222)",
            "rgb(253,208,162)",
            "rgb(253,174,107)",
            "rgb(253,141,60)",
            "rgb(241,105,19)",
            "rgb(217,72,1)",
            "rgb(140,45,4)"
        ],
        8: [
            "rgb(255,245,235)",
            "rgb(254,230,206)",
            "rgb(253,208,162)",
            "rgb(253,174,107)",
            "rgb(253,141,60)",
            "rgb(241,105,19)",
            "rgb(217,72,1)",
            "rgb(140,45,4)"
        ],
        9: [
            "rgb(255,245,235)",
            "rgb(254,230,206)",
            "rgb(253,208,162)",
            "rgb(253,174,107)",
            "rgb(253,141,60)",
            "rgb(241,105,19)",
            "rgb(217,72,1)",
            "rgb(166,54,3)",
            "rgb(127,39,4)"
        ],
        type: "seq"
    },
    PRGn: {
        10: [
            "rgb(64,0,75)",
            "rgb(118,42,131)",
            "rgb(153,112,171)",
            "rgb(194,165,207)",
            "rgb(231,212,232)",
            "rgb(217,240,211)",
            "rgb(166,219,160)",
            "rgb(90,174,97)",
            "rgb(27,120,55)",
            "rgb(0,68,27)"
        ],
        11: [
            "rgb(64,0,75)",
            "rgb(118,42,131)",
            "rgb(153,112,171)",
            "rgb(194,165,207)",
            "rgb(231,212,232)",
            "rgb(247,247,247)",
            "rgb(217,240,211)",
            "rgb(166,219,160)",
            "rgb(90,174,97)",
            "rgb(27,120,55)",
            "rgb(0,68,27)"
        ],
        3: [
            "rgb(175,141,195)",
            "rgb(247,247,247)",
            "rgb(127,191,123)"
        ],
        4: [
            "rgb(123,50,148)",
            "rgb(194,165,207)",
            "rgb(166,219,160)",
            "rgb(0,136,55)"
        ],
        5: [
            "rgb(123,50,148)",
            "rgb(194,165,207)",
            "rgb(247,247,247)",
            "rgb(166,219,160)",
            "rgb(0,136,55)"
        ],
        6: [
            "rgb(118,42,131)",
            "rgb(175,141,195)",
            "rgb(231,212,232)",
            "rgb(217,240,211)",
            "rgb(127,191,123)",
            "rgb(27,120,55)"
        ],
        7: [
            "rgb(118,42,131)",
            "rgb(175,141,195)",
            "rgb(231,212,232)",
            "rgb(247,247,247)",
            "rgb(217,240,211)",
            "rgb(127,191,123)",
            "rgb(27,120,55)"
        ],
        8: [
            "rgb(118,42,131)",
            "rgb(153,112,171)",
            "rgb(194,165,207)",
            "rgb(231,212,232)",
            "rgb(217,240,211)",
            "rgb(166,219,160)",
            "rgb(90,174,97)",
            "rgb(27,120,55)"
        ],
        9: [
            "rgb(118,42,131)",
            "rgb(153,112,171)",
            "rgb(194,165,207)",
            "rgb(231,212,232)",
            "rgb(247,247,247)",
            "rgb(217,240,211)",
            "rgb(166,219,160)",
            "rgb(90,174,97)",
            "rgb(27,120,55)"
        ],
        type: "div"
    },
    Paired: {
        10: [
            "rgb(166,206,227)",
            "rgb(31,120,180)",
            "rgb(178,223,138)",
            "rgb(51,160,44)",
            "rgb(251,154,153)",
            "rgb(227,26,28)",
            "rgb(253,191,111)",
            "rgb(255,127,0)",
            "rgb(202,178,214)",
            "rgb(106,61,154)"
        ],
        11: [
            "rgb(166,206,227)",
            "rgb(31,120,180)",
            "rgb(178,223,138)",
            "rgb(51,160,44)",
            "rgb(251,154,153)",
            "rgb(227,26,28)",
            "rgb(253,191,111)",
            "rgb(255,127,0)",
            "rgb(202,178,214)",
            "rgb(106,61,154)",
            "rgb(255,255,153)"
        ],
        12: [
            "rgb(166,206,227)",
            "rgb(31,120,180)",
            "rgb(178,223,138)",
            "rgb(51,160,44)",
            "rgb(251,154,153)",
            "rgb(227,26,28)",
            "rgb(253,191,111)",
            "rgb(255,127,0)",
            "rgb(202,178,214)",
            "rgb(106,61,154)",
            "rgb(255,255,153)",
            "rgb(177,89,40)"
        ],
        3: [
            "rgb(166,206,227)",
            "rgb(31,120,180)",
            "rgb(178,223,138)"
        ],
        4: [
            "rgb(166,206,227)",
            "rgb(31,120,180)",
            "rgb(178,223,138)",
            "rgb(51,160,44)"
        ],
        5: [
            "rgb(166,206,227)",
            "rgb(31,120,180)",
            "rgb(178,223,138)",
            "rgb(51,160,44)",
            "rgb(251,154,153)"
        ],
        6: [
            "rgb(166,206,227)",
            "rgb(31,120,180)",
            "rgb(178,223,138)",
            "rgb(51,160,44)",
            "rgb(251,154,153)",
            "rgb(227,26,28)"
        ],
        7: [
            "rgb(166,206,227)",
            "rgb(31,120,180)",
            "rgb(178,223,138)",
            "rgb(51,160,44)",
            "rgb(251,154,153)",
            "rgb(227,26,28)",
            "rgb(253,191,111)"
        ],
        8: [
            "rgb(166,206,227)",
            "rgb(31,120,180)",
            "rgb(178,223,138)",
            "rgb(51,160,44)",
            "rgb(251,154,153)",
            "rgb(227,26,28)",
            "rgb(253,191,111)",
            "rgb(255,127,0)"
        ],
        9: [
            "rgb(166,206,227)",
            "rgb(31,120,180)",
            "rgb(178,223,138)",
            "rgb(51,160,44)",
            "rgb(251,154,153)",
            "rgb(227,26,28)",
            "rgb(253,191,111)",
            "rgb(255,127,0)",
            "rgb(202,178,214)"
        ],
        type: "qual"
    },
    Pastel1: {
        3: [
            "rgb(251,180,174)",
            "rgb(179,205,227)",
            "rgb(204,235,197)"
        ],
        4: [
            "rgb(251,180,174)",
            "rgb(179,205,227)",
            "rgb(204,235,197)",
            "rgb(222,203,228)"
        ],
        5: [
            "rgb(251,180,174)",
            "rgb(179,205,227)",
            "rgb(204,235,197)",
            "rgb(222,203,228)",
            "rgb(254,217,166)"
        ],
        6: [
            "rgb(251,180,174)",
            "rgb(179,205,227)",
            "rgb(204,235,197)",
            "rgb(222,203,228)",
            "rgb(254,217,166)",
            "rgb(255,255,204)"
        ],
        7: [
            "rgb(251,180,174)",
            "rgb(179,205,227)",
            "rgb(204,235,197)",
            "rgb(222,203,228)",
            "rgb(254,217,166)",
            "rgb(255,255,204)",
            "rgb(229,216,189)"
        ],
        8: [
            "rgb(251,180,174)",
            "rgb(179,205,227)",
            "rgb(204,235,197)",
            "rgb(222,203,228)",
            "rgb(254,217,166)",
            "rgb(255,255,204)",
            "rgb(229,216,189)",
            "rgb(253,218,236)"
        ],
        9: [
            "rgb(251,180,174)",
            "rgb(179,205,227)",
            "rgb(204,235,197)",
            "rgb(222,203,228)",
            "rgb(254,217,166)",
            "rgb(255,255,204)",
            "rgb(229,216,189)",
            "rgb(253,218,236)",
            "rgb(242,242,242)"
        ],
        type: "qual"
    },
    Pastel2: {
        3: [
            "rgb(179,226,205)",
            "rgb(253,205,172)",
            "rgb(203,213,232)"
        ],
        4: [
            "rgb(179,226,205)",
            "rgb(253,205,172)",
            "rgb(203,213,232)",
            "rgb(244,202,228)"
        ],
        5: [
            "rgb(179,226,205)",
            "rgb(253,205,172)",
            "rgb(203,213,232)",
            "rgb(244,202,228)",
            "rgb(230,245,201)"
        ],
        6: [
            "rgb(179,226,205)",
            "rgb(253,205,172)",
            "rgb(203,213,232)",
            "rgb(244,202,228)",
            "rgb(230,245,201)",
            "rgb(255,242,174)"
        ],
        7: [
            "rgb(179,226,205)",
            "rgb(253,205,172)",
            "rgb(203,213,232)",
            "rgb(244,202,228)",
            "rgb(230,245,201)",
            "rgb(255,242,174)",
            "rgb(241,226,204)"
        ],
        8: [
            "rgb(179,226,205)",
            "rgb(253,205,172)",
            "rgb(203,213,232)",
            "rgb(244,202,228)",
            "rgb(230,245,201)",
            "rgb(255,242,174)",
            "rgb(241,226,204)",
            "rgb(204,204,204)"
        ],
        type: "qual"
    },
    PiYG: {
        10: [
            "rgb(142,1,82)",
            "rgb(197,27,125)",
            "rgb(222,119,174)",
            "rgb(241,182,218)",
            "rgb(253,224,239)",
            "rgb(230,245,208)",
            "rgb(184,225,134)",
            "rgb(127,188,65)",
            "rgb(77,146,33)",
            "rgb(39,100,25)"
        ],
        11: [
            "rgb(142,1,82)",
            "rgb(197,27,125)",
            "rgb(222,119,174)",
            "rgb(241,182,218)",
            "rgb(253,224,239)",
            "rgb(247,247,247)",
            "rgb(230,245,208)",
            "rgb(184,225,134)",
            "rgb(127,188,65)",
            "rgb(77,146,33)",
            "rgb(39,100,25)"
        ],
        3: [
            "rgb(233,163,201)",
            "rgb(247,247,247)",
            "rgb(161,215,106)"
        ],
        4: [
            "rgb(208,28,139)",
            "rgb(241,182,218)",
            "rgb(184,225,134)",
            "rgb(77,172,38)"
        ],
        5: [
            "rgb(208,28,139)",
            "rgb(241,182,218)",
            "rgb(247,247,247)",
            "rgb(184,225,134)",
            "rgb(77,172,38)"
        ],
        6: [
            "rgb(197,27,125)",
            "rgb(233,163,201)",
            "rgb(253,224,239)",
            "rgb(230,245,208)",
            "rgb(161,215,106)",
            "rgb(77,146,33)"
        ],
        7: [
            "rgb(197,27,125)",
            "rgb(233,163,201)",
            "rgb(253,224,239)",
            "rgb(247,247,247)",
            "rgb(230,245,208)",
            "rgb(161,215,106)",
            "rgb(77,146,33)"
        ],
        8: [
            "rgb(197,27,125)",
            "rgb(222,119,174)",
            "rgb(241,182,218)",
            "rgb(253,224,239)",
            "rgb(230,245,208)",
            "rgb(184,225,134)",
            "rgb(127,188,65)",
            "rgb(77,146,33)"
        ],
        9: [
            "rgb(197,27,125)",
            "rgb(222,119,174)",
            "rgb(241,182,218)",
            "rgb(253,224,239)",
            "rgb(247,247,247)",
            "rgb(230,245,208)",
            "rgb(184,225,134)",
            "rgb(127,188,65)",
            "rgb(77,146,33)"
        ],
        type: "div"
    },
    PuBu: {
        3: [
            "rgb(236,231,242)",
            "rgb(166,189,219)",
            "rgb(43,140,190)"
        ],
        4: [
            "rgb(241,238,246)",
            "rgb(189,201,225)",
            "rgb(116,169,207)",
            "rgb(5,112,176)"
        ],
        5: [
            "rgb(241,238,246)",
            "rgb(189,201,225)",
            "rgb(116,169,207)",
            "rgb(43,140,190)",
            "rgb(4,90,141)"
        ],
        6: [
            "rgb(241,238,246)",
            "rgb(208,209,230)",
            "rgb(166,189,219)",
            "rgb(116,169,207)",
            "rgb(43,140,190)",
            "rgb(4,90,141)"
        ],
        7: [
            "rgb(241,238,246)",
            "rgb(208,209,230)",
            "rgb(166,189,219)",
            "rgb(116,169,207)",
            "rgb(54,144,192)",
            "rgb(5,112,176)",
            "rgb(3,78,123)"
        ],
        8: [
            "rgb(255,247,251)",
            "rgb(236,231,242)",
            "rgb(208,209,230)",
            "rgb(166,189,219)",
            "rgb(116,169,207)",
            "rgb(54,144,192)",
            "rgb(5,112,176)",
            "rgb(3,78,123)"
        ],
        9: [
            "rgb(255,247,251)",
            "rgb(236,231,242)",
            "rgb(208,209,230)",
            "rgb(166,189,219)",
            "rgb(116,169,207)",
            "rgb(54,144,192)",
            "rgb(5,112,176)",
            "rgb(4,90,141)",
            "rgb(2,56,88)"
        ],
        type: "seq"
    },
    PuBuGn: {
        3: [
            "rgb(236,226,240)",
            "rgb(166,189,219)",
            "rgb(28,144,153)"
        ],
        4: [
            "rgb(246,239,247)",
            "rgb(189,201,225)",
            "rgb(103,169,207)",
            "rgb(2,129,138)"
        ],
        5: [
            "rgb(246,239,247)",
            "rgb(189,201,225)",
            "rgb(103,169,207)",
            "rgb(28,144,153)",
            "rgb(1,108,89)"
        ],
        6: [
            "rgb(246,239,247)",
            "rgb(208,209,230)",
            "rgb(166,189,219)",
            "rgb(103,169,207)",
            "rgb(28,144,153)",
            "rgb(1,108,89)"
        ],
        7: [
            "rgb(246,239,247)",
            "rgb(208,209,230)",
            "rgb(166,189,219)",
            "rgb(103,169,207)",
            "rgb(54,144,192)",
            "rgb(2,129,138)",
            "rgb(1,100,80)"
        ],
        8: [
            "rgb(255,247,251)",
            "rgb(236,226,240)",
            "rgb(208,209,230)",
            "rgb(166,189,219)",
            "rgb(103,169,207)",
            "rgb(54,144,192)",
            "rgb(2,129,138)",
            "rgb(1,100,80)"
        ],
        9: [
            "rgb(255,247,251)",
            "rgb(236,226,240)",
            "rgb(208,209,230)",
            "rgb(166,189,219)",
            "rgb(103,169,207)",
            "rgb(54,144,192)",
            "rgb(2,129,138)",
            "rgb(1,108,89)",
            "rgb(1,70,54)"
        ],
        type: "seq"
    },
    PuOr: {
        10: [
            "rgb(127,59,8)",
            "rgb(179,88,6)",
            "rgb(224,130,20)",
            "rgb(253,184,99)",
            "rgb(254,224,182)",
            "rgb(216,218,235)",
            "rgb(178,171,210)",
            "rgb(128,115,172)",
            "rgb(84,39,136)",
            "rgb(45,0,75)"
        ],
        11: [
            "rgb(127,59,8)",
            "rgb(179,88,6)",
            "rgb(224,130,20)",
            "rgb(253,184,99)",
            "rgb(254,224,182)",
            "rgb(247,247,247)",
            "rgb(216,218,235)",
            "rgb(178,171,210)",
            "rgb(128,115,172)",
            "rgb(84,39,136)",
            "rgb(45,0,75)"
        ],
        3: [
            "rgb(241,163,64)",
            "rgb(247,247,247)",
            "rgb(153,142,195)"
        ],
        4: [
            "rgb(230,97,1)",
            "rgb(253,184,99)",
            "rgb(178,171,210)",
            "rgb(94,60,153)"
        ],
        5: [
            "rgb(230,97,1)",
            "rgb(253,184,99)",
            "rgb(247,247,247)",
            "rgb(178,171,210)",
            "rgb(94,60,153)"
        ],
        6: [
            "rgb(179,88,6)",
            "rgb(241,163,64)",
            "rgb(254,224,182)",
            "rgb(216,218,235)",
            "rgb(153,142,195)",
            "rgb(84,39,136)"
        ],
        7: [
            "rgb(179,88,6)",
            "rgb(241,163,64)",
            "rgb(254,224,182)",
            "rgb(247,247,247)",
            "rgb(216,218,235)",
            "rgb(153,142,195)",
            "rgb(84,39,136)"
        ],
        8: [
            "rgb(179,88,6)",
            "rgb(224,130,20)",
            "rgb(253,184,99)",
            "rgb(254,224,182)",
            "rgb(216,218,235)",
            "rgb(178,171,210)",
            "rgb(128,115,172)",
            "rgb(84,39,136)"
        ],
        9: [
            "rgb(179,88,6)",
            "rgb(224,130,20)",
            "rgb(253,184,99)",
            "rgb(254,224,182)",
            "rgb(247,247,247)",
            "rgb(216,218,235)",
            "rgb(178,171,210)",
            "rgb(128,115,172)",
            "rgb(84,39,136)"
        ],
        type: "div"
    },
    PuRd: {
        3: [
            "rgb(231,225,239)",
            "rgb(201,148,199)",
            "rgb(221,28,119)"
        ],
        4: [
            "rgb(241,238,246)",
            "rgb(215,181,216)",
            "rgb(223,101,176)",
            "rgb(206,18,86)"
        ],
        5: [
            "rgb(241,238,246)",
            "rgb(215,181,216)",
            "rgb(223,101,176)",
            "rgb(221,28,119)",
            "rgb(152,0,67)"
        ],
        6: [
            "rgb(241,238,246)",
            "rgb(212,185,218)",
            "rgb(201,148,199)",
            "rgb(223,101,176)",
            "rgb(221,28,119)",
            "rgb(152,0,67)"
        ],
        7: [
            "rgb(241,238,246)",
            "rgb(212,185,218)",
            "rgb(201,148,199)",
            "rgb(223,101,176)",
            "rgb(231,41,138)",
            "rgb(206,18,86)",
            "rgb(145,0,63)"
        ],
        8: [
            "rgb(247,244,249)",
            "rgb(231,225,239)",
            "rgb(212,185,218)",
            "rgb(201,148,199)",
            "rgb(223,101,176)",
            "rgb(231,41,138)",
            "rgb(206,18,86)",
            "rgb(145,0,63)"
        ],
        9: [
            "rgb(247,244,249)",
            "rgb(231,225,239)",
            "rgb(212,185,218)",
            "rgb(201,148,199)",
            "rgb(223,101,176)",
            "rgb(231,41,138)",
            "rgb(206,18,86)",
            "rgb(152,0,67)",
            "rgb(103,0,31)"
        ],
        type: "seq"
    },
    Purples: {
        3: [
            "rgb(239,237,245)",
            "rgb(188,189,220)",
            "rgb(117,107,177)"
        ],
        4: [
            "rgb(242,240,247)",
            "rgb(203,201,226)",
            "rgb(158,154,200)",
            "rgb(106,81,163)"
        ],
        5: [
            "rgb(242,240,247)",
            "rgb(203,201,226)",
            "rgb(158,154,200)",
            "rgb(117,107,177)",
            "rgb(84,39,143)"
        ],
        6: [
            "rgb(242,240,247)",
            "rgb(218,218,235)",
            "rgb(188,189,220)",
            "rgb(158,154,200)",
            "rgb(117,107,177)",
            "rgb(84,39,143)"
        ],
        7: [
            "rgb(242,240,247)",
            "rgb(218,218,235)",
            "rgb(188,189,220)",
            "rgb(158,154,200)",
            "rgb(128,125,186)",
            "rgb(106,81,163)",
            "rgb(74,20,134)"
        ],
        8: [
            "rgb(252,251,253)",
            "rgb(239,237,245)",
            "rgb(218,218,235)",
            "rgb(188,189,220)",
            "rgb(158,154,200)",
            "rgb(128,125,186)",
            "rgb(106,81,163)",
            "rgb(74,20,134)"
        ],
        9: [
            "rgb(252,251,253)",
            "rgb(239,237,245)",
            "rgb(218,218,235)",
            "rgb(188,189,220)",
            "rgb(158,154,200)",
            "rgb(128,125,186)",
            "rgb(106,81,163)",
            "rgb(84,39,143)",
            "rgb(63,0,125)"
        ],
        type: "seq"
    },
    RdBu: {
        10: [
            "rgb(103,0,31)",
            "rgb(178,24,43)",
            "rgb(214,96,77)",
            "rgb(244,165,130)",
            "rgb(253,219,199)",
            "rgb(209,229,240)",
            "rgb(146,197,222)",
            "rgb(67,147,195)",
            "rgb(33,102,172)",
            "rgb(5,48,97)"
        ],
        11: [
            "rgb(103,0,31)",
            "rgb(178,24,43)",
            "rgb(214,96,77)",
            "rgb(244,165,130)",
            "rgb(253,219,199)",
            "rgb(247,247,247)",
            "rgb(209,229,240)",
            "rgb(146,197,222)",
            "rgb(67,147,195)",
            "rgb(33,102,172)",
            "rgb(5,48,97)"
        ],
        3: [
            "rgb(239,138,98)",
            "rgb(247,247,247)",
            "rgb(103,169,207)"
        ],
        4: [
            "rgb(202,0,32)",
            "rgb(244,165,130)",
            "rgb(146,197,222)",
            "rgb(5,113,176)"
        ],
        5: [
            "rgb(202,0,32)",
            "rgb(244,165,130)",
            "rgb(247,247,247)",
            "rgb(146,197,222)",
            "rgb(5,113,176)"
        ],
        6: [
            "rgb(178,24,43)",
            "rgb(239,138,98)",
            "rgb(253,219,199)",
            "rgb(209,229,240)",
            "rgb(103,169,207)",
            "rgb(33,102,172)"
        ],
        7: [
            "rgb(178,24,43)",
            "rgb(239,138,98)",
            "rgb(253,219,199)",
            "rgb(247,247,247)",
            "rgb(209,229,240)",
            "rgb(103,169,207)",
            "rgb(33,102,172)"
        ],
        8: [
            "rgb(178,24,43)",
            "rgb(214,96,77)",
            "rgb(244,165,130)",
            "rgb(253,219,199)",
            "rgb(209,229,240)",
            "rgb(146,197,222)",
            "rgb(67,147,195)",
            "rgb(33,102,172)"
        ],
        9: [
            "rgb(178,24,43)",
            "rgb(214,96,77)",
            "rgb(244,165,130)",
            "rgb(253,219,199)",
            "rgb(247,247,247)",
            "rgb(209,229,240)",
            "rgb(146,197,222)",
            "rgb(67,147,195)",
            "rgb(33,102,172)"
        ],
        type: "div"
    },
    RdGy: {
        10: [
            "rgb(103,0,31)",
            "rgb(178,24,43)",
            "rgb(214,96,77)",
            "rgb(244,165,130)",
            "rgb(253,219,199)",
            "rgb(224,224,224)",
            "rgb(186,186,186)",
            "rgb(135,135,135)",
            "rgb(77,77,77)",
            "rgb(26,26,26)"
        ],
        11: [
            "rgb(103,0,31)",
            "rgb(178,24,43)",
            "rgb(214,96,77)",
            "rgb(244,165,130)",
            "rgb(253,219,199)",
            "rgb(255,255,255)",
            "rgb(224,224,224)",
            "rgb(186,186,186)",
            "rgb(135,135,135)",
            "rgb(77,77,77)",
            "rgb(26,26,26)"
        ],
        3: [
            "rgb(239,138,98)",
            "rgb(255,255,255)",
            "rgb(153,153,153)"
        ],
        4: [
            "rgb(202,0,32)",
            "rgb(244,165,130)",
            "rgb(186,186,186)",
            "rgb(64,64,64)"
        ],
        5: [
            "rgb(202,0,32)",
            "rgb(244,165,130)",
            "rgb(255,255,255)",
            "rgb(186,186,186)",
            "rgb(64,64,64)"
        ],
        6: [
            "rgb(178,24,43)",
            "rgb(239,138,98)",
            "rgb(253,219,199)",
            "rgb(224,224,224)",
            "rgb(153,153,153)",
            "rgb(77,77,77)"
        ],
        7: [
            "rgb(178,24,43)",
            "rgb(239,138,98)",
            "rgb(253,219,199)",
            "rgb(255,255,255)",
            "rgb(224,224,224)",
            "rgb(153,153,153)",
            "rgb(77,77,77)"
        ],
        8: [
            "rgb(178,24,43)",
            "rgb(214,96,77)",
            "rgb(244,165,130)",
            "rgb(253,219,199)",
            "rgb(224,224,224)",
            "rgb(186,186,186)",
            "rgb(135,135,135)",
            "rgb(77,77,77)"
        ],
        9: [
            "rgb(178,24,43)",
            "rgb(214,96,77)",
            "rgb(244,165,130)",
            "rgb(253,219,199)",
            "rgb(255,255,255)",
            "rgb(224,224,224)",
            "rgb(186,186,186)",
            "rgb(135,135,135)",
            "rgb(77,77,77)"
        ],
        type: "div"
    },
    RdPu: {
        3: [
            "rgb(253,224,221)",
            "rgb(250,159,181)",
            "rgb(197,27,138)"
        ],
        4: [
            "rgb(254,235,226)",
            "rgb(251,180,185)",
            "rgb(247,104,161)",
            "rgb(174,1,126)"
        ],
        5: [
            "rgb(254,235,226)",
            "rgb(251,180,185)",
            "rgb(247,104,161)",
            "rgb(197,27,138)",
            "rgb(122,1,119)"
        ],
        6: [
            "rgb(254,235,226)",
            "rgb(252,197,192)",
            "rgb(250,159,181)",
            "rgb(247,104,161)",
            "rgb(197,27,138)",
            "rgb(122,1,119)"
        ],
        7: [
            "rgb(254,235,226)",
            "rgb(252,197,192)",
            "rgb(250,159,181)",
            "rgb(247,104,161)",
            "rgb(221,52,151)",
            "rgb(174,1,126)",
            "rgb(122,1,119)"
        ],
        8: [
            "rgb(255,247,243)",
            "rgb(253,224,221)",
            "rgb(252,197,192)",
            "rgb(250,159,181)",
            "rgb(247,104,161)",
            "rgb(221,52,151)",
            "rgb(174,1,126)",
            "rgb(122,1,119)"
        ],
        9: [
            "rgb(255,247,243)",
            "rgb(253,224,221)",
            "rgb(252,197,192)",
            "rgb(250,159,181)",
            "rgb(247,104,161)",
            "rgb(221,52,151)",
            "rgb(174,1,126)",
            "rgb(122,1,119)",
            "rgb(73,0,106)"
        ],
        type: "seq"
    },
    RdYlBu: {
        10: [
            "rgb(165,0,38)",
            "rgb(215,48,39)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,144)",
            "rgb(224,243,248)",
            "rgb(171,217,233)",
            "rgb(116,173,209)",
            "rgb(69,117,180)",
            "rgb(49,54,149)"
        ],
        11: [
            "rgb(165,0,38)",
            "rgb(215,48,39)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,144)",
            "rgb(255,255,191)",
            "rgb(224,243,248)",
            "rgb(171,217,233)",
            "rgb(116,173,209)",
            "rgb(69,117,180)",
            "rgb(49,54,149)"
        ],
        3: [
            "rgb(252,141,89)",
            "rgb(255,255,191)",
            "rgb(145,191,219)"
        ],
        4: [
            "rgb(215,25,28)",
            "rgb(253,174,97)",
            "rgb(171,217,233)",
            "rgb(44,123,182)"
        ],
        5: [
            "rgb(215,25,28)",
            "rgb(253,174,97)",
            "rgb(255,255,191)",
            "rgb(171,217,233)",
            "rgb(44,123,182)"
        ],
        6: [
            "rgb(215,48,39)",
            "rgb(252,141,89)",
            "rgb(254,224,144)",
            "rgb(224,243,248)",
            "rgb(145,191,219)",
            "rgb(69,117,180)"
        ],
        7: [
            "rgb(215,48,39)",
            "rgb(252,141,89)",
            "rgb(254,224,144)",
            "rgb(255,255,191)",
            "rgb(224,243,248)",
            "rgb(145,191,219)",
            "rgb(69,117,180)"
        ],
        8: [
            "rgb(215,48,39)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,144)",
            "rgb(224,243,248)",
            "rgb(171,217,233)",
            "rgb(116,173,209)",
            "rgb(69,117,180)"
        ],
        9: [
            "rgb(215,48,39)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,144)",
            "rgb(255,255,191)",
            "rgb(224,243,248)",
            "rgb(171,217,233)",
            "rgb(116,173,209)",
            "rgb(69,117,180)"
        ],
        type: "div"
    },
    RdYlGn: {
        10: [
            "rgb(165,0,38)",
            "rgb(215,48,39)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,139)",
            "rgb(217,239,139)",
            "rgb(166,217,106)",
            "rgb(102,189,99)",
            "rgb(26,152,80)",
            "rgb(0,104,55)"
        ],
        11: [
            "rgb(165,0,38)",
            "rgb(215,48,39)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,139)",
            "rgb(255,255,191)",
            "rgb(217,239,139)",
            "rgb(166,217,106)",
            "rgb(102,189,99)",
            "rgb(26,152,80)",
            "rgb(0,104,55)"
        ],
        3: [
            "rgb(252,141,89)",
            "rgb(255,255,191)",
            "rgb(145,207,96)"
        ],
        4: [
            "rgb(215,25,28)",
            "rgb(253,174,97)",
            "rgb(166,217,106)",
            "rgb(26,150,65)"
        ],
        5: [
            "rgb(215,25,28)",
            "rgb(253,174,97)",
            "rgb(255,255,191)",
            "rgb(166,217,106)",
            "rgb(26,150,65)"
        ],
        6: [
            "rgb(215,48,39)",
            "rgb(252,141,89)",
            "rgb(254,224,139)",
            "rgb(217,239,139)",
            "rgb(145,207,96)",
            "rgb(26,152,80)"
        ],
        7: [
            "rgb(215,48,39)",
            "rgb(252,141,89)",
            "rgb(254,224,139)",
            "rgb(255,255,191)",
            "rgb(217,239,139)",
            "rgb(145,207,96)",
            "rgb(26,152,80)"
        ],
        8: [
            "rgb(215,48,39)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,139)",
            "rgb(217,239,139)",
            "rgb(166,217,106)",
            "rgb(102,189,99)",
            "rgb(26,152,80)"
        ],
        9: [
            "rgb(215,48,39)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,139)",
            "rgb(255,255,191)",
            "rgb(217,239,139)",
            "rgb(166,217,106)",
            "rgb(102,189,99)",
            "rgb(26,152,80)"
        ],
        type: "div"
    },
    Reds: {
        3: [
            "rgb(254,224,210)",
            "rgb(252,146,114)",
            "rgb(222,45,38)"
        ],
        4: [
            "rgb(254,229,217)",
            "rgb(252,174,145)",
            "rgb(251,106,74)",
            "rgb(203,24,29)"
        ],
        5: [
            "rgb(254,229,217)",
            "rgb(252,174,145)",
            "rgb(251,106,74)",
            "rgb(222,45,38)",
            "rgb(165,15,21)"
        ],
        6: [
            "rgb(254,229,217)",
            "rgb(252,187,161)",
            "rgb(252,146,114)",
            "rgb(251,106,74)",
            "rgb(222,45,38)",
            "rgb(165,15,21)"
        ],
        7: [
            "rgb(254,229,217)",
            "rgb(252,187,161)",
            "rgb(252,146,114)",
            "rgb(251,106,74)",
            "rgb(239,59,44)",
            "rgb(203,24,29)",
            "rgb(153,0,13)"
        ],
        8: [
            "rgb(255,245,240)",
            "rgb(254,224,210)",
            "rgb(252,187,161)",
            "rgb(252,146,114)",
            "rgb(251,106,74)",
            "rgb(239,59,44)",
            "rgb(203,24,29)",
            "rgb(153,0,13)"
        ],
        9: [
            "rgb(255,245,240)",
            "rgb(254,224,210)",
            "rgb(252,187,161)",
            "rgb(252,146,114)",
            "rgb(251,106,74)",
            "rgb(239,59,44)",
            "rgb(203,24,29)",
            "rgb(165,15,21)",
            "rgb(103,0,13)"
        ],
        type: "seq"
    },
    Set1: {
        3: [
            "rgb(228,26,28)",
            "rgb(55,126,184)",
            "rgb(77,175,74)"
        ],
        4: [
            "rgb(228,26,28)",
            "rgb(55,126,184)",
            "rgb(77,175,74)",
            "rgb(152,78,163)"
        ],
        5: [
            "rgb(228,26,28)",
            "rgb(55,126,184)",
            "rgb(77,175,74)",
            "rgb(152,78,163)",
            "rgb(255,127,0)"
        ],
        6: [
            "rgb(228,26,28)",
            "rgb(55,126,184)",
            "rgb(77,175,74)",
            "rgb(152,78,163)",
            "rgb(255,127,0)",
            "rgb(255,255,51)"
        ],
        7: [
            "rgb(228,26,28)",
            "rgb(55,126,184)",
            "rgb(77,175,74)",
            "rgb(152,78,163)",
            "rgb(255,127,0)",
            "rgb(255,255,51)",
            "rgb(166,86,40)"
        ],
        8: [
            "rgb(228,26,28)",
            "rgb(55,126,184)",
            "rgb(77,175,74)",
            "rgb(152,78,163)",
            "rgb(255,127,0)",
            "rgb(255,255,51)",
            "rgb(166,86,40)",
            "rgb(247,129,191)"
        ],
        9: [
            "rgb(228,26,28)",
            "rgb(55,126,184)",
            "rgb(77,175,74)",
            "rgb(152,78,163)",
            "rgb(255,127,0)",
            "rgb(255,255,51)",
            "rgb(166,86,40)",
            "rgb(247,129,191)",
            "rgb(153,153,153)"
        ],
        type: "qual"
    },
    Set2: {
        3: [
            "rgb(102,194,165)",
            "rgb(252,141,98)",
            "rgb(141,160,203)"
        ],
        4: [
            "rgb(102,194,165)",
            "rgb(252,141,98)",
            "rgb(141,160,203)",
            "rgb(231,138,195)"
        ],
        5: [
            "rgb(102,194,165)",
            "rgb(252,141,98)",
            "rgb(141,160,203)",
            "rgb(231,138,195)",
            "rgb(166,216,84)"
        ],
        6: [
            "rgb(102,194,165)",
            "rgb(252,141,98)",
            "rgb(141,160,203)",
            "rgb(231,138,195)",
            "rgb(166,216,84)",
            "rgb(255,217,47)"
        ],
        7: [
            "rgb(102,194,165)",
            "rgb(252,141,98)",
            "rgb(141,160,203)",
            "rgb(231,138,195)",
            "rgb(166,216,84)",
            "rgb(255,217,47)",
            "rgb(229,196,148)"
        ],
        8: [
            "rgb(102,194,165)",
            "rgb(252,141,98)",
            "rgb(141,160,203)",
            "rgb(231,138,195)",
            "rgb(166,216,84)",
            "rgb(255,217,47)",
            "rgb(229,196,148)",
            "rgb(179,179,179)"
        ],
        type: "qual"
    },
    Set3: {
        10: [
            "rgb(141,211,199)",
            "rgb(255,255,179)",
            "rgb(190,186,218)",
            "rgb(251,128,114)",
            "rgb(128,177,211)",
            "rgb(253,180,98)",
            "rgb(179,222,105)",
            "rgb(252,205,229)",
            "rgb(217,217,217)",
            "rgb(188,128,189)"
        ],
        11: [
            "rgb(141,211,199)",
            "rgb(255,255,179)",
            "rgb(190,186,218)",
            "rgb(251,128,114)",
            "rgb(128,177,211)",
            "rgb(253,180,98)",
            "rgb(179,222,105)",
            "rgb(252,205,229)",
            "rgb(217,217,217)",
            "rgb(188,128,189)",
            "rgb(204,235,197)"
        ],
        12: [
            "rgb(141,211,199)",
            "rgb(255,255,179)",
            "rgb(190,186,218)",
            "rgb(251,128,114)",
            "rgb(128,177,211)",
            "rgb(253,180,98)",
            "rgb(179,222,105)",
            "rgb(252,205,229)",
            "rgb(217,217,217)",
            "rgb(188,128,189)",
            "rgb(204,235,197)",
            "rgb(255,237,111)"
        ],
        3: [
            "rgb(141,211,199)",
            "rgb(255,255,179)",
            "rgb(190,186,218)"
        ],
        4: [
            "rgb(141,211,199)",
            "rgb(255,255,179)",
            "rgb(190,186,218)",
            "rgb(251,128,114)"
        ],
        5: [
            "rgb(141,211,199)",
            "rgb(255,255,179)",
            "rgb(190,186,218)",
            "rgb(251,128,114)",
            "rgb(128,177,211)"
        ],
        6: [
            "rgb(141,211,199)",
            "rgb(255,255,179)",
            "rgb(190,186,218)",
            "rgb(251,128,114)",
            "rgb(128,177,211)",
            "rgb(253,180,98)"
        ],
        7: [
            "rgb(141,211,199)",
            "rgb(255,255,179)",
            "rgb(190,186,218)",
            "rgb(251,128,114)",
            "rgb(128,177,211)",
            "rgb(253,180,98)",
            "rgb(179,222,105)"
        ],
        8: [
            "rgb(141,211,199)",
            "rgb(255,255,179)",
            "rgb(190,186,218)",
            "rgb(251,128,114)",
            "rgb(128,177,211)",
            "rgb(253,180,98)",
            "rgb(179,222,105)",
            "rgb(252,205,229)"
        ],
        9: [
            "rgb(141,211,199)",
            "rgb(255,255,179)",
            "rgb(190,186,218)",
            "rgb(251,128,114)",
            "rgb(128,177,211)",
            "rgb(253,180,98)",
            "rgb(179,222,105)",
            "rgb(252,205,229)",
            "rgb(217,217,217)"
        ],
        type: "qual"
    },
    Spectral: {
        10: [
            "rgb(158,1,66)",
            "rgb(213,62,79)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,139)",
            "rgb(230,245,152)",
            "rgb(171,221,164)",
            "rgb(102,194,165)",
            "rgb(50,136,189)",
            "rgb(94,79,162)"
        ],
        11: [
            "rgb(158,1,66)",
            "rgb(213,62,79)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,139)",
            "rgb(255,255,191)",
            "rgb(230,245,152)",
            "rgb(171,221,164)",
            "rgb(102,194,165)",
            "rgb(50,136,189)",
            "rgb(94,79,162)"
        ],
        3: [
            "rgb(252,141,89)",
            "rgb(255,255,191)",
            "rgb(153,213,148)"
        ],
        4: [
            "rgb(215,25,28)",
            "rgb(253,174,97)",
            "rgb(171,221,164)",
            "rgb(43,131,186)"
        ],
        5: [
            "rgb(215,25,28)",
            "rgb(253,174,97)",
            "rgb(255,255,191)",
            "rgb(171,221,164)",
            "rgb(43,131,186)"
        ],
        6: [
            "rgb(213,62,79)",
            "rgb(252,141,89)",
            "rgb(254,224,139)",
            "rgb(230,245,152)",
            "rgb(153,213,148)",
            "rgb(50,136,189)"
        ],
        7: [
            "rgb(213,62,79)",
            "rgb(252,141,89)",
            "rgb(254,224,139)",
            "rgb(255,255,191)",
            "rgb(230,245,152)",
            "rgb(153,213,148)",
            "rgb(50,136,189)"
        ],
        8: [
            "rgb(213,62,79)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,139)",
            "rgb(230,245,152)",
            "rgb(171,221,164)",
            "rgb(102,194,165)",
            "rgb(50,136,189)"
        ],
        9: [
            "rgb(213,62,79)",
            "rgb(244,109,67)",
            "rgb(253,174,97)",
            "rgb(254,224,139)",
            "rgb(255,255,191)",
            "rgb(230,245,152)",
            "rgb(171,221,164)",
            "rgb(102,194,165)",
            "rgb(50,136,189)"
        ],
        type: "div"
    },
    YlGn: {
        3: [
            "rgb(247,252,185)",
            "rgb(173,221,142)",
            "rgb(49,163,84)"
        ],
        4: [
            "rgb(255,255,204)",
            "rgb(194,230,153)",
            "rgb(120,198,121)",
            "rgb(35,132,67)"
        ],
        5: [
            "rgb(255,255,204)",
            "rgb(194,230,153)",
            "rgb(120,198,121)",
            "rgb(49,163,84)",
            "rgb(0,104,55)"
        ],
        6: [
            "rgb(255,255,204)",
            "rgb(217,240,163)",
            "rgb(173,221,142)",
            "rgb(120,198,121)",
            "rgb(49,163,84)",
            "rgb(0,104,55)"
        ],
        7: [
            "rgb(255,255,204)",
            "rgb(217,240,163)",
            "rgb(173,221,142)",
            "rgb(120,198,121)",
            "rgb(65,171,93)",
            "rgb(35,132,67)",
            "rgb(0,90,50)"
        ],
        8: [
            "rgb(255,255,229)",
            "rgb(247,252,185)",
            "rgb(217,240,163)",
            "rgb(173,221,142)",
            "rgb(120,198,121)",
            "rgb(65,171,93)",
            "rgb(35,132,67)",
            "rgb(0,90,50)"
        ],
        9: [
            "rgb(255,255,229)",
            "rgb(247,252,185)",
            "rgb(217,240,163)",
            "rgb(173,221,142)",
            "rgb(120,198,121)",
            "rgb(65,171,93)",
            "rgb(35,132,67)",
            "rgb(0,104,55)",
            "rgb(0,69,41)"
        ],
        type: "seq"
    },
    YlGnBu: {
        3: [
            "rgb(237,248,177)",
            "rgb(127,205,187)",
            "rgb(44,127,184)"
        ],
        4: [
            "rgb(255,255,204)",
            "rgb(161,218,180)",
            "rgb(65,182,196)",
            "rgb(34,94,168)"
        ],
        5: [
            "rgb(255,255,204)",
            "rgb(161,218,180)",
            "rgb(65,182,196)",
            "rgb(44,127,184)",
            "rgb(37,52,148)"
        ],
        6: [
            "rgb(255,255,204)",
            "rgb(199,233,180)",
            "rgb(127,205,187)",
            "rgb(65,182,196)",
            "rgb(44,127,184)",
            "rgb(37,52,148)"
        ],
        7: [
            "rgb(255,255,204)",
            "rgb(199,233,180)",
            "rgb(127,205,187)",
            "rgb(65,182,196)",
            "rgb(29,145,192)",
            "rgb(34,94,168)",
            "rgb(12,44,132)"
        ],
        8: [
            "rgb(255,255,217)",
            "rgb(237,248,177)",
            "rgb(199,233,180)",
            "rgb(127,205,187)",
            "rgb(65,182,196)",
            "rgb(29,145,192)",
            "rgb(34,94,168)",
            "rgb(12,44,132)"
        ],
        9: [
            "rgb(255,255,217)",
            "rgb(237,248,177)",
            "rgb(199,233,180)",
            "rgb(127,205,187)",
            "rgb(65,182,196)",
            "rgb(29,145,192)",
            "rgb(34,94,168)",
            "rgb(37,52,148)",
            "rgb(8,29,88)"
        ],
        type: "seq"
    },
    YlOrBr: {
        3: [
            "rgb(255,247,188)",
            "rgb(254,196,79)",
            "rgb(217,95,14)"
        ],
        4: [
            "rgb(255,255,212)",
            "rgb(254,217,142)",
            "rgb(254,153,41)",
            "rgb(204,76,2)"
        ],
        5: [
            "rgb(255,255,212)",
            "rgb(254,217,142)",
            "rgb(254,153,41)",
            "rgb(217,95,14)",
            "rgb(153,52,4)"
        ],
        6: [
            "rgb(255,255,212)",
            "rgb(254,227,145)",
            "rgb(254,196,79)",
            "rgb(254,153,41)",
            "rgb(217,95,14)",
            "rgb(153,52,4)"
        ],
        7: [
            "rgb(255,255,212)",
            "rgb(254,227,145)",
            "rgb(254,196,79)",
            "rgb(254,153,41)",
            "rgb(236,112,20)",
            "rgb(204,76,2)",
            "rgb(140,45,4)"
        ],
        8: [
            "rgb(255,255,229)",
            "rgb(255,247,188)",
            "rgb(254,227,145)",
            "rgb(254,196,79)",
            "rgb(254,153,41)",
            "rgb(236,112,20)",
            "rgb(204,76,2)",
            "rgb(140,45,4)"
        ],
        9: [
            "rgb(255,255,229)",
            "rgb(255,247,188)",
            "rgb(254,227,145)",
            "rgb(254,196,79)",
            "rgb(254,153,41)",
            "rgb(236,112,20)",
            "rgb(204,76,2)",
            "rgb(153,52,4)",
            "rgb(102,37,6)"
        ],
        type: "seq"
    },
    YlOrRd: {
        3: [
            "rgb(255,237,160)",
            "rgb(254,178,76)",
            "rgb(240,59,32)"
        ],
        4: [
            "rgb(255,255,178)",
            "rgb(254,204,92)",
            "rgb(253,141,60)",
            "rgb(227,26,28)"
        ],
        5: [
            "rgb(255,255,178)",
            "rgb(254,204,92)",
            "rgb(253,141,60)",
            "rgb(240,59,32)",
            "rgb(189,0,38)"
        ],
        6: [
            "rgb(255,255,178)",
            "rgb(254,217,118)",
            "rgb(254,178,76)",
            "rgb(253,141,60)",
            "rgb(240,59,32)",
            "rgb(189,0,38)"
        ],
        7: [
            "rgb(255,255,178)",
            "rgb(254,217,118)",
            "rgb(254,178,76)",
            "rgb(253,141,60)",
            "rgb(252,78,42)",
            "rgb(227,26,28)",
            "rgb(177,0,38)"
        ],
        8: [
            "rgb(255,255,204)",
            "rgb(255,237,160)",
            "rgb(254,217,118)",
            "rgb(254,178,76)",
            "rgb(253,141,60)",
            "rgb(252,78,42)",
            "rgb(227,26,28)",
            "rgb(177,0,38)"
        ],
        type: "seq"
    }
};

const DEFAULT_NUM_COLOURS = 3;
let PaletteService = class PaletteService {
    constructor(_http) {
        this._http = _http;
        this.namedPalettes = {};
        this._source = '';
    }
    set source(val) {
        this._source = val;
    }
    getPalette(name, reverse, numColours) {
        var palette = null;
        if (this.namedPalettes[name]) {
            palette = this.namedPalettes[name];
        }
        else if (palettes[name]) {
            palette = palettes[name][numColours || DEFAULT_NUM_COLOURS];
        }
        if (palette) {
            if (reverse) {
                return of(palette.slice().reverse());
            }
            return of(palette.slice());
        }
        return this._http.get(this._source + '/' + name + '.pal', { responseType: 'text' }).pipe(map((text) => this.parseNCWMSPalette(text)));
    }
    parseNCWMSPalette(txt) {
        return txt.split('\n')
            .map(ln => ln.replace(/\#.*/g, '').trim().replace(/ +/g, ' '))
            .filter(ln => ln.length)
            .map(e => `rgb(${e.split(' ').join(',')})`);
    }
    colourIndex(val, min, max, count) {
        let point = (val - min) / (max - min);
        let pos = Math.round(point * (count - 1));
        return pos;
    }
};
PaletteService.ctorParameters = () => [
    { type: HttpClient }
];
PaletteService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [HttpClient])
], PaletteService);

function utcDate(y, m, d) {
    return new Date(Date.UTC(y, m, d));
}
function utcDateCopy(d) {
    return utcDate(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());
}
let TimeUtilsService = class TimeUtilsService {
    constructor() {
        this.specialDates = {
            yesterday: () => {
                var d = new Date();
                d.setDate(d.getDate() - 1);
                return d;
            }
        };
    }
    convertDate(d) {
        if (!d) {
            d = new Date();
        }
        var date;
        if (typeof (d) === 'string') {
            var dateText = d;
            if (this.specialDates[dateText]) {
                date = this.specialDates[dateText]();
            }
            else {
                var [year, month, day, other] = d.split('-').map(c => +c);
                date = utcDate(year, month, day);
            }
        }
        else {
            date = d;
        }
        return {
            day: date.getUTCDate(),
            month: date.getUTCMonth() + 1,
            year: date.getUTCFullYear()
        };
    }
    datesEqual(lhs, rhs) {
        if (!lhs || !rhs) {
            return false;
        }
        return (lhs.year === rhs.year) &&
            (lhs.month === rhs.month) &&
            (lhs.day === rhs.day);
    }
};
TimeUtilsService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [])
], TimeUtilsService);

let StaticDataService = class StaticDataService {
    constructor(http) {
        this.http = http;
        this.cache = {};
    }
    get(host, path) {
        var url = `${host.url}${path}`;
        if (!this.cache[url]) {
            let uniqueUrl = url;
            if (uniqueUrl.indexOf('?') < 0) {
                uniqueUrl += '?';
            }
            else {
                uniqueUrl += '&';
            }
            uniqueUrl += `time=${new Date().getTime()}`;
            this.cache[url] = this.http.get(uniqueUrl).pipe(publishReplay(), refCount());
        }
        return this.cache[url];
    }
};
StaticDataService.ctorParameters = () => [
    { type: HttpClient }
];
StaticDataService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [HttpClient])
], StaticDataService);

let OpendapService = class OpendapService {
    constructor(http) {
        this.http = http;
    }
    makeURL(host, filepath) {
        return host.url + '/dodsC/' + filepath;
    }
    get(url) {
        return this.http.get(url, { responseType: 'text' });
    }
    getData(queryUrl, das) {
        return this.get(queryUrl).pipe(map((txt) => simplify(parseData(txt, das))));
    }
    getDAS(url) {
        return this.get(url + '.das').pipe(map(parseDAS));
    }
    getDDX(url) {
        return this.get(url + '.ddx').pipe(map(parseDDX));
    }
    getExtent(url) {
        console.log(url);
        return forkJoin([
            this.getDAS(url),
            this.getDDX(url)
        ]).pipe(switchMap(([theDAS, theDDX]) => {
            var das = theDAS;
            return forkJoin([
                this.getData(url + '.ascii?latitude', das),
                this.getData(url + '.ascii?longitude', das)
            ]);
        }), map((ll) => {
            var lats = ll[0].latitude;
            var lons = ll[1].longitude;
            return [lats[0], lats[lats.length - 1],
                lons[0], lons[lons.length - 1]];
        }));
    }
    dapRangeQuery(from, to, step) {
        step = step || 1;
        if (to === undefined) {
            to = from;
        }
        return '[' + from + ':' + step + ':' + to + ']';
    }
};
OpendapService.ctorParameters = () => [
    { type: HttpClient }
];
OpendapService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [HttpClient])
], OpendapService);

const LAT_NAMES = ['latitude', 'lat'];
const LNG_NAMES = ['longitude', 'lng', 'lon'];
const TIME_NAMES = ['time', 't'];
let MetadataService = class MetadataService {
    constructor(dap) {
        this.dap = dap;
        this.ddxCache = {};
        this.dasCache = {};
        this.timeCache = {};
    }
    identifyCoordinate(ddx, ...possibleNames) {
        for (let n of possibleNames) {
            if (ddx.variables[n]) {
                return n;
            }
        }
        return undefined;
    }
    getDDX(host, file) {
        var url = this.dap.makeURL(host, file);
        return this.ddxForUrl(url);
    }
    ddxForUrl(url) {
        if (!this.ddxCache[url]) {
            this.ddxCache[url] =
                this.dap.getDDX(url).pipe(publishReplay(), refCount());
        }
        return this.ddxCache[url];
    }
    getDDXForLayer(ml) {
        return this.getDDX(ml.flattenedSettings.host, ml.interpolatedFile);
    }
    getDAS(host, file) {
        var url = this.dap.makeURL(host, file);
        return this.dasForUrl(url);
    }
    dasForUrl(url) {
        if (!this.dasCache[url]) {
            this.dasCache[url] =
                this.dap.getDAS(url).pipe(publishReplay(), refCount());
        }
        return this.dasCache[url];
    }
    getDASForLayer(ml) {
        return this.getDAS(ml.flattenedSettings.host, ml.interpolatedFile);
    }
    getMetadata(ml) {
        if (ml.flattenedSettings.host.software !== 'tds') {
            return of({});
        }
        return forkJoin([this.getDASForLayer(ml), this.getDDXForLayer(ml)]).pipe(map(meta => {
            return {
                das: meta[0],
                ddx: meta[1]
            };
        }), map(meta => {
            return Object.assign({}, meta.das.attr || {}, meta.ddx.variables[ml.flattenedSettings.layer || ml.flattenedSettings.variable] || {});
        }));
    }
    populateMetadata(ml) {
        this.getMetadata(ml).subscribe(entry => {
            setTimeout(() => {
                ml.retrievedMetadata = entry;
            });
        });
    }
    getGrid(host, file) {
        const url = this.dap.makeURL(host, file);
        return this.getGridForURL(url);
    }
    getGridForURL(url) {
        const ddx$ = this.ddxForUrl(url);
        const das$ = this.dasForUrl(url);
        const res$ = forkJoin([ddx$, das$]).pipe(map((metadata) => {
            const ddx = metadata[0];
            const das = metadata[1];
            const latCoord = this.identifyCoordinate(ddx, ...LAT_NAMES);
            const lngCoord = this.identifyCoordinate(ddx, ...LNG_NAMES);
            const lat$ = this.dap.getData(`${url}.ascii?${latCoord}`, das).pipe(map((dd) => dd[latCoord]));
            const lng$ = this.dap.getData(`${url}.ascii?${lngCoord}`, das).pipe(map((dd) => dd[lngCoord]));
            return forkJoin(lat$, lng$);
        }), switchAll(), publishReplay(), refCount());
        return res$;
    }
    getGridForLayer(ml) {
        return this.getGrid(ml.flattenedSettings.host, ml.interpolatedFile);
    }
    getSpatialExtent(ml) {
        return this.getGridForLayer(ml).pipe(map(([lats, lngs]) => {
            var result = {
                east: Math.max(...lngs),
                west: Math.min(...lngs),
                north: Math.max(...lats),
                south: Math.min(...lats)
            };
            return result;
        })).pipe(publishReplay(), refCount());
    }
    getTimeDimension(host, file) {
        const url = this.dap.makeURL(host, file);
        return this.getTimeDimensionForURL(url);
    }
    getTimeDimensionForURL(url) {
        if (!this.timeCache[url]) {
            const ddx$ = this.ddxForUrl(url);
            const das$ = this.dasForUrl(url);
            const res$ = forkJoin([ddx$, das$]).pipe(map((metadata) => {
                const ddx = metadata[0];
                const das = metadata[1];
                const timeCoord = this.identifyCoordinate(ddx, ...TIME_NAMES);
                const time$ = this.dap.getData(`${url}.ascii?${timeCoord}`, das).pipe(map((dd) => dd[timeCoord]));
                return time$;
            }), switchAll(), shareReplay());
            this.timeCache[url] = res$;
        }
        return this.timeCache[url];
    }
};
MetadataService.ctorParameters = () => [
    { type: OpendapService }
];
MetadataService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [OpendapService])
], MetadataService);

;
let TimeseriesService = class TimeseriesService {
    constructor(metadata, dap) {
        this.metadata = metadata;
        this.dap = dap;
    }
    getTimeseries(host, file, variable, pt, additionalIndices, fillValue) {
        additionalIndices = additionalIndices || {};
        var url = this.dap.makeURL(host, file);
        var ddx$ = this.metadata.ddxForUrl(url);
        var das$ = this.metadata.dasForUrl(url);
        var variable = variable;
        return forkJoin(ddx$, das$, this.metadata.getGrid(host, file)).pipe(switchMap(([ddx, das, latsAndLngs]) => {
            const lats = latsAndLngs[0];
            const lngs = latsAndLngs[1];
            var latIndex = this.indexInDimension(pt.lat, lats);
            var lngIndex = this.indexInDimension(pt.lng, lngs);
            if (fillValue === undefined) {
                fillValue = +ddx.variables[variable]._FillValue;
            }
            var query = this.makeTimeQuery(ddx, variable, latIndex, lngIndex, additionalIndices);
            return this.dap.getData(`${url}.ascii?${variable}${query}`, das);
        }), map((data) => {
            let vals = data[variable];
            if (!vals.length) {
                vals = [data[variable]];
            }
            return {
                dates: (data.time || data.t),
                values: vals.map(v => (v === fillValue) ? NaN : v)
            };
        }));
    }
    getTimeseriesForLayer(ml, pt) {
        return this.getTimeseries(ml.flattenedSettings.host, ml.interpolatedFile, ml.flattenedSettings.layer || ml.flattenedSettings.variable, pt, null, ml.flattenedSettings.fillValue);
    }
    makeTimeQuery(ddx, variable, latIndex, lngIndex, additionalIndices) {
        var metadata = ddx.variables[variable];
        var query = '';
        metadata.dimensions.forEach((dim) => {
            var dName = dim.name.toLowerCase();
            if (TIME_NAMES.indexOf(dName) >= 0) {
                query += this.dapRangeQuery(0, +(dim.size) - 1);
            }
            else if (LAT_NAMES.indexOf(dName) >= 0) {
                query += this.dapRangeQuery(latIndex);
            }
            else if (LNG_NAMES.indexOf(dName) >= 0) {
                query += this.dapRangeQuery(lngIndex);
            }
            else {
                query += this.dapRangeQuery(additionalIndices[dName] || 0);
            }
        });
        return query;
    }
    dapRangeQuery(from, to, step) {
        step = step || 1;
        if (to === undefined) {
            to = from;
        }
        return '[' + from + ':' + step + ':' + to + ']';
    }
    indexInDimension(c, dim, trim) {
        var minIndex = 0;
        var maxIndex = dim.length - 1;
        if (trim) {
            maxIndex -= trim;
        }
        const rev = dim[0] > dim[dim.length - 1];
        if (rev) {
            minIndex = maxIndex;
            maxIndex = 0;
        }
        var currentIndex;
        while ((minIndex <= maxIndex) || (rev && (maxIndex <= minIndex))) {
            if (c <= dim[minIndex]) {
                return minIndex;
            }
            if (c >= dim[maxIndex]) {
                return maxIndex;
            }
            currentIndex = Math.floor((minIndex + maxIndex) / 2);
            var d1 = Math.abs(dim[currentIndex] - c);
            var d2 = Math.abs(dim[currentIndex + 1] - c);
            if (rev) {
                if (d2 <= d1) {
                    maxIndex = currentIndex + 1;
                }
                else {
                    minIndex = currentIndex;
                }
            }
            else {
                if (d2 <= d1) {
                    minIndex = currentIndex + 1;
                }
                else {
                    maxIndex = currentIndex;
                }
            }
        }
        return currentIndex;
    }
    ;
};
TimeseriesService.ctorParameters = () => [
    { type: MetadataService },
    { type: OpendapService }
];
TimeseriesService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [MetadataService, OpendapService])
], TimeseriesService);

// @dynamic
class InterpolationService {
    static isDefined(val) {
        return val !== undefined && val !== null;
    }
    static interpolate(expr, params) {
        if (typeof expr !== 'string' || !params) {
            return expr;
        }
        return expr.replace(InterpolationService.templateMatcher, (substring, b) => {
            let r = InterpolationService.getValue(params, b);
            return InterpolationService.isDefined(r) ? r : substring;
        });
    }
    static getValue(target, key) {
        let keys = key.split('.');
        key = '';
        do {
            key += keys.shift();
            if (InterpolationService.isDefined(target) && InterpolationService.isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {
                target = target[key];
                key = '';
            }
            else if (!keys.length) {
                target = undefined;
            }
            else {
                key += '.';
            }
        } while (keys.length);
        return target;
    }
}
InterpolationService.templateMatcher = /{{\s?([^{}\s]*)\s?}}/g;

let PointSelectionService = class PointSelectionService {
    constructor(meta) {
        this.meta = meta;
        this.latestPointSelectionSource = new BehaviorSubject(null);
        this.latestPointSelection = this.latestPointSelectionSource.asObservable();
    }
    unchanged(current, updated) {
        if (!current && !updated) {
            return true;
        }
        if (!current || !updated) {
            return false;
        }
        if (current.variable !== updated.variable) {
            return false;
        }
        if (!Object.keys(current.tags).every(t => current.tags[t] === updated.tags[t])) {
            return false;
        }
        if (current.catalog.url !== updated.catalog.url) {
            return false;
        }
        if (current.feature !== updated.feature) {
            return false;
        }
        return true;
        // return false; // TODO
    }
    pointSelection(sel) {
        let current = this.latestPointSelectionSource.getValue();
        if (this.unchanged(current, sel)) {
            return;
        }
        let url = this.fullUrl(sel);
        if (!this.validUrl(url)) {
            return; // Not a complete selection
        }
        if (!sel.variable) {
            return; // Not a complete selection
        }
        this.latestPointSelectionSource.next(sel);
    }
    fullUrl(sel) {
        let params = Object.assign({}, sel.feature ? sel.feature.properties : {}, sel.tags);
        return InterpolationService.interpolate(sel.catalog.url, params);
    }
    validUrl(url) {
        return url.indexOf('{{') < 0;
    }
    timeseriesVariables(sel) {
        let coords = sel.catalog.coordinates || {};
        let url = this.fullUrl(sel);
        if (!this.validUrl(url)) {
            return of([]);
        }
        return this.meta.ddxForUrl(url).pipe(map(ddx => {
            let variables = ddx.variables;
            let variableNames = Object.keys(variables).filter(v => {
                let dims = ddx.variables[v].dimensions;
                return Object.keys(coords).every(coord => {
                    return dims.find(dim => dim.name === coord);
                });
            });
            return variableNames.map(v => {
                if (sel.catalog && sel.catalog.displayFormat) {
                    let fmt = Object.assign({ variable: v }, ddx.variables[v]);
                    return {
                        value: v,
                        label: InterpolationService.interpolate(sel.catalog.displayFormat, fmt)
                    };
                }
                if (ddx.variables[v].long_name) {
                    return {
                        value: v,
                        label: ddx.variables[v].long_name
                    };
                }
                return {
                    value: v,
                    label: v
                };
            });
        }));
    }
};
PointSelectionService.ctorParameters = () => [
    { type: MetadataService }
];
PointSelectionService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [MetadataService])
], PointSelectionService);

let AvailableDatesService = class AvailableDatesService {
    constructor(metadata) {
        this.metadata = metadata;
    }
    fnForYear(mapped, year) {
        const publication = mapped.layer.publications[mapped.options.publication];
        return InterpolationService.interpolate(publication.options.filepath, {
            year: year
        });
    }
    availableDates(mapped, year) {
        let layer = mapped.layer;
        let fn = this.fnForYear(mapped, year);
        let res$ = this.metadata.getTimeDimension(layer.options.host, fn);
        if (!layer.timeshift) {
            return res$;
        }
        if (layer.timePeriod.containsYear(year - 1)) {
            fn = this.fnForYear(mapped, year - 1);
            let prev$ = this.metadata.getTimeDimension(layer.host, fn);
            res$ = forkJoin(...[prev$, res$]).pipe(map((years) => years[0].concat(years[1])));
        }
        return res$.pipe(map(dates => {
            return dates.map(d => {
                let res = new Date(d.getTime());
                res.setUTCDate(d.getUTCDate() - layer.timeshift * layer.timestep);
                return res;
            });
        }), map(dates => dates.filter((d, i) => (i >= Math.abs(layer.timeshift)) && (d.getUTCFullYear() === year))));
    }
};
AvailableDatesService.ctorParameters = () => [
    { type: MetadataService }
];
AvailableDatesService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [MetadataService])
], AvailableDatesService);

const NAMED_OPTIONS = {
    host: 'namedHosts',
    interval: 'namedIntervals'
};
function clone(v) {
    return JSON.parse(JSON.stringify(v));
}
function matchFirstDefinedKey(keys, lhs, rhs) {
    for (let k of keys) {
        if (lhs[k] && rhs[k]) {
            return lhs[k] === rhs[k];
        }
    }
    return false;
}
function mergeArraysByKeys(keys, ...sources) {
    if (!sources.length) {
        return [];
    }
    var result = clone(sources[0]).map(p => new Publication(p));
    for (var i = 1; i < sources.length; i++) {
        var source = sources[i];
        for (var j = 0; j < source.length; j++) {
            var publication = source[j];
            var match = result.findIndex((pub) => matchFirstDefinedKey(keys, pub, publication));
            if (match >= 0) {
                var options = Object.assign({}, publication.options || {}, result[match].options || {});
                result[match] = Object.assign(new Publication(), publication, result[match]);
                result[match].options = options;
            }
            else {
                result.push(new Publication(clone(publication)));
            }
        }
    }
    result = result.filter(p => !p.skip);
    return result;
}
function propagate(target, source, skipPublications) {
    target.options = Object.assign({}, source.options || {}, target.options || {});
    if (!skipPublications) {
        target.publications = mergeArraysByKeys(['timestep', 'label'], target.publications || [], source.publications || []);
        //    console.log(target.publications);
    }
}
function instantiateNamedOptions(dest, source) {
    for (var key in NAMED_OPTIONS) {
        const configKey = NAMED_OPTIONS[key];
        if (!source[configKey]) {
            continue;
        }
        if (!dest[key] || (typeof (dest[key]) !== 'string')) {
            continue;
        }
        const lookup = dest[key];
        dest[key] = source[configKey][lookup];
    }
}
class CatalogOptions {
}
class Catalog {
    constructor(config) {
        this.themes = [];
        if (!config) {
            return;
        }
        Object.assign(this, config);
        this.themes = config.themes.map((t) => new Theme(t));
        this.propagateOptions();
        this.instantiateNamedOptions();
    }
    propagateOptions() {
        this.themes.forEach(t => {
            propagate(t, this);
            t.propagateOptions();
        });
    }
    instantiateNamedOptions() {
        if (this.publications) {
            this.publications.forEach(p => p.instantiateNamedOptions(this));
        }
        this.themes.forEach(t => t.instantiateNamedOptions(this));
    }
    allLayers() {
        return this.themes.map(t => t.layers).reduce((prev, curr) => prev.concat(curr), []);
    }
}
class Theme {
    constructor(config) {
        this.layers = [];
        if (!config) {
            return;
        }
        Object.assign(this, config);
        if (config.layers) {
            this.layers = config.layers.map((l) => new Layer(l));
        }
        else {
            this.layers = [];
        }
    }
    propagateOptions() {
        this.layers.forEach(l => {
            propagate(l, this);
            l.propagateOptions();
            l.dataCreator = l.dataCreator || this.dataCreator;
        });
    }
    instantiateNamedOptions(source) {
        instantiateNamedOptions(this.options, source);
        this.publications.forEach(p => p.instantiateNamedOptions(source));
        this.layers.forEach(l => l.instantiateNamedOptions(source));
    }
}
class Layer {
    constructor(config) {
        this.publications = [];
        this.options = new CatalogOptions();
        if (!config) {
            return;
        }
        Object.assign(this, config);
        if (config.publications) {
            this.publications = config.publications.map((p) => new Publication(p));
        }
        else {
            this.publications = [];
        }
    }
    propagateOptions() {
        this.publications.forEach(p => {
            propagate(p, this, true);
        });
    }
    instantiateNamedOptions(source) {
        instantiateNamedOptions(this.options, source);
        this.publications.forEach(p => p.instantiateNamedOptions(source));
    }
}
class Publication {
    constructor(config) {
        this.options = new CatalogOptions();
        if (!config) {
            return;
        }
        Object.assign(this, config);
    }
    instantiateNamedOptions(source) {
        instantiateNamedOptions(this.options, source);
    }
}

const PUBLICATION_PRIORITY_ORDER = [
    'annual',
    'monthly',
    'daily'
];
const ɵ0 = (host, fn) => {
    let components = fn.split('/');
    components.pop();
    return `${host}/catalog/${components.join('/')}/catalog.html`;
}, ɵ1 = (host, fn, ml) => {
    return ml.layer.options.downloadPath || `${host}${fn}`;
};
const MAKE_DOWNLOAD_URL = {
    tds: ɵ0,
    static: ɵ1
};
const WMS_PARAMETER_NAMES = {
    tds: [
        'layers',
        'styles',
        'colorscalerange',
        'abovemaxcolor',
        'belowmincolor',
        'time',
        'transparent',
        'logscale'
    ],
    geoserver: [
        'transparent',
        'layers'
    ],
    esri: [
        'layers',
        'styles',
        'transparent'
    ]
};
const WMS_URL_FORMAT = {
    tds: '/wms/',
    geoserver: '/wms/',
    esri: '/'
};
const INTERPOLATED_PARAMETERS = [
    'styles',
    'layers'
];
class MappedLayer {
    constructor(data) {
        this.options = {
            date: new Date(2016, 0, 1) // Set to most recent available date
        };
        this.retrievedMetadata = {};
        this.wmsParameters = {};
        this.flattenedSettings = {};
        this.opacity = 1.0;
        Object.assign(this, data || {});
        if (this.layerType === undefined) {
            this.layerType = this.wmsParameters ? 'wms' : undefined;
        }
    }
    description() {
        return this.layer.description ||
            (this.retrievedMetadata &&
                this.retrievedMetadata[this.layer.descriptionField || 'long_name']);
    }
    leading0(n) {
        if (n < 10) {
            return '0' + n;
        }
        return '' + n;
    }
    defaultPublication() {
        const priorityPublication = PUBLICATION_PRIORITY_ORDER.find(pp => this.layer.publications.findIndex(lp => (lp.timestep === pp) || (lp.label === pp)) >= 0);
        if (priorityPublication) {
            return this.layer.publications.findIndex(p => (p.label === priorityPublication) || (p.timestep === priorityPublication));
        }
        return this.layer.publications.findIndex(p => !p.skip);
    }
    update() {
        this.options.publication = (this.options.publication === undefined) ?
            this.defaultPublication() :
            this.options.publication;
        const publication = this.layer.publications[this.options.publication];
        const host = publication.options.host || {};
        const baseURL = host.url;
        const software = host.software || 'tds';
        this.interpolatedFile = (publication.options.filepath || '');
        const mapParams = Object.assign({}, this.layer, publication.options, publication.options.mapOptions || {}, this.options.date ? {
            decade: decadeText(this.options.date),
            year: this.options.date.getFullYear(),
            month: this.leading0(this.options.date.getMonth() + 1),
            day: this.leading0(this.options.date.getDate()),
        } : {}, this.options, this.options.tags || {});
        if (mapParams.timeFormat) {
            mapParams['time'] = InterpolationService.interpolate(mapParams.timeFormat, mapParams);
        }
        mapParams.layers = mapParams.layers || mapParams.layer || mapParams.variable;
        INTERPOLATED_PARAMETERS.forEach(p => {
            if (mapParams[p]) {
                mapParams[p] = InterpolationService.interpolate(mapParams[p], mapParams);
            }
        });
        this.interpolatedFile = InterpolationService.interpolate(this.interpolatedFile, mapParams);
        this.url = baseURL + WMS_URL_FORMAT[software] + this.interpolatedFile;
        if (MAKE_DOWNLOAD_URL[software]) {
            this.interpolatedDownloadURL = MAKE_DOWNLOAD_URL[software](host.downloadLink || baseURL, this.interpolatedFile, this);
        }
        else {
            this.interpolatedDownloadURL = host.downloadLink || null;
        }
        if (this.layer.options.legend === 'wms') {
            this.legendURL = this.url + '?service=WMS&request=GetLegendGraphic&format=image/png';
            this.legendURL += `&layer=${InterpolationService.interpolate(mapParams.layers, mapParams)}`;
            this.legendURL += '&version=1.1.1';
            this.options.legend = true;
        }
        else {
            this.legendURL = null;
        }
        if (mapParams.vectors) {
            this.wmsParameters = null;
            this.layerType = 'vector';
            let styles = mapParams.styles || {};
            this._styleFunc = (f) => {
                return styles;
            };
            if (mapParams.vectors === 'point' && mapParams.styles) {
                this.layerType = 'circle';
            }
        }
        else {
            this.layerType = 'wms';
            this.wmsParameters = {};
            WMS_PARAMETER_NAMES[software].forEach(param => {
                if (mapParams[param]) {
                    this.wmsParameters[param] = mapParams[param];
                }
            });
        }
        this.flattenedSettings = mapParams;
        if (mapParams.titleFormat) {
            this.title = InterpolationService.interpolate(mapParams.titleFormat, mapParams);
        }
        else {
            this.title = this.layer.name;
        }
    }
}
function decadeText(d) {
    let decade = d.getFullYear().toString().slice(0, 3);
    return `${decade}0-${decade}9`;
}

let CatalogService = class CatalogService {
    constructor(_http, metadata) {
        this._http = _http;
        this.metadata = metadata;
    }
    load(catalogJSON) {
        this.current = new Catalog(catalogJSON);
        this.current.allLayers().filter(l => l.options.smallExtent).forEach(l => {
            l.spatialExtent = this.findExtentOfLayer(l);
        });
    }
    loadFrom(path) {
        return this._http.get(path).pipe(tap(json => this.load(json)), map(_ => this.current));
        //   var result = new Promise<Catalog>((res,rej)=>{
        //     this._http.get(path).subscribe(json=>{
        //       this.load(json);
        //       res(this.current);
        //     });
        //   });
        // return from(result);
    }
    findExtentOfLayer(l) {
        const tmp = new MappedLayer();
        tmp.layer = l;
        tmp.update();
        return this.metadata.getSpatialExtent(tmp);
    }
};
CatalogService.ctorParameters = () => [
    { type: HttpClient },
    { type: MetadataService }
];
CatalogService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [HttpClient, MetadataService])
], CatalogService);

var MapViewParameterService_1;
let MapViewParameterService = MapViewParameterService_1 = class MapViewParameterService {
    constructor(_location) {
        this._location = _location;
    }
    current() {
        if (!this._location) {
            return {};
        }
        let path = this._location.path().split('/');
        if (path.length > MapViewParameterService_1.parameterNames.length) {
            path.shift();
        }
        let result = {};
        MapViewParameterService_1.parameterNames.forEach((p, i) => result[p] = path[i] || '_');
        return result;
    }
    update(changes) {
        if (!this._location) {
            return;
        }
        let updated = this.current();
        Object.assign(updated, changes);
        this._location.go(this.constructRoute(updated));
    }
    retrieveFromRoute(route) {
        let result = {};
        for (let name of MapViewParameterService_1.parameterNames) {
            result[name] = route.snapshot.params[name];
        }
        return result;
    }
    ;
    constructRoute(parameters) {
        return MapViewParameterService_1.parameterNames.map(n => parameters[n] || '_').join('/');
    }
    routerPaths( /*component:any*/) {
        let result = [];
        let path = '';
        result.push(path);
        //    result.push({path:path,component:component});
        for (let name of MapViewParameterService_1.parameterNames) {
            path += `:${name}`;
            //      result.unshift({path:path,component:component});
            result.unshift(path);
            path += '/';
        }
        return result;
    }
};
MapViewParameterService.ctorParameters = () => [
    { type: Location }
];
MapViewParameterService.parameterNames = [];
MapViewParameterService = MapViewParameterService_1 = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [Location])
], MapViewParameterService);

var WMSService_1;
const D2R = Math.PI / 180;
let WMSService = WMSService_1 = class WMSService {
    constructor() {
        this.webMercator = (proj4__default || proj4).Proj('EPSG:3857');
        //this.webMercator = proj4.Proj(proj4.defs('EPSG:3857'));
    }
    pointToWebMercator(pt) {
        var ptRadians = { x: pt.lng() * D2R, y: pt.lat() * D2R };
        var ptWM = this.webMercator.forward({ x: ptRadians.x, y: ptRadians.y });
        return ptWM;
    }
    ;
    computeTileBounds(map, coord, zoom) {
        var proj = map.getProjection();
        var zfactor = Math.pow(2, zoom);
        var xScale = WMSService_1.TILE_WIDTH / zfactor;
        var yScale = WMSService_1.TILE_HEIGHT / zfactor;
        var topLeftLatLng = proj.fromPointToLatLng({ x: coord.x * xScale, y: coord.y * yScale });
        var bottomRightLatLng = proj.fromPointToLatLng({ x: (coord.x + 1) * xScale, y: (coord.y + 1) * yScale });
        var topLeftWebMercator = this.pointToWebMercator(topLeftLatLng);
        var bottomRightWebMercator = this.pointToWebMercator(bottomRightLatLng);
        if (topLeftWebMercator.x > bottomRightWebMercator.x) {
            if (topLeftLatLng.lng() === 180.0) {
                topLeftWebMercator.x = -topLeftWebMercator.x;
            }
            else {
                bottomRightWebMercator.x = -bottomRightWebMercator.x;
            }
        }
        var bbox = [topLeftWebMercator.x, bottomRightWebMercator.y, bottomRightWebMercator.x, topLeftWebMercator.y];
        var bboxTxt = bbox.map((n) => n.toFixed(20).replace(/\.?0+$/, "")); // Avoid e notation on small numbers
        return bboxTxt.join(',');
    }
    ;
    buildImageMap(getMap, getURL, getOptions, getOpacity) {
        var me = this;
        return new window.google.maps.ImageMapType({
            getTileUrl: function (coord, zoom) {
                var theMap = getMap();
                if (!theMap) {
                    return '';
                }
                var bbox = me.computeTileBounds(theMap, coord, zoom);
                var url = getURL(zoom) + '&service=WMS&version=1.1.1&request=GetMap';
                url += "&BBOX=" + bbox; // set bounding box
                url += "&FORMAT=image/png"; //WMS format
                var layerParams = getOptions ? getOptions(zoom) : {};
                layerParams.width = WMSService_1.TILE_WIDTH;
                layerParams.height = WMSService_1.TILE_HEIGHT;
                for (var key in layerParams) {
                    url += '&' + key + '=' + layerParams[key];
                }
                url += "&SRS=EPSG:3857"; //set Web Mercator
                return url;
            },
            tileSize: new window.google.maps.Size(WMSService_1.TILE_SIZE, WMSService_1.TILE_SIZE),
            isPng: true,
            opacity: getOpacity ? getOpacity() : 1.0
        });
    }
    ;
};
WMSService.TILE_SIZE = 256;
WMSService.TILE_WIDTH = WMSService_1.TILE_SIZE;
WMSService.TILE_HEIGHT = WMSService_1.TILE_SIZE;
WMSService = WMSService_1 = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [])
], WMSService);

let GeocodingService = class GeocodingService {
    constructor(_api) {
        this._api = _api;
    }
    geocode(address, bnds) {
        var promise = new Promise((resolve, reject) => {
            this._api.load().then(() => {
                var service = new google.maps.Geocoder();
                service.geocode({
                    address: address,
                    componentRestrictions: {
                        country: 'AU'
                    },
                    region: 'AU'
                }, (results, status) => {
                    if (status !== google.maps.GeocoderStatus.OK) {
                        reject();
                    }
                    else {
                        resolve(results.filter(function (r) {
                            return r.formatted_address !== 'Australia';
                        }));
                    }
                });
            });
        });
        return from(promise);
    }
};
GeocodingService.ctorParameters = () => [
    { type: MapsAPILoader }
];
GeocodingService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [MapsAPILoader])
], GeocodingService);

//const proj4 = require('proj4').default;
let ProjectionService = class ProjectionService {
    constructor() {
    }
    proj4() {
        return proj4;
    }
};
ProjectionService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [])
], ProjectionService);

var MapWaldCoreModule_1;
const services = [
    //$serviceList
    AvailableDatesService,
    PointSelectionService,
    TimeseriesService,
    StaticDataService,
    MetadataService,
    OpendapService,
    PaletteService,
    TimeUtilsService,
    WMSService,
    MapViewParameterService,
    ProjectionService,
    GeocodingService,
    CatalogService,
    TreeFilterService
];
let MapWaldCoreModule = MapWaldCoreModule_1 = class MapWaldCoreModule {
    static forRoot(moduleInitialisation) {
        return {
            ngModule: MapWaldCoreModule_1,
            providers: services
        };
    }
};
MapWaldCoreModule = MapWaldCoreModule_1 = __decorate([
    NgModule({
        imports: [
            CommonModule,
            FormsModule,
            AgmCoreModule,
            HttpClientModule
        ],
        declarations: [],
        exports: [],
        providers: services
    })
], MapWaldCoreModule);

let WMSLayerComponent = class WMSLayerComponent {
    constructor(_wmsService, _wrapper) {
        this._wmsService = _wmsService;
        this._wrapper = _wrapper;
        this.opacity = 1.0;
        this.position = 0;
        this.zoom = 4;
        this.building = false;
    }
    buildMap() {
        if (this.building)
            return;
        this.building = true;
        this._wrapper.getNativeMap().then((theMap) => {
            this.building = false;
            this.map = theMap;
            this.overlay = this._wmsService.buildImageMap(() => this.map, (z) => this.url + '?', (z) => this.params, () => this.opacity);
            if (this.map.overlayMapTypes.length > this.position) {
                this.map.overlayMapTypes.removeAt(this.position);
                this.map.overlayMapTypes.insertAt(this.position, this.overlay);
            }
            else {
                while (this.map.overlayMapTypes.length <= this.position) {
                    // Temporarily add replicate layers.
                    // These should be replaced by other wms-layer components
                    this.map.overlayMapTypes.push(this.overlay);
                }
            }
        }).catch((e) => console.log(e));
    }
    ngOnInit() {
        if (this.url) {
            this.buildMap();
        }
    }
    ngOnChanges(changes) {
        if (this.url) {
            this.buildMap();
        }
        // let currentOpacity: number = changes.opacity.currentValue;
        // let previousOpacity: number = changes.opacity.previousValue;
        // if (currentOpacity !== previousOpacity) {
        //   console.log('building a map off my own bat');
        //   this.buildMap();
        // }
    }
    ngOnDestroy() {
        this._wrapper.getNativeMap().then((theMap) => {
            if (this.map.overlayMapTypes.length > this.position) {
                this.map.overlayMapTypes.removeAt(this.position);
            }
        });
    }
};
WMSLayerComponent.ctorParameters = () => [
    { type: WMSService },
    { type: GoogleMapsAPIWrapper }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], WMSLayerComponent.prototype, "url", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], WMSLayerComponent.prototype, "params", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], WMSLayerComponent.prototype, "opacity", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], WMSLayerComponent.prototype, "position", void 0);
WMSLayerComponent = __decorate([
    Component({
        selector: 'wms-layer',
        template: ''
    }),
    __metadata("design:paramtypes", [WMSService,
        GoogleMapsAPIWrapper])
], WMSLayerComponent);

let MapLegendComponent = class MapLegendComponent {
    constructor(_palettes) {
        this._palettes = _palettes;
        this.colours = ['red', 'white', 'blue'];
        this.labels = []; //['-','-','-'];
        this.title = 'the title';
        this.mapUnits = '';
        this.helpText = 'No comment';
        this.tooltipPlacement = 'right';
        this.generatedLabels = [];
        this.formatValue = function (val, decimalPlaces) {
            if (!val) {
                if (val === 0) {
                    return '0';
                }
                return '-';
            }
            // Add thousand's separator. Source: http://stackoverflow.com/a/2901298
            var parts = val.toString().split(".");
            parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            if (decimalPlaces === 0) {
                return parts[0];
            }
            if ((decimalPlaces !== null) && (decimalPlaces !== undefined) && (parts.length === 2)) {
                parts[1] = parts[1].substr(0, decimalPlaces);
                parts[1] = parts[1].replace(/0+$/, '');
            }
            return parts.join('.');
        };
    }
    set cbPalette(cbp) {
        this._cbPalette = cbp;
        this.generatePalette();
    }
    get cbPalette() { return this._cbPalette; }
    set cbCount(cbc) {
        this._cbCount = cbc;
        this.generatePalette();
    }
    get cbCount() { return this._cbCount; }
    set cbReverse(cbr) {
        this._cbReverse = cbr;
        this.generatePalette();
    }
    get cbReverse() { return this._cbReverse; }
    set cbRange(cbr) {
        this._cbRange = cbr;
        this.generatePalette();
    }
    get cbRange() { return this._cbRange; }
    generateLabels(count) {
        if (!this._cbRange || !count) {
            return null;
        }
        var delta = (this._cbRange[1] - this._cbRange[0]) / (count - 1);
        var result = [];
        var lower = this._cbRange[0];
        let decimalPlaces = Math.max(0, 2 - (+Math.log10(this._cbRange[1] - this._cbRange[0]).toFixed()));
        decimalPlaces = Math.min(decimalPlaces, 10);
        var upper;
        for (let i = 1; i < count; i++) {
            upper = this._cbRange[0] + i * delta;
            result.push(`${this.formatValue(lower, decimalPlaces)}-${this.formatValue(upper, decimalPlaces)}`);
            lower = upper;
        }
        result.push('&ge;' + this._cbRange[1]);
        result.reverse();
        return result;
    }
    generatePalette() {
        if (!this._cbPalette || !this._cbCount) {
            return;
        }
        this._palettes.getPalette(this._cbPalette, this._cbReverse, this._cbCount)
            .subscribe(palette => {
            this.colours = palette.slice().reverse();
            this.generatedLabels = this.labels || this.generateLabels(this.colours.length) || palette;
        });
    }
    ngOnInit() { }
};
MapLegendComponent.ctorParameters = () => [
    { type: PaletteService }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], MapLegendComponent.prototype, "imageURL", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], MapLegendComponent.prototype, "colours", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], MapLegendComponent.prototype, "labels", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MapLegendComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MapLegendComponent.prototype, "mapUnits", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MapLegendComponent.prototype, "helpText", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MapLegendComponent.prototype, "tooltipPlacement", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MapLegendComponent.prototype, "attribution", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MapLegendComponent.prototype, "attributionLink", void 0);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], MapLegendComponent.prototype, "cbPalette", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], MapLegendComponent.prototype, "cbCount", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], MapLegendComponent.prototype, "cbReverse", null);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], MapLegendComponent.prototype, "cbRange", null);
MapLegendComponent = __decorate([
    Component({
        selector: 'map-legend',
        template: `<div class="map-legend panel panel-group">

<strong>{{title}} <span *ngIf="mapUnits" [innerHTML]="'('+mapUnits+')'"></span>
        <span *ngIf="helpText"
              [ngbTooltip]="helpText"
              [placement]="tooltipPlacement"
              container="body">
          <i class="fa fa-info-circle"></i>
        </span>
</strong>

  <div *ngIf="!imageURL">
    <div style="display:table;line-height:15px">
      <div style="display:table-row;padding:0;"
          *ngFor="let colour of colours; let i=index">
        <div class="legend-colour">
          <i class="legend-entry" [ngStyle]="{background:colour}"></i>
        </div>
        <div class="legend-label">
          <span [innerHTML]="generatedLabels[i]"></span>
        </div>
      </div>
    </div>
  </div>

  <div *ngIf="imageURL">
    <img [src]="imageURL">
  </div>
  <p *ngIf="attributionLink">Source: <a [href]="attributionLink">{{attribution || 'details'}}</a></p>
  <p *ngIf="attribution&&!attributionLink">Source: {{attribution}}</p>
</div>
`,
        styles: [`
.map-legend{
  display:block;
  background: white;
}

.legend-colour{
  display:table-cell;
  padding:0px;
}

.legend-label{
  display:table-cell;
  padding:0px 4px 2px 2px;
  font-size:10px;
  vertical-align:middle;
}

.legend-entry {
  float: left;
  width: 15px !important;
  height: 15px !important;
}
`]
    }),
    __metadata("design:paramtypes", [PaletteService])
], MapLegendComponent);

let MapControlComponent = class MapControlComponent {
    constructor(_el, _wrapper) {
        this._el = _el;
        this._wrapper = _wrapper;
        this.position = 'TOP_RIGHT';
    }
    ngOnInit() {
    }
    ngAfterViewInit() {
        this._wrapper.getNativeMap().then((m) => {
            let content = this._el.nativeElement.querySelector('.map-control-content');
            // If content of the map control is not already wrapped in a div, do it
            // now.
            if (content.nodeName !== "DIV") {
                let controlDiv = document.createElement('div');
                controlDiv.appendChild(content);
                content = controlDiv;
            }
            m.controls[window.google.maps.ControlPosition[this.position]].push(content);
        });
    }
};
MapControlComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: GoogleMapsAPIWrapper }
];
__decorate([
    ViewChild('mapControl', { static: false }),
    __metadata("design:type", Component)
], MapControlComponent.prototype, "mapControl", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MapControlComponent.prototype, "position", void 0);
MapControlComponent = __decorate([
    Component({
        selector: 'map-control',
        template: `<div #mapControl class="map-control-content">
  <ng-content></ng-content>
</div>
`,
        styles: [`.map-control-content{
  background: transparent;
}
`]
    }),
    __metadata("design:paramtypes", [ElementRef, GoogleMapsAPIWrapper])
], MapControlComponent);

let DateShifterComponent = class DateShifterComponent {
    constructor() {
        this.interval = 2000;
        this.limits = null;
        this.date = new Date();
        this.dateChange = new EventEmitter();
        this.value = 0;
        this.label = '-';
        this.timer = 0;
        this.dateText = '-';
    }
    ngOnChanges(changes) {
        if (changes.interval) {
            this.startTimer();
        }
    }
    startTimer() {
        if (this.timer) {
            clearInterval(this.timer);
        }
        this.timer = window.setInterval(() => this.tick(), this.interval);
    }
    ngAfterViewInit() {
        this.startTimer();
    }
    reset() {
        this.value = 0;
        this.sliderMoved();
    }
    tick() {
        if (!this.value) {
            return;
        }
        let sign = this.value < 0 ? -1 : 1;
        this.date = new Date(this.date.getTime());
        switch (Math.abs(this.value)) {
            case 1:
                this.date.setDate(this.date.getDate() + sign);
                break;
            case 2:
                this.date.setDate(this.date.getDate() + 7 * sign);
                break;
            case 3:
                this.date.setMonth(this.date.getMonth() + sign);
                break;
            case 4:
                this.date.setFullYear(this.date.getFullYear() + sign);
                break;
        }
        if (this.limits && this.limits.length) {
            if (this.date.getTime() < this.limits[0].getTime()) {
                this.date = this.limits[0];
            }
            if (this.date.getTime() > this.limits[1].getTime()) {
                this.date = this.limits[1];
            }
        }
        this.setDateText();
        this.dateChange.emit(this.date);
    }
    setDateText() {
        this.dateText = this.date.toLocaleDateString();
    }
    sliderMoved() {
        this.setLabel();
    }
    setLabel() {
        if (this.value < 0) {
            this.label = 'back 1';
        }
        else if (this.value > 0) {
            this.label = 'advance 1';
        }
        else {
            this.label = '-';
        }
        switch (Math.abs(this.value)) {
            case 1:
                this.label += 'day';
                break;
            case 2:
                this.label += 'week';
                break;
            case 3:
                this.label += 'month';
                break;
            case 4:
                this.label += 'year';
                break;
        }
    }
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateShifterComponent.prototype, "interval", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], DateShifterComponent.prototype, "limits", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateShifterComponent.prototype, "date", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], DateShifterComponent.prototype, "dateChange", void 0);
DateShifterComponent = __decorate([
    Component({
        selector: 'date-shifter',
        template: `<div>
  <h3>{{dateText}}</h3>
  <input type="range"
         class="form-control"
         min="-4"
         [max]="4"
         step="1"
         [(ngModel)]="value"
         (ngModelChange)="sliderMoved()"
         (mouseup)="reset()">
  <h4>{{label}}</h4>
</div>

  `,
        styles: [``]
    }),
    __metadata("design:paramtypes", [])
], DateShifterComponent);

let OneTimeSplashComponent = class OneTimeSplashComponent {
    constructor(modalService) {
        this.modalService = modalService;
        this.label = 'About';
        this.hideMessage = 'Understood, I don’t need to see this again';
    }
    storageKey() {
        if (!this.application) {
            return null;
        }
        return this.application + '-splash-skip';
    }
    ngAfterViewInit() {
        setTimeout(() => {
            const key = this.storageKey();
            if (key) {
                this.doNotShow = get(key, false);
            }
            if (!this.doNotShow) {
                this.show();
            }
        });
    }
    show() {
        this.current = this.modalService.open(this.splashTemplate, {
            size: 'lg',
            windowClass: this.klass
        });
    }
    close() {
        if (!this.current) {
            return;
        }
        this.current.close();
        this.current = null;
    }
    doNotShowClicked() {
        const key = this.storageKey();
        if (!key) {
            return;
        }
        set(key, this.doNotShow);
    }
};
OneTimeSplashComponent.ctorParameters = () => [
    { type: NgbModal }
];
__decorate([
    ViewChild('splashTemplate', { static: false }),
    __metadata("design:type", Object)
], OneTimeSplashComponent.prototype, "splashTemplate", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], OneTimeSplashComponent.prototype, "application", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], OneTimeSplashComponent.prototype, "label", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], OneTimeSplashComponent.prototype, "hideMessage", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], OneTimeSplashComponent.prototype, "klass", void 0);
OneTimeSplashComponent = __decorate([
    Component({
        selector: 'one-time-splash',
        template: `<ng-template #splashTemplate let-c="close" let-d="dismiss">
  <div class="modal-header">
    <h4 class="modal-title">
      {{label}}</h4>
    <button type="button" class="close" aria-label="Close" (click)="d('Cross click')">
      <span aria-hidden="true">&times;</span>
    </button>
  </div>
  <div class="modal-body">
    <ng-content></ng-content>
  </div>
  <div class="modal-footer">
    <label *ngIf="application">
      <input type="checkbox" [(ngModel)]="doNotShow" (ngModelChange)="doNotShowClicked()">
      &nbsp; {{hideMessage}}
    </label>
    <button type="button" class="btn btn-secondary" (click)="c('Close click')">Close</button>
  </div>
  </ng-template>
`,
        styles: [``]
    }),
    __metadata("design:paramtypes", [NgbModal])
], OneTimeSplashComponent);

let DateElementComponent = class DateElementComponent {
    constructor() {
        this.step = 1;
        this.changed = new EventEmitter();
    }
    ngAfterViewInit() {
    }
    move(n) {
        this.src[this.property] += n;
        this.changed.emit(this.src);
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], DateElementComponent.prototype, "label", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DateElementComponent.prototype, "property", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateElementComponent.prototype, "src", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateElementComponent.prototype, "step", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], DateElementComponent.prototype, "changed", void 0);
DateElementComponent = __decorate([
    Component({
        selector: 'date-element',
        template: `<div class="row no-gutters">
  <div class="col-4">{{label}}</div>
  <div class="col-2">
    <button class="btn btn-secondary btn-sm" (click)="move(-step)">
      <i class="fa fa-angle-left"></i>
    </button>
  </div>
  <div class="col-4"><button class="btn btn-link btn-sm">{{src[property]}}</button></div>
  <div class="col-2">
    <button class="btn btn-secondary btn-sm" (click)="move(step)">
      <i class="fa fa-angle-right"></i>
    </button>
  </div>
</div>
`
    }),
    __metadata("design:paramtypes", [])
], DateElementComponent);

let ShareViewComponent = class ShareViewComponent {
    constructor() {
    }
    ngAfterViewInit() {
    }
};
ShareViewComponent = __decorate([
    Component({
        selector: 'share-view',
        template: `<button class="btn btn-secondary btn-sm"
        ngbTooltip="Share current view"
        placement="right"
        [disabled]="true"
><i class="fa fa-share-alt"></i></button>
`
    }),
    __metadata("design:paramtypes", [])
], ShareViewComponent);

let LocationSearchComponent = class LocationSearchComponent {
    constructor() {
    }
    ngAfterViewInit() {
    }
};
LocationSearchComponent = __decorate([
    Component({
        selector: 'location-search',
        template: `<button class="btn btn-secondary btn-sm"
        ngbTooltip="Location search"
        placement="right"
        [disabled]="true"

><i class="fa fa-search"></i></button>
`
    }),
    __metadata("design:paramtypes", [])
], LocationSearchComponent);

let LayeredMapComponent = class LayeredMapComponent {
    constructor(_zone, staticData, metadata) {
        this._zone = _zone;
        this.staticData = staticData;
        this.metadata = metadata;
        this.layers = [];
        this.markers = [];
        this.mapTypeId = 'roadmap';
        this.layersChange = new EventEmitter();
        this.featureSelected = new EventEmitter();
        this.pointSelected = new EventEmitter();
        this.mapTypePosition = ControlPosition.BOTTOM_LEFT;
        this.streetViewControl = true;
        this.selectedFeature = null;
        // google maps zoom level
        this.zoom = 4;
        this.showMapType = true;
        this.mapTypeOptions = {
            position: ControlPosition.BOTTOM_LEFT
        };
        // initial center position for the map
        this.lat = -22.673858;
        this.lng = 129.815982;
    }
    ngOnChanges(changes) {
        // if zoom in changes...
        if (changes.mapTypePosition) {
            if (this.mapTypePosition === null) {
                this.showMapType = false;
            }
            this.mapTypeOptions = {
                position: this.mapTypePosition
            };
        }
        if (changes.layers) {
            this.setLayerPositions();
        }
        if (changes.markers && this.markers) {
            // deal with existing info windows?
            if (this.infoWindows) {
                this.infoWindows.forEach((w, i) => {
                    this._zone.runOutsideAngular(() => w.close());
                });
            }
            setTimeout(() => {
                // Check and open relevant info windows...
                this.infoWindows.forEach((w, i) => {
                    let m = this.markers[i];
                    if (m.open) {
                        this._zone.runOutsideAngular(() => w.open());
                    }
                    else {
                        this._zone.runOutsideAngular(() => w.close());
                    }
                });
            });
        }
        if (changes.bounds) {
            setTimeout(() => this._bounds = this.bounds);
        }
    }
    ngAfterViewInit() {
    }
    layersChanged(changes) {
    }
    layerAdded(selection) {
        var ex = this.layers.find(l => l.layer === selection.layer);
        if (ex) {
            return;
        }
        var mapped = new MappedLayer();
        mapped.layer = selection.layer;
        mapped.layerType = 'wms';
        mapped.options.legend = true;
        if (selection.layer.options.vectors) {
            this.staticData.get(selection.layer.options.host, selection.layer.options.filepath).subscribe((data) => {
                mapped.staticData = data;
                this.activateLayer(mapped, selection);
            });
        }
        else {
            this.activateLayer(mapped, selection);
        }
    }
    activateLayer(mapped, selection) {
        mapped.update();
        if (selection.action === 'replace') {
            if (selection.filter) {
                this.layers = this.layers.filter(ml => !selection.filter(ml));
            }
            else {
                this.layers = [];
            }
        }
        this.layers = [mapped].concat(this.layers);
        this.setLayerPositions();
        this.layersChange.emit(this.layers);
    }
    setLayerPositions() {
        let ix = 0;
        for (var i = this.layers.length - 1; i >= 0; i--) {
            if (this.layers[i].layerType === 'wms') {
                this.layers[i].options.position = ix;
                ix++;
            }
        }
    }
    extractFeature(f) {
        var geo = f.getGeometry();
        geo = {
            type: 'Point',
            coordinates: geo.get(0)
        };
        var props = {};
        f.forEachProperty((val, prop) => props[prop] = val);
        return {
            type: 'Feature',
            geometry: geo,
            properties: props
        };
    }
    clicked(event) {
        var feature = this.extractFeature(event.feature);
        this.selectedFeature = feature;
        this.featureSelected.emit({ feature: feature });
    }
    circleClicked(ml, feature) {
        this.selectedFeature = feature;
        this.featureSelected.emit({ feature: feature, layer: ml });
    }
    mapClick(event) {
        var coords = event.coords;
        this.pointSelected.emit(coords);
    }
    zoomToBounds(bounds) {
        this._bounds = bounds;
    }
    zoomChanged() {
        this.layers = this.layers.slice();
    }
};
LayeredMapComponent.ctorParameters = () => [
    { type: NgZone },
    { type: StaticDataService },
    { type: MetadataService }
];
__decorate([
    Input(),
    __metadata("design:type", Array)
], LayeredMapComponent.prototype, "layers", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], LayeredMapComponent.prototype, "markers", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], LayeredMapComponent.prototype, "mapTypeId", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], LayeredMapComponent.prototype, "layersChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], LayeredMapComponent.prototype, "featureSelected", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], LayeredMapComponent.prototype, "pointSelected", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], LayeredMapComponent.prototype, "mapTypePosition", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], LayeredMapComponent.prototype, "streetViewControl", void 0);
__decorate([
    ViewChild(AgmMap, { static: false }),
    __metadata("design:type", AgmMap)
], LayeredMapComponent.prototype, "theMap", void 0);
__decorate([
    ViewChildren('infoWindows'),
    __metadata("design:type", QueryList)
], LayeredMapComponent.prototype, "infoWindows", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], LayeredMapComponent.prototype, "zoom", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], LayeredMapComponent.prototype, "showMapType", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], LayeredMapComponent.prototype, "lat", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], LayeredMapComponent.prototype, "lng", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], LayeredMapComponent.prototype, "bounds", void 0);
LayeredMapComponent = __decorate([
    Component({
        selector: 'layered-map',
        template: `<agm-map #theMap
[(latitude)]="lat"
[(longitude)]="lng"
[(zoom)]="zoom"
(zoomChange)="zoomChanged()"
[disableDefaultUI]="false"
[zoomControl]="false"
[mapTypeId]="mapTypeId"
[mapTypeControl]="showMapType"
[mapTypeControlOptions]="mapTypeOptions"
[streetViewControl]="streetViewControl"
scaleControl="true"
[fitBounds]="_bounds"
(mapClick)="mapClick($event)">

<agm-marker *ngFor="let marker of markers"
            [longitude]="marker.loc.lng"
            [latitude]="marker.loc.lat"
            [iconUrl]="marker.iconUrl">
  <agm-info-window #infoWindows [disableAutoPan]="true">
    <strong>{{marker.value}}</strong>
  </agm-info-window>
</agm-marker>

<ng-container *ngFor="let mp of layers.slice()|reverse; let i = index" [ngSwitch]="mp.layerType">
  <wms-layer *ngSwitchCase="'wms'"
    [url]="mp.url"
    [params]="mp.wmsParameters"
    [opacity]="mp.opacity"
    [position]="mp.options.position">
  </wms-layer>
  <agm-data-layer *ngSwitchCase="'vector'"
                [geoJson]="mp.staticData"
                [style]="mp._styleFunc"
                (layerClick)="clicked($event)"

                >
  </agm-data-layer>

  <ng-container *ngSwitchCase="'circle'">
    <agm-circle *ngFor="let f of mp.staticData.features; let j=index"
                [latitude]="f.geometry.coordinates[1]"
                [longitude]="f.geometry.coordinates[0]"
                [radius]="10000000/(zoom*zoom*zoom*zoom)"
                [fillColor]="mp.flattenedSettings?.styles?.fillColor||'black'"
                [fillOpacity]="mp.flattenedSettings?.styles?.fillOpacity||1"
                [strokeColor]="mp.flattenedSettings?.styles?.strokeColor||'black'"
                [strokeOpacity]="mp.flattenedSettings?.styles?.strokeOpacity||1"
                [strokePosition]="0"
                [strokeWeight]="(f===selectedFeature)?3:(mp.flattenedSettings?.styles?.strokeWeight||0.5)"
                (circleClick)="circleClicked(mp,f)"
                >
    </agm-circle>
  </ng-container>

  <!--
  -->
</ng-container>

<!-- for map controls -->
<map-control position="TOP_CENTER">
    <ng-content select=".map-control.top-center"></ng-content>
</map-control>

<map-control position="TOP_LEFT">
    <ng-content select=".map-control.top-left"></ng-content>
</map-control>

<map-control position="TOP_RIGHT">
    <ng-content select=".map-control.top-right"></ng-content>
</map-control>

<map-control position="LEFT_TOP">
    <ng-content select=".map-control.left-top"></ng-content>
</map-control>

<map-control position="RIGHT_TOP">
    <ng-content select=".map-control.right-top"></ng-content>
</map-control>

<map-control position="LEFT_CENTER">
    <ng-content select=".map-control.left-center"></ng-content>
</map-control>

<map-control position="RIGHT_CENTER">
    <ng-content select=".map-control.right-center"></ng-content>
</map-control>

<map-control position="LEFT_BOTTOM">
    <ng-content select=".map-control.left-bottom"></ng-content>
</map-control>

<map-control position="RIGHT_BOTTOM">
    <ng-content select=".map-control.right-bottom"></ng-content>
</map-control>

<map-control position="BOTTOM_CENTER">
    <ng-content select=".map-control.bottom-center"></ng-content>
</map-control>

<map-control position="BOTTOM_LEFT">
    <ng-content select=".map-control.bottom-left"></ng-content>
</map-control>

<map-control position="BOTTOM_RIGHT">
    <ng-content select=".map-control.bottom-right"></ng-content>
</map-control>

</agm-map>

`
    }),
    __metadata("design:paramtypes", [NgZone,
        StaticDataService,
        MetadataService])
], LayeredMapComponent);

let ZoomLayerComponent = class ZoomLayerComponent {
    constructor() {
    }
    ngAfterViewInit() {
    }
    zoomToLayer() {
        if (this.layer.layer.spatialExtent) {
            console.log('Zoom to layer');
            this.layer.layer.spatialExtent.subscribe(b => {
                this.map.zoomToBounds(Object.assign({}, b));
            });
        }
        else {
            console.log('Zoom full');
            this.map.zoomToBounds(Object.assign({}, this.fullBounds));
        }
    }
};
__decorate([
    Input(),
    __metadata("design:type", LayeredMapComponent)
], ZoomLayerComponent.prototype, "map", void 0);
__decorate([
    Input(),
    __metadata("design:type", MappedLayer)
], ZoomLayerComponent.prototype, "layer", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], ZoomLayerComponent.prototype, "fullBounds", void 0);
ZoomLayerComponent = __decorate([
    Component({
        selector: 'zoom-layer',
        template: `<button type="button" [disabled]="!layer" class="btn btn-secondary btn-sm"
        ngbTooltip="Zoom to selected layer"
        placement="right"
        (click)="zoomToLayer()"
><i class="fa fa-compress"></i>
</button>
`
    }),
    __metadata("design:paramtypes", [])
], ZoomLayerComponent);

let ZoomFullComponent = class ZoomFullComponent {
    constructor() {
    }
    ngAfterViewInit() {
    }
    zoomToBounds() {
        this.map.zoomToBounds(Object.assign({}, this.bounds));
    }
};
__decorate([
    Input(),
    __metadata("design:type", LayeredMapComponent)
], ZoomFullComponent.prototype, "map", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], ZoomFullComponent.prototype, "bounds", void 0);
ZoomFullComponent = __decorate([
    Component({
        selector: 'zoom-full',
        template: `<button class="btn btn-secondary btn-sm"
        ngbTooltip="Zoom to full extent"
        placement="right"
        (click)="zoomToBounds()"
><i class="fa fa-arrows-alt"></i></button>
`
    }),
    __metadata("design:paramtypes", [])
], ZoomFullComponent);

let ZoomOutComponent = class ZoomOutComponent {
    constructor() {
        this.minZoom = 1;
    }
    ngAfterViewInit() {
    }
    zoomOut() {
        if (!this.map) {
            return;
        }
        this.map.zoom = Math.max(this.minZoom, this.map.zoom - 1);
    }
};
__decorate([
    Input(),
    __metadata("design:type", LayeredMapComponent)
], ZoomOutComponent.prototype, "map", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], ZoomOutComponent.prototype, "minZoom", void 0);
ZoomOutComponent = __decorate([
    Component({
        selector: 'zoom-out',
        template: `<button class="btn btn-secondary btn-sm"
        ngbTooltip="Zoom out"
        placement="right"
        (click)="zoomOut()"
><i class="fa fa-minus"></i></button>`
    }),
    __metadata("design:paramtypes", [])
], ZoomOutComponent);

let ZoomInComponent = class ZoomInComponent {
    constructor() {
        this.maxZoom = 32;
    }
    ngAfterViewInit() {
    }
    zoomIn() {
        if (!this.map) {
            return;
        }
        this.map.zoom = Math.min(this.maxZoom, this.map.zoom + 1);
    }
};
__decorate([
    Input(),
    __metadata("design:type", LayeredMapComponent)
], ZoomInComponent.prototype, "map", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], ZoomInComponent.prototype, "maxZoom", void 0);
ZoomInComponent = __decorate([
    Component({
        selector: 'zoom-in',
        template: `<button class="btn btn-secondary btn-sm"
        ngbTooltip="Zoom in"
        placement="right"
        (click)="zoomIn()"
><i class="fa fa-plus"></i></button>`
    }),
    __metadata("design:paramtypes", [])
], ZoomInComponent);

let CycleBaseMapComponent = class CycleBaseMapComponent {
    constructor() {
        this.maxZoom = 32;
        this.baseLayers = [
            {
                map_type_id: 'roadmap',
                label: 'Road Map'
            },
            {
                map_type_id: 'satellite',
                label: 'Satellite'
            }
        ];
        this.tooltip = 'Toggle base layer';
    }
    ngAfterViewInit() {
    }
    ngOnChanges(changes) {
        if (this.baseLayers && !this.baseLayer) {
            this.baseLayer = this.baseLayers[0];
        }
    }
    toggleBaseLayer() {
        if (!this.map) {
            return;
        }
        let current = this.baseLayers.findIndex(l => l.map_type_id === this.baseLayer.map_type_id);
        let next = (current + 1) % this.baseLayers.length;
        this.baseLayer = this.baseLayers[next];
        this.map.mapTypeId = this.baseLayer ?
            this.baseLayer.map_type_id :
            null;
    }
};
__decorate([
    Input(),
    __metadata("design:type", LayeredMapComponent)
], CycleBaseMapComponent.prototype, "map", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], CycleBaseMapComponent.prototype, "maxZoom", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], CycleBaseMapComponent.prototype, "baseLayers", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CycleBaseMapComponent.prototype, "baseLayer", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CycleBaseMapComponent.prototype, "tooltip", void 0);
CycleBaseMapComponent = __decorate([
    Component({
        selector: 'cycle-base-map',
        template: `<button class="btn btn-secondary btn-sm" (click)="toggleBaseLayer()" [ngbTooltip]="tooltip"
                     placement="right">
  <i class="fa" [ngClass]="baseLayer?.label==='Road Map'?'fa-road':'fa-globe'"></i>
</button>`
    }),
    __metadata("design:paramtypes", [])
], CycleBaseMapComponent);

let CycleOpacityComponent = class CycleOpacityComponent {
    constructor() {
        this.maxZoom = 32;
        this.tooltip = 'Adjust transparency of grid layer';
        this.layerOpacity = 1.0;
        this.step = 0.4;
    }
    ngAfterViewInit() {
    }
    ngOnChanges(changes) {
        if (this.map) {
            this.map.layersChange.subscribe(() => this.updateLayers());
        }
    }
    cycleTransparency() {
        this.layerOpacity -= this.step;
        if (this.layerOpacity < 0) {
            this.layerOpacity = 1.0;
        }
        this.updateLayers();
    }
    updateLayers() {
        this.map.layers.forEach(l => l.opacity = this.layerOpacity);
    }
};
__decorate([
    Input(),
    __metadata("design:type", LayeredMapComponent)
], CycleOpacityComponent.prototype, "map", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CycleOpacityComponent.prototype, "maxZoom", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CycleOpacityComponent.prototype, "tooltip", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CycleOpacityComponent.prototype, "layerOpacity", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CycleOpacityComponent.prototype, "step", void 0);
CycleOpacityComponent = __decorate([
    Component({
        selector: 'cycle-opacity',
        template: `<button class="btn btn-secondary btn-sm"
                     (click)="cycleTransparency()"
                     [ngbTooltip]="tooltip"
                     placement="right">
<i class="fa" [ngClass]="(layerOpacity<0.5)?'fa-circle-o':((layerOpacity<0.9)?'fa-adjust':'fa-circle')"></i>
</button>`
    }),
    __metadata("design:paramtypes", [])
], CycleOpacityComponent);

let ButtonBarComponent = class ButtonBarComponent {
    constructor() {
    }
    ngAfterViewInit() {
    }
};
ButtonBarComponent = __decorate([
    Component({
        selector: 'button-bar',
        template: `<div class="button-bar bb-vertical">
  <ng-content></ng-content>
</div>

`,
        styles: [`
`]
    }),
    __metadata("design:paramtypes", [])
], ButtonBarComponent);

let TimeseriesChartComponent = class TimeseriesChartComponent {
    constructor(_element) {
        this._element = _element;
        this.timeSeries = [];
        this.marginLeft = 40;
        this.marginRight = 10;
        this.marginTop = 0;
        this.marginBottom = 20;
        this.titlefont = undefined;
    }
    ngAfterViewInit() {
        this.draw();
    }
    ngOnChanges(changes) {
        this.draw();
    }
    draw() {
        var node = this._element.nativeElement.querySelector('.our-chart');
        purge(node);
        if (!this.timeSeries || !this.timeSeries.length) {
            return;
        }
        const seriesUnits = this.timeSeries.map(ts => ts.units);
        let commonUnits;
        if (seriesUnits.every(u => u === seriesUnits[0])) {
            commonUnits = seriesUnits[0];
        }
        var layout = {
            margin: {
                t: this.marginTop + (this.title ? 30 : 0),
                l: this.marginLeft,
                r: this.marginRight,
                b: this.marginBottom
            },
            yaxis: {
                fixedrange: true,
                title: commonUnits
            },
            width: 320,
            height: 200,
            title: this.title || undefined,
            titlefont: this.titlefont
        };
        plot(node, this.timeSeries.map(ts => {
            const nonNullCount = ts.values.filter(v => !isNaN(v)).length;
            const mode = ((ts.style !== 'bar') && (nonNullCount < 365)) ?
                'lines+markers' :
                undefined;
            const suffix = commonUnits ? '' : ` (${ts.units})`;
            return {
                type: (ts.style === 'bar') ? 'bar' : undefined,
                mode: mode,
                x: ts.dates,
                y: ts.values,
                name: ts.label + suffix
            };
        }), layout);
    }
};
TimeseriesChartComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], TimeseriesChartComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], TimeseriesChartComponent.prototype, "timeSeries", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], TimeseriesChartComponent.prototype, "marginLeft", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], TimeseriesChartComponent.prototype, "marginRight", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], TimeseriesChartComponent.prototype, "marginTop", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], TimeseriesChartComponent.prototype, "marginBottom", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], TimeseriesChartComponent.prototype, "titlefont", void 0);
TimeseriesChartComponent = __decorate([
    Component({
        selector: 'timeseries-chart',
        template: `<div class="our-chart">
</div>
`
    }),
    __metadata("design:paramtypes", [ElementRef])
], TimeseriesChartComponent);

let FeatureTableComponent = class FeatureTableComponent {
    constructor() {
        this.styles = {};
        this._keys = Object.keys;
    }
    ngAfterViewInit() {
    }
    ngOnChanges(changes) {
        if (!this.styles) {
            this.styles = {};
        }
    }
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], FeatureTableComponent.prototype, "feature", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FeatureTableComponent.prototype, "styles", void 0);
FeatureTableComponent = __decorate([
    Component({
        selector: 'feature-table',
        template: `<table *ngIf="feature" class="table table-striped table-sm feature-table">
  <thead>
    <tr>
      <td><strong>Property</strong></td>
      <td><strong>Value</strong></td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Geometry</strong></td>
      <td>{{feature.geometry.type}}</td>
    </tr>
    <tr *ngFor="let prop of _keys(feature.properties)">
      <td><strong>{{prop}}</strong></td>
      <td *ngIf="!styles||!styles[prop]">{{feature.properties[prop]}}</td>
      <td *ngIf="styles&&styles[prop]">
        <a *ngIf="styles[prop].hyperlink" target="_blank" [href]="feature.properties[prop]">
          {{feature.properties[prop]}}
        </a>
      </td>
    </tr>
  </tbody>
</table>`,
        styles: [`.feature-table{
  max-width:300px;
}`]
    }),
    __metadata("design:paramtypes", [])
], FeatureTableComponent);

let CollapsibleMapControlComponent = class CollapsibleMapControlComponent {
    constructor() {
    }
    ngAfterViewInit() {
    }
};
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], CollapsibleMapControlComponent.prototype, "isCollapsed", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CollapsibleMapControlComponent.prototype, "heading", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CollapsibleMapControlComponent.prototype, "direction", void 0);
CollapsibleMapControlComponent = __decorate([
    Component({
        selector: 'collapsible-map-control',
        template: `<div class="card map-control collapsible-control">
    <a (click)="isCollapsed = !isCollapsed">
      <div class="card-header">
        <h6 class="mb-0">
          {{heading}}
          <span *ngIf="isCollapsed" class="float-right fa fa-caret-up
            collapse-arrow" aria-hidden="true"></span>
          <span *ngIf="!isCollapsed" class="float-right fa fa-caret-down
            collapse-arrow" aria-hidden="true"></span>
        </h6>
      </div>
    </a>

    <div class="ngbCollapse" [ngbCollapse]="isCollapsed">
      <ng-content></ng-content>
    </div>
  </div>
`,
        styles: [`.collapsible-control{
  margin:3px;
}`]
    }),
    __metadata("design:paramtypes", [])
], CollapsibleMapControlComponent);

let BaseMapSelectionComponent = class BaseMapSelectionComponent {
    constructor() {
    }
    ngAfterViewInit() {
    }
};
BaseMapSelectionComponent = __decorate([
    Component({
        selector: 'base-map-selection',
        template: `<p>base-map-selection Component</p>`
    }),
    __metadata("design:paramtypes", [])
], BaseMapSelectionComponent);

let SimpleTreeNodeComponent = class SimpleTreeNodeComponent {
    constructor() {
        this.options = {};
        this.nodeSelected = new EventEmitter();
    }
    ngOnChanges(changes) {
        this.evalState();
    }
    ngAfterViewInit() {
    }
    treeClick(event) {
        event.stopPropagation();
        event.preventDefault();
        if (!this.tree) {
            return;
        }
        this.tree.expanded = !this.tree.expanded;
        this.evalState();
        if (this.tree.actions && this.tree.actions.length) {
            this.tree.actions[0].action(this.tree);
        }
        else {
            this.nodeSelected.emit(this.tree);
        }
    }
    evalState() {
        this.expanded = this.tree &&
            this.tree.expanded &&
            this.tree.children &&
            this.tree.children.length > 0;
        this.leaf = this.tree && (!this.tree.children || this.tree.children.length === 0);
        this.collapsed = this.tree &&
            !this.tree.expanded &&
            this.tree.children &&
            this.tree.children.length > 0;
        if (this.expanded) {
            this.icon = this.options.expandedIcon;
        }
        else if (this.collapsed) {
            this.icon = this.options.collapsedIcon;
        }
        else {
            this.icon = this.options.leafIcon;
        }
    }
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], SimpleTreeNodeComponent.prototype, "tree", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SimpleTreeNodeComponent.prototype, "options", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], SimpleTreeNodeComponent.prototype, "nodeSelected", void 0);
SimpleTreeNodeComponent = __decorate([
    Component({
        selector: 'simple-tree-node',
        template: `<a href="#" 
                (click)="treeClick($event)"
                [ngClass]="tree.klass"><i [ngClass]="icon"></i>
  &nbsp;
  <span ngbTooltip="{{tree.tooltip | async}}"
        placement="right"
        container="body">{{tree.label}}</span>
  <span *ngIf="tree.actions"
        class="float-right">
      &nbsp;
      <i *ngFor="let a of tree.actions"
       [ngClass]="a.icon"
       ngbTooltip="{{a.tooltip | async}}"
       placement="right"
       container="body"
       (click)="a.action(tree)">&nbsp;</i>
  </span>
</a>
`
    })
], SimpleTreeNodeComponent);

let SimpleTreeComponent = class SimpleTreeComponent {
    constructor() {
        this.showTop = true;
        this.collapsedIcon = 'fa fa-caret-right';
        this.expandedIcon = 'fa fa-caret-down';
        this.leafIcon = 'fa fa-minus';
        this.nodeSelected = new EventEmitter();
        this.options = {};
    }
    ngAfterViewInit() {
    }
    ngOnChanges(changes) {
        if (changes.options) {
            return;
        }
        this.options = {
            collapsedIcon: this.collapsedIcon,
            expandedIcon: this.expandedIcon,
            leafIcon: this.leafIcon
        };
    }
    childSelected(node) {
        this.nodeSelected.emit(node);
    }
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], SimpleTreeComponent.prototype, "tree", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], SimpleTreeComponent.prototype, "showTop", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], SimpleTreeComponent.prototype, "inner", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SimpleTreeComponent.prototype, "collapsedIcon", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SimpleTreeComponent.prototype, "expandedIcon", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SimpleTreeComponent.prototype, "leafIcon", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], SimpleTreeComponent.prototype, "nodeSelected", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SimpleTreeComponent.prototype, "options", void 0);
SimpleTreeComponent = __decorate([
    Component({
        selector: 'simple-tree',
        template: `<div *ngIf="tree&&tree.visible" class="simple-tree">

  <div *ngIf="inner">
    <li ><simple-tree-node [tree]="tree"
                           [options]="options"
                           (nodeSelected)="childSelected($event)"></simple-tree-node>
      <ul *ngIf="tree.children&&tree.expanded" class="inner-list">
        <simple-tree *ngFor="let t of tree.children" [tree]="t" [inner]="true"
                    (nodeSelected)="childSelected($event)"
                    [options]="options"></simple-tree>
      </ul>
    </li>
  </div>

  <div *ngIf="!inner&&showTop">
    <ul class="outer-list">
      <li><simple-tree-node [tree]="tree" [options]="options"
        (nodeSelected)="childSelected($event)"></simple-tree-node>
        <ul *ngIf="tree.children&&tree.expanded" class="inner-list">
            <simple-tree *ngFor="let t of tree.children" [tree]="t" [inner]="true"
            (nodeSelected)="childSelected($event)"
            [options]="options"></simple-tree>
        </ul>
      </li>
    </ul>
  </div>

  <div *ngIf="!inner&&!showTop">
      <ul *ngIf="tree.children&&tree.expanded" class="outer-list">
          <simple-tree *ngFor="let t of tree.children" [tree]="t" [inner]="true"
          (nodeSelected)="childSelected($event)"
          [options]="options"></simple-tree>
      </ul>
    </div>
  
</div>
`,
        styles: [`
.simple-tree ul{
  list-style-type: none
}

ul.outer-list{
  padding-left:5px;
}

ul.inner-list{
  padding-left:15px;
}`]
    }),
    __metadata("design:paramtypes", [])
], SimpleTreeComponent);

let CatalogComponent = class CatalogComponent {
    constructor(filterService, metadata) {
        this.metadata = metadata;
        this.showPlaceholders = true;
        this.defaultAction = 'add';
        this.layerActions = [];
        this.layerSelected = new EventEmitter();
        this.collapsedIcon = 'fa fa-caret-right';
        this.expandedIcon = 'fa fa-caret-down';
        this.leafIcon = 'fa fa-minus';
        this.layers = [];
        this.tree = { label: 'no catalog loaded' };
        this.filterText = '';
        this.filterService = filterService;
    }
    ngAfterViewInit() {
        if (this.catalog) {
            this.buildTree();
        }
    }
    ngOnChanges(changes) {
        if (changes.catalog && this.catalog) {
            this.filterText = '';
            this.buildTree();
            this.highlightLayers([], this.tree);
        }
    }
    buildTree() {
        let self = this;
        this.layers = [];
        var cat = this.catalog;
        var tree = {
            label: cat.name,
            expanded: true,
            visible: true,
        };
        var deferredLayers = cat.themes.map(t => t.layers.filter(l => l.path && !l.skip)).reduce((l, r) => l.concat(r), []);
        var deferredThemes = cat.themes.filter(t => t.path && !t.skip);
        const treeActions = this.layerActions.map(la => {
            return {
                icon: la.icon,
                tooltip: la.tooltip,
                action: (node) => this.layerClick(node.data, la.action)
            };
        });
        const layerToTree = (l) => {
            let result = {
                label: l.name,
                data: l,
                visible: true,
                actions: treeActions
            };
            const tmp = new MappedLayer();
            tmp.layer = l;
            tmp.update();
            if (l.description) {
                result.tooltip = of(l.description);
            }
            else {
                result.tooltip = this.metadata.getMetadata(tmp).pipe(map(meta => meta[l.descriptionField || 'long_name']));
            }
            return result;
        };
        function themeToTree(t) {
            return {
                label: t.name,
                expanded: false,
                visible: true,
                children: t.layers.filter(l => !l.path && !l.skip)
                    .filter(l => self.showPlaceholders || !l.placeholder)
                    .map(layerToTree)
            };
        }
        tree.children = cat.themes.filter(t => !t.path && !t.skip).map(themeToTree);
        function findParent(path) {
            var components = path.split('/');
            var parent = tree;
            var index = -1;
            for (var component of components) {
                var split = component.split('@');
                component = split[0];
                index = -1;
                if (split.length > 1) {
                    index = +split[1];
                }
                var found = false;
                for (var n of parent.children) {
                    if (n.label === component) {
                        parent = n;
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    var newNode = {
                        label: component,
                        expanded: false,
                        visible: true,
                        children: []
                    };
                    addChild(parent, newNode, index);
                    parent = newNode;
                }
            }
            return [parent, index];
        }
        function addChild(parent, child, i) {
            if (i < 0) {
                parent.children.push(child);
            }
            else {
                parent.children.splice(i, 0, child);
            }
        }
        deferredThemes.forEach(t => {
            var [parent, index] = findParent(t.path);
            addChild(parent, themeToTree(t), index);
        });
        deferredLayers.forEach(l => {
            var [parent, index] = findParent(l.path);
            addChild(parent, layerToTree(l), index);
        });
        this.tree = tree;
    }
    layerClick(l, action) {
        var selection = {
            layer: l,
            action: action
        };
        this.layerSelected.emit(selection);
    }
    nodeSelected(e) {
        if (!e.data) {
            return;
        }
        var layer = e.data;
        this.layerClick(layer, this.defaultAction);
    }
    activeLayers(layers) {
        this.highlightLayers(layers, this.tree);
    }
    highlightLayers(layers, tree) {
        tree.klass = null;
        if (tree.data && (layers.indexOf(tree.data) >= 0)) {
            tree.klass = 'active-layer';
            return true;
        }
        if (tree.children) {
            let activeChild = false;
            for (let i = 0; i < tree.children.length; i++) {
                activeChild = this.highlightLayers(layers, tree.children[i]) || activeChild;
            }
            if (activeChild) {
                tree.klass = 'active-child';
            }
            tree.klass = (tree.klass || '') + ' theme';
            return activeChild;
        }
        return false;
    }
};
CatalogComponent.ctorParameters = () => [
    { type: TreeFilterService },
    { type: MetadataService }
];
__decorate([
    Input(),
    __metadata("design:type", Catalog)
], CatalogComponent.prototype, "catalog", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CatalogComponent.prototype, "showPlaceholders", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CatalogComponent.prototype, "defaultAction", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], CatalogComponent.prototype, "layerActions", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], CatalogComponent.prototype, "layerSelected", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CatalogComponent.prototype, "collapsedIcon", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CatalogComponent.prototype, "expandedIcon", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CatalogComponent.prototype, "leafIcon", void 0);
CatalogComponent = __decorate([
    Component({
        selector: 'catalog',
        template: `<div class="input-group">
  <span class="input-group-btn">
            <button class="btn" type="button" [disabled]="!filterText"
              (click)="filterText = ''">
            <i *ngIf="filterText"class="fa fa-times" aria-hidden="true"></i>
            <i *ngIf="!filterText"class="fa fa-search" aria-hidden="true"></i>
            </button>
  </span>
  <input #filterInput type="text" class="form-control" placeholder="Catalog search..."
  [(ngModel)]="filterText"/>
</div>

<simple-tree 
  [tree]="this.filterService.filterTree(tree, filterText)"
  [showTop]="false"
  [leafIcon]="leafIcon"
  [collapsedIcon]="collapsedIcon"
  [expandedIcon]="expandedIcon"
  (nodeSelected)="nodeSelected($event)">
</simple-tree>
`,
        styles: [`
.node-name{
  font-size:1em;
}
`]
    }),
    __metadata("design:paramtypes", [TreeFilterService, MetadataService])
], CatalogComponent);

const MILLISECONDS_PER_DAY = 24 * 60 * 60 * 1000;
let DateSelectionComponent = class DateSelectionComponent {
    constructor(timeUtils) {
        this.timeUtils = timeUtils;
        this.dateChange = new EventEmitter();
        this.style = 'arrows';
        this.stepDays = 1;
        this.referenceDate = null;
        this.need = {
            day: true,
            month: true,
            year: true
        };
        this.atMax = false;
        this.atMin = false;
    }
    ngAfterViewInit() {
    }
    ngOnChanges(changes) {
        if (changes.minDate) {
            this.minDateStruct = this.timeUtils.convertDate(this.minDate);
        }
        if (changes.maxDate) {
            this.maxDateStruct = this.timeUtils.convertDate(this.maxDate);
        }
        if (changes.date) {
            this.dateStruct = this.timeUtils.convertDate(this.date);
        }
        if (changes.timestep) {
            this.assessDateComponents();
        }
        this.checkLimits();
    }
    dateStructChanged() {
        this.date = new Date(Date.UTC(this.dateStruct.year, this.dateStruct.month - 1, this.dateStruct.day));
        // this.date.setUTCFullYear(this.dateStruct.year)
        // this.date.setUTCMonth(this.dateStruct.month-1)
        // this.date.setUTCDate(this.dateStruct.day);
        this.checkReference();
        this.dateChange.emit(this.date);
    }
    assessDateComponents() {
        this.need.day = this.need.month = this.need.year = true;
        if (this.timestep === 'daily') {
            return;
        }
        this.need.day = false;
        if (this.timestep === 'annual') {
            this.need.month = false;
        }
    }
    move(n) {
        this.date = new Date(this.date && this.date.getTime());
        this.date.setDate(this.date.getDate() + n);
        this.onDateChanged();
        this.dateChange.emit(this.date);
    }
    onDateChanged() {
        this.checkLimits();
    }
    checkLimits() {
        this.atMax = this.timeUtils.datesEqual(this.dateStruct, this.maxDateStruct);
        this.atMin = this.timeUtils.datesEqual(this.dateStruct, this.minDateStruct);
    }
    // TODO not enforcing limits etc...
    checkReference() {
        if (!this.referenceDate) {
            return;
        }
        let refComponents = InterpolationService.interpolate(this.referenceDate, {
            year: this.date.getFullYear(),
            month: this.date.getMonth() + 1,
            date: this.date.getDate()
        }).split('-').map(s => +s);
        let currentRef = new Date(Date.UTC(refComponents[0], refComponents[1] - 1, refComponents[2]));
        console.log('currentRef', currentRef);
        console.log('currentDate', this.date);
        let timeSpan = MILLISECONDS_PER_DAY * this.stepDays;
        let days = (this.date.getTime() - currentRef.getTime()) / timeSpan;
        this.date = new Date(currentRef.getTime() + Math.round(days) * timeSpan);
        this.dateStruct = this.timeUtils.convertDate(this.date);
    }
};
DateSelectionComponent.ctorParameters = () => [
    { type: TimeUtilsService }
];
__decorate([
    Input(),
    __metadata("design:type", Date)
], DateSelectionComponent.prototype, "date", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], DateSelectionComponent.prototype, "dateChange", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DateSelectionComponent.prototype, "timestep", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateSelectionComponent.prototype, "minDate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateSelectionComponent.prototype, "maxDate", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DateSelectionComponent.prototype, "style", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateSelectionComponent.prototype, "stepDays", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DateSelectionComponent.prototype, "referenceDate", void 0);
DateSelectionComponent = __decorate([
    Component({
        selector: 'date-selection',
        template: `<div class="date-control container-fluid">
  <div *ngIf="style!=='arrows'" class="row no-gutters">
    <div class="col-8 form-group-inline">
        <div class="input-group input-group-sm">
          <input class="form-control form-control-sm" placeholder="yyyy-mm-dd"
                 name="dp" [(ngModel)]="dateStruct" (ngModelChange)="dateStructChanged()"
                 ngbDatepicker #d="ngbDatepicker"
                 [maxDate]="maxDateStruct" [minDate]="minDateStruct">
          <div class="input-group-addon" (click)="d.toggle()" >
            <i class="fa fa-calendar"></i>
          </div>
        </div>
      </div>

    <!--
      <div class="col-2" >
        <button class="btn btn-secondary btn-sm" [disabled]="atMax"
                (click)="move(1)"><i class="fa fa-chevron-right"></i></button>
      </div>
    -->
  </div>

  <div *ngIf="style==='arrows'">
    <date-element *ngIf="need.day"   [src]="dateStruct" [property]="'day'" [label]="'Day'"
                  [step]="stepDays"
                  (changed)="dateStructChanged()"></date-element>
    <date-element *ngIf="need.month" [src]="dateStruct" [property]="'month'" [label]="'Month'"
                  (changed)="dateStructChanged()"></date-element>
    <date-element *ngIf="need.year"  [src]="dateStruct" [property]="'year'" [label]="'Year'"
                  (changed)="dateStructChanged()"></date-element>
  </div>
</div>
`
    }),
    __metadata("design:paramtypes", [TimeUtilsService])
], DateSelectionComponent);

let LayerPropertiesComponent = class LayerPropertiesComponent {
    constructor(pointSelectionService) {
        this.pointSelectionService = pointSelectionService;
        this.getKeys = Object.keys;
        this.propertyChanged = new EventEmitter();
        this.tooltipPlacement = 'right';
        this.availableTags = null;
        this.tags = {};
        this.pointVariables = [];
    }
    get publication() {
        if (!this.layer || !this.layer.layer || !this.layer.layer.publications) {
            return null;
        }
        return this.layer.layer.publications[this.layer.options.publication || 0];
    }
    ngAfterViewInit() {
        // if(this.layer){
        //   this.publication=this.layer.layer.publications[this.layer.options.publication||0];
        // }
        // if (this.layer &&
        //   this.layer.layer.options.smallExtent &&
        //   !this.layer.spatialExtent) {
        //   this.loadExtent();
        // }
        if (this.map) {
            this.selectedFeatureSubscription =
                this.map.featureSelected.subscribe((evt) => this.featureSelected(evt));
        }
        if (this.layer) {
            setTimeout(() => {
                this.findTags();
            });
        }
    }
    ngOnDestroy() {
        if (this.selectedFeatureSubscription) {
            this.selectedFeatureSubscription.unsubscribe();
        }
    }
    featureSelected(evt) {
        if (!this.publication || !this.publication.pointdata) {
            return;
        }
        this.selectedFeature = evt.feature;
        // No guarantee that this is from the same layer!!!!
        this.queryPointData();
    }
    publicationSelected(idx) {
        this.layer.options.publication = idx;
        // this.publication=this.layer.layer.publications[idx];
        if (this.publication.pointdata) {
            this.pointSelectionChanged();
            this.updateVariables();
        }
        this.update(idx);
    }
    updateLayer() {
        this.layer.options.tags = this.tags;
        this.layer.update();
        this.propertyChanged.emit(this.layer);
    }
    update(event) {
        this.updateLayer();
        setTimeout(() => {
            this.findTags();
        });
    }
    processTags(tags) {
        if (!tags) {
            return null;
        }
        let result = {};
        Object.keys(tags).forEach(k => {
            let values = tags[k];
            result[k] = values.map(v => {
                let vAsTag = v;
                if (vAsTag.value && vAsTag.label) {
                    return vAsTag;
                }
                let vAsString = v;
                return {
                    value: vAsString,
                    label: vAsString
                };
            });
        });
        return result;
    }
    findTags() {
        if (this.publication.pointdata) {
            this.availableTags = this.processTags(this.publication.pointdata.tags);
        }
        else {
            this.availableTags = this.processTags(this.layer.flattenedSettings.options.tags);
        }
        this.setDefaultTags();
    }
    tagChanged(t) {
        this.queryPointData();
        this.update(null);
    }
    setDefaultTags() {
        if (!this.availableTags) {
            return;
        }
        Object.keys(this.availableTags).forEach(tag => {
            if (this.tags[tag] === undefined) {
                this.tags[tag] = this.availableTags[tag][0].value;
            }
        });
        this.updateLayer();
    }
    zoomToExtent() {
        if (!this.map) {
            console.log('NO MAP!');
            return;
        }
        this.map.lat = this.layer.layer.lat;
        this.map.lng = this.layer.layer.lon;
        this.map.zoom = this.layer.layer.zoom || 13;
    }
    pointSelection() {
        return {
            catalog: this.publication.pointdata,
            variable: this.selectedVariable,
            feature: this.selectedFeature,
            tags: this.tags
        };
    }
    queryPointData() {
        let pointdata = this.publication && this.publication.pointdata;
        if (!this.publication || !this.publication.pointdata) {
            return;
        }
        this.pointSelectionChanged();
        this.updateVariables();
    }
    updateVariables() {
        let sel = this.pointSelection();
        this.pointSelectionService.timeseriesVariables(sel).subscribe(variables => {
            this.pointVariables = variables.slice();
            if (this.publication.pointdata.exclude) {
                this.pointVariables = this.pointVariables.filter(v => {
                    return !this.publication.pointdata.exclude.some(pattern => {
                        return !!v.value.match(pattern);
                    });
                });
            }
            if (!this.pointVariables.length) {
                this.selectedVariable = null;
            }
            else if (this.pointVariables.findIndex(t => t.value === this.selectedVariable) < 0) {
                if (this.pointVariables.findIndex(t => t.value === this.publication.pointdata.defaultVariable) >= 0) {
                    this.selectedVariable = this.publication.pointdata.defaultVariable;
                }
                else {
                    this.selectedVariable = this.pointVariables[0].value;
                }
            }
            this.pointSelectionChanged();
        });
    }
    pointSelectionChanged() {
        this.pointSelectionService.pointSelection(this.pointSelection());
    }
};
LayerPropertiesComponent.ctorParameters = () => [
    { type: PointSelectionService }
];
__decorate([
    Input(),
    __metadata("design:type", MappedLayer)
], LayerPropertiesComponent.prototype, "layer", void 0);
__decorate([
    Input(),
    __metadata("design:type", LayeredMapComponent)
], LayerPropertiesComponent.prototype, "map", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], LayerPropertiesComponent.prototype, "propertyChanged", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], LayerPropertiesComponent.prototype, "tooltipPlacement", void 0);
LayerPropertiesComponent = __decorate([
    Component({
        selector: 'layer-properties',
        template: `<div class="container-fluid">
  <p><strong>{{layer?.title}}</strong>
    <span *ngIf="layer.description()" 
    [ngbTooltip]="layer.description()"
    [placement]="tooltipPlacement"
    class="layer-info-target"
    container="body">
  &nbsp;<i class="fa fa-info-circle"></i>
  </span>
  &nbsp;<span *ngIf="layer.interpolatedDownloadURL">
    <small><a target="_blank" 
              [href]="layer.interpolatedDownloadURL"
              [ngbTooltip]="'Download data'"
              container="body">
      <i class="fa fa-download"></i>
    </a></small>
  </span>
  </p>

  <div *ngIf="layer?.layer.publications.length>1">
    <span *ngIf="layer.layer.publications[0].timestep">Timestep </span>
    <span *ngIf="!layer.layer.publications[0].timestep">{{ layer.layer.options.publicationLabel || 'Variable' }} </span>
    <select [(ngModel)]="layer.options.publication" (ngModelChange)="publicationSelected($event)">
      <option *ngFor="let p of layer.layer.publications; let i=index" [ngValue]="i">{{p.label || p.timestep}}</option>
    </select>
  </div>
  <div *ngIf="layer?.layer.publications.length===1">
    {{publication?.label}}
  </div>

  <div *ngIf="publication&&publication.timestep">
    <hr/>
    <date-selection [(date)]="layer.options.date"
      (dateChange)="update($event)"
      [timestep]="publication.timestep"
      [stepDays]="publication.timestepMultiplier||1"
      [referenceDate]="publication.timestepReference"
      [minDate]="publication.options.start"
      [maxDate]="publication.options.end"></date-selection>
  </div>

  <div *ngIf="layer.layer.options.smallExtent">
    <hr/>
    <button class="btn btn-sm btn-primary" (click)="zoomToExtent()">Zoom to Extent</button>
  </div>

<!--
  <div *ngIf="layer.layer.options.vectors">
    <p>Lets filter those {{layer.layer.options.vectors}}s, eh?</p>
  </div>
-->

  <div *ngIf="availableTags">
    <div *ngFor="let tag of getKeys(availableTags)">
      {{tag}}
      <select [(ngModel)]="tags[tag]" (ngModelChange)="tagChanged(tag)">
        <option *ngFor="let val of availableTags[tag]" [ngValue]="val.value">{{val.label}}</option>
      </select> 
    </div>
  </div>

  <div *ngIf="publication?.pointdata">
    Variable:
    <select [(ngModel)]="selectedVariable" (ngModelChange)="queryPointData()">
      <option *ngFor="let v of pointVariables" [ngValue]="v.value">{{v.label}}</option>
    </select>
  </div>
  <!--
  <div *ngIf="publication">
    <p>Start: {{publication.options.start}}</p>
    <p>End: {{publication.options.end}}</p>
    <p>{{publication|json}}</p>
  </div>
  <button (click)="update()">Force update...</button>
  -->
</div>`
    }),
    __metadata("design:paramtypes", [PointSelectionService])
], LayerPropertiesComponent);

let LayerControlComponent = class LayerControlComponent {
    constructor(metadata) {
        this.metadata = metadata;
        this.allowRemove = true;
        this.showLegends = true;
        this.allowReorder = true;
        this.layersChange = new EventEmitter();
        this.foo = 'bar';
    }
    ngAfterViewInit() {
    }
    ngOnChanges(changes) {
        if (!changes.layers || !this.layers) {
            return;
        }
        this.applyViewMode();
        this.fetchMetadata();
    }
    applyViewMode() {
        if (this.uniformViewMode === undefined) {
            return;
        }
        this.layers.forEach(l => l.options.legend = this.uniformViewMode);
    }
    allLegends(showLegend) {
        this.uniformViewMode = showLegend;
        this.layers.forEach(l => l.options.legend = showLegend);
    }
    layerLegend(layer, showLegend) {
        this.uniformViewMode = undefined;
        layer.options.legend = showLegend;
    }
    moveToTop(idx) {
        this.layers = [this.layers[idx]].concat(this.layers.slice(0, idx)).concat(this.layers.slice(idx + 1));
        this._changed();
    }
    moveUp(idx) {
        if (idx === 0) {
            return;
        }
        var layers = this.layers;
        this.layers = layers.slice(0, idx - 1).concat([layers[idx], layers[idx - 1]]).concat(layers.slice(idx + 1));
        this._changed();
    }
    moveDown(idx) {
        if (idx === (this.layers.length - 1)) {
            return;
        }
        var layers = this.layers;
        this.layers = layers.slice(0, idx).concat([layers[idx + 1], layers[idx]]).concat(layers.slice(idx + 2));
        this._changed();
    }
    moveToBottom(idx) {
        this.layers = this.layers.slice(0, idx).concat(this.layers.slice(idx + 1)).concat([this.layers[idx]]);
        this._changed();
    }
    removeLayer(idx) {
        var layers = this.layers.slice();
        layers.splice(idx, 1);
        this.layers = layers;
        this._changed();
    }
    layerPropertyChanged(l) {
        this.layers = this.layers.slice();
        this._changed();
    }
    _changed() {
        this.fetchMetadata();
        this.layersChange.emit(this.layers);
    }
    fetchMetadata() {
        this.layers.forEach(ml => {
            this.metadata.populateMetadata(ml);
        });
    }
};
LayerControlComponent.ctorParameters = () => [
    { type: MetadataService }
];
__decorate([
    Input(),
    __metadata("design:type", Array)
], LayerControlComponent.prototype, "layers", void 0);
__decorate([
    Input(),
    __metadata("design:type", LayeredMapComponent)
], LayerControlComponent.prototype, "map", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], LayerControlComponent.prototype, "allowRemove", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], LayerControlComponent.prototype, "showLegends", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], LayerControlComponent.prototype, "allowReorder", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], LayerControlComponent.prototype, "layersChange", void 0);
LayerControlComponent = __decorate([
    Component({
        selector: 'layer-control',
        template: `<div class="layers-control">
  <div *ngIf="showLegends" class="layers-control-header"> <!-- header -->
    <div class="float-right">
      <!-- TODO Attach handlers and tooltips to each icon -->
      <i class="fa fa-lg fa-cog discrete-icon" (click)="allLegends(false)"></i>
      <i class="fa fa-lg fa-th-list discrete-icon" (click)="allLegends(true)"></i>
    </div>
    <br/>
  </div>

  <div *ngIf="layers">
    <div *ngFor="let l of layers; let i = index"
         class="layer-control d-flex justify-content-between">
      <div class="p-2" style="width:100%">
        <div *ngIf="showLegends&&l.options.legend">
          <div *ngIf="l.flattenedSettings?.palette || l.legendURL">
            <map-legend [title]="l.title"
              [imageURL]="l.legendURL"
              [helpText]="l.description()"
              [mapUnits]="l.flattenedSettings?.units"
              [cbPalette]="l.flattenedSettings?.palette?.name||l.flattenedSettings?.palette"
              [cbCount]="l.flattenedSettings?.numcolorbands||l.flattenedSettings?.palette?.count"
              [cbReverse]="l.flattenedSettings?.palette?.reverse"
              [cbRange]="l.flattenedSettings?.colorscalerange">
            </map-legend>
          </div>
        </div>

        <div *ngIf="!showLegends||!l.options.legend">
          <layer-properties [layer]="l"
                            [map]="map"
                            (propertyChanged)="layerPropertyChanged($event)">
          </layer-properties>
        </div>
      </div>
      <div class="p-2">
          <div>
            <!-- TODO Attach handlers and tooltips to each icon -->
            <i *ngIf="allowReorder" class="fa fa-bars discrete-icon"></i><br *ngIf="allowReorder"/>
            <i *ngIf="showLegends" class="fa fa-cog discrete-icon"
               ngbTooltip="Show layer controls" placement="right" data-container="body"
               (click)="layerLegend(l,false)"></i><br *ngIf="showLegends"/>
            <i *ngIf="showLegends" class="fa fa-th-list discrete-icon"
               ngbTooltip="Show layer data" placement="right" data-container="body"
               (click)="layerLegend(l,true)"></i><br *ngIf="showLegends"/>
            <i *ngIf="allowReorder" class="fa fa-angle-double-up discrete-icon"
               ngbTooltip="Move to top" placement="right" data-container="body"
              (click)="moveToTop(i)"></i><br *ngIf="allowReorder"/>
            <i *ngIf="allowReorder" class="fa fa-angle-up discrete-icon"
               ngbTooltip="Move up" placement="right" data-container="body"
              (click)="moveUp(i)"></i><br *ngIf="allowReorder"/>
            <i *ngIf="allowReorder" class="fa fa-angle-down discrete-icon"
               ngbTooltip="Move down" placement="right" data-container="body"
              (click)="moveDown(i)"></i><br *ngIf="allowReorder"/>
            <i *ngIf="allowReorder" class="fa fa-angle-double-down discrete-icon"
               ngbTooltip="Move to bottom" placement="right" data-container="body"
              (click)="moveToBottom(i)"></i><br *ngIf="allowReorder"/>
            <i *ngIf="allowRemove" class="fa fa-times discrete-icon"
               ngbTooltip="Remove layer" placement="right" data-container="body"
              data-toggle="tooltip" title="Remove layer"
              (click)="removeLayer(i)"></i>
          </div>
        </div>
      </div>
  </div>
</div>

<!-- Should this control be outside the map? eg to the left? -->
`,
        styles: [`.layers-control{
  width:200px;
}


.layers-control-header, .layer-control{
  border-bottom: 1.5px solid #aaa;
}`]
    }),
    __metadata("design:paramtypes", [MetadataService])
], LayerControlComponent);

let ThemeNavbarComponent = class ThemeNavbarComponent {
    constructor() {
        this.layerSelected = new EventEmitter();
    }
    ngAfterViewInit() {
    }
    layerClick(event, layer, action) {
        this.stop(event);
        var selection = {
            layer: layer,
            action: action
        };
        this.layerSelected.emit(selection);
    }
    stop(event) {
        event.preventDefault();
        event.stopPropagation();
    }
};
__decorate([
    Input(),
    __metadata("design:type", Catalog)
], ThemeNavbarComponent.prototype, "catalog", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], ThemeNavbarComponent.prototype, "includeSearch", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ThemeNavbarComponent.prototype, "layerSelected", void 0);
ThemeNavbarComponent = __decorate([
    Component({
        selector: 'theme-navbar',
        template: `<ul class="navbar-nav">
  <li class="nav-item" ngbDropdown *ngFor="let theme of catalog?.themes">
    <a class="nav-link" ngbDropdownToggle href="#"><i class="fa" [ngClass]="theme.icon"></i></a>
    <div ngbDropdownMenu class="dropdown-menu">
      <a class="dropdown-item" href="#" (click)="layerClick($event,layer,'replace')" *ngFor="let layer of theme.layers">
        <div>
          <span>{{layer.name}}</span>
          <span class="float-right layer-select-icons">
            <i class="fa fa-map layer-select-icon discrete-icon"
               (click)="layerClick($event,layer,'replace')"
               placement="right"
               ngbTooltip="Map this layer. (Replace any existing layers)"></i>
            <br/>
            <i class="fa fa-plus layer-select-icon discrete-icon"
               (click)="layerClick($event,layer,'add')"
               placement="right"
               ngbTooltip="Add this layer to the map."></i>
          </span>
        </div>
      </a>
    </div>
  </li>
</ul>

<!--

[ng-reflect-ngb-tooltip].yellow + .tooltip {
    background-color: yellow;
}
-->`,
        styles: [`
.layer-select-icons{
  font-size:0.75em;
  margin-right:-20px;
}

/* Annoying... using /deep/ to access the child component
 * but /deep/ (and synonyms) are deprecated. Not clear what
 * we should be doing
 */
/deep/ .tooltip-inner {
  width: 400px;
}

.dropdown-item{
  border-bottom: 1px solid #aaa;
  height: 40px;
}
`]
    }),
    __metadata("design:paramtypes", [])
], ThemeNavbarComponent);

const components = [
    //$componentList
    DateShifterComponent,
    OneTimeSplashComponent,
    DateElementComponent,
    ShareViewComponent,
    LocationSearchComponent,
    ZoomLayerComponent,
    ZoomFullComponent,
    ZoomOutComponent,
    ZoomInComponent,
    CycleBaseMapComponent,
    CycleOpacityComponent,
    ButtonBarComponent,
    TimeseriesChartComponent,
    FeatureTableComponent,
    CollapsibleMapControlComponent,
    BaseMapSelectionComponent,
    SimpleTreeNodeComponent,
    SimpleTreeComponent,
    CatalogComponent,
    DateSelectionComponent,
    LayerPropertiesComponent,
    LayerControlComponent,
    LayeredMapComponent,
    ThemeNavbarComponent,
    WMSLayerComponent,
    MapLegendComponent,
    MapControlComponent
];
let MapWaldBootstrapModule = class MapWaldBootstrapModule {
};
MapWaldBootstrapModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            FormsModule,
            AgmCoreModule,
            HttpClientModule,
            NgPipesModule,
            NgbModule,
            MapWaldCoreModule
        ],
        declarations: components,
        exports: components,
        providers: []
    })
], MapWaldBootstrapModule);

function parseCSV(txt) {
    let lines = txt.split('\n');
    let header = lines[0];
    lines = lines.slice(1);
    let columns = header.split(',');
    return lines.filter(ln => ln.length).map(ln => {
        let data = ln.split(',');
        let result = {};
        data.forEach((val, i) => {
            result[columns[i]] = parseVal(val);
        });
        return result;
    });
}
function parseVal(val) {
    // Try date...
    let components = val.split('-');
    if (components.length === 3) {
        let dateComponents = components.map(c => +c);
        if (!dateComponents.some(isNaN)) {
            return new Date(Date.UTC(dateComponents[0], dateComponents[1] - 1, dateComponents[2]));
        }
    }
    if (val === '') {
        return val;
    }
    // Try numeric
    let numeric = +val;
    if (!isNaN(numeric)) {
        return numeric;
    }
    return val;
}

let MapWaldModule = class MapWaldModule {
};
MapWaldModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            FormsModule,
            AgmCoreModule,
            HttpClientModule,
            NgPipesModule,
            NgbModule,
            MapWaldBootstrapModule,
            MapWaldCoreModule
        ],
        declarations: [],
        exports: [],
        providers: []
    })
], MapWaldModule);

/**
 * Generated bundle index. Do not edit.
 */

export { AvailableDatesService, BaseMapSelectionComponent, ButtonBarComponent, Catalog, CatalogComponent, CatalogOptions, CatalogService, CollapsibleMapControlComponent, CycleBaseMapComponent, CycleOpacityComponent, DateElementComponent, DateSelectionComponent, DateShifterComponent, FeatureTableComponent, GeocodingService, INTERPOLATED_PARAMETERS, InterpolationService, LAT_NAMES, LNG_NAMES, Layer, LayerControlComponent, LayerPropertiesComponent, LayeredMapComponent, LocationSearchComponent, MapControlComponent, MapLegendComponent, MapViewParameterService, MapWaldBootstrapModule, MapWaldCoreModule, MapWaldModule, MappedLayer, MetadataService, OneTimeSplashComponent, OpendapService, PaletteService, PointSelectionService, ProjectionService, Publication, ShareViewComponent, SimpleTreeComponent, SimpleTreeNodeComponent, StaticDataService, TIME_NAMES, Theme, ThemeNavbarComponent, TimeUtilsService, TimeseriesChartComponent, TimeseriesService, WMSLayerComponent, WMSService, WMS_PARAMETER_NAMES, WMS_URL_FORMAT, ZoomFullComponent, ZoomInComponent, ZoomLayerComponent, ZoomOutComponent, components, parseCSV, services, utcDate, utcDateCopy, ɵ0, ɵ1, TreeFilterService as ɵa };
//# sourceMappingURL=map-wald.js.map
