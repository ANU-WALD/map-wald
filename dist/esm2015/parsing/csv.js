export function parseCSV(txt) {
    let lines = txt.split('\n');
    let header = lines[0];
    lines = lines.slice(1);
    let columns = header.split(',');
    return lines.filter(ln => ln.length).map(ln => {
        let data = ln.split(',');
        let result = {};
        data.forEach((val, i) => {
            result[columns[i]] = parseVal(val);
        });
        return result;
    });
}
function parseVal(val) {
    // Try date...
    let components = val.split('-');
    if (components.length === 3) {
        let dateComponents = components.map(c => +c);
        if (!dateComponents.some(isNaN)) {
            return new Date(Date.UTC(dateComponents[0], dateComponents[1] - 1, dateComponents[2]));
        }
    }
    if (val === '') {
        return val;
    }
    // Try numeric
    let numeric = +val;
    if (!isNaN(numeric)) {
        return numeric;
    }
    return val;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3N2LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWFwLXdhbGQvIiwic291cmNlcyI6WyJwYXJzaW5nL2Nzdi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxNQUFNLFVBQVUsUUFBUSxDQUFDLEdBQVU7SUFDakMsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEIsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkIsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoQyxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFBLEVBQUUsQ0FBQSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQSxFQUFFO1FBQ3pDLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFekIsSUFBSSxNQUFNLEdBQVksRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxFQUFDLEVBQUU7WUFDcEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELFNBQVMsUUFBUSxDQUFDLEdBQVU7SUFFMUIsY0FBYztJQUNkLElBQUksVUFBVSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDaEMsSUFBRyxVQUFVLENBQUMsTUFBTSxLQUFHLENBQUMsRUFBQztRQUN2QixJQUFJLGNBQWMsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQSxFQUFFLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQyxJQUFHLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBQztZQUM3QixPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwRjtLQUNGO0lBRUQsSUFBRyxHQUFHLEtBQUcsRUFBRSxFQUFDO1FBQ1YsT0FBTyxHQUFHLENBQUM7S0FDWjtJQUVELGNBQWM7SUFDZCxJQUFJLE9BQU8sR0FBVSxDQUFDLEdBQUcsQ0FBQztJQUMxQixJQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFDO1FBQ2pCLE9BQU8sT0FBTyxDQUFDO0tBQ2hCO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG5leHBvcnQgaW50ZXJmYWNlIFRhYmxlUm93e1xuICBba2V5OnN0cmluZ106YW55O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDU1YodHh0OnN0cmluZyk6VGFibGVSb3dbXXtcbiAgbGV0IGxpbmVzID0gdHh0LnNwbGl0KCdcXG4nKTtcbiAgbGV0IGhlYWRlciA9IGxpbmVzWzBdO1xuICBsaW5lcyA9IGxpbmVzLnNsaWNlKDEpO1xuICBsZXQgY29sdW1ucyA9IGhlYWRlci5zcGxpdCgnLCcpO1xuXG4gIHJldHVybiBsaW5lcy5maWx0ZXIobG49PmxuLmxlbmd0aCkubWFwKGxuPT57XG4gICAgbGV0IGRhdGEgPSBsbi5zcGxpdCgnLCcpO1xuXG4gICAgbGV0IHJlc3VsdDpUYWJsZVJvdyA9IHt9O1xuICAgIGRhdGEuZm9yRWFjaCgodmFsLGkpPT57XG4gICAgICByZXN1bHRbY29sdW1uc1tpXV0gPSBwYXJzZVZhbCh2YWwpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwYXJzZVZhbCh2YWw6c3RyaW5nKTphbnl7XG5cbiAgLy8gVHJ5IGRhdGUuLi5cbiAgbGV0IGNvbXBvbmVudHMgPSB2YWwuc3BsaXQoJy0nKTtcbiAgaWYoY29tcG9uZW50cy5sZW5ndGg9PT0zKXtcbiAgICBsZXQgZGF0ZUNvbXBvbmVudHMgPSBjb21wb25lbnRzLm1hcChjPT4rYyk7XG4gICAgaWYoIWRhdGVDb21wb25lbnRzLnNvbWUoaXNOYU4pKXtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyhkYXRlQ29tcG9uZW50c1swXSxkYXRlQ29tcG9uZW50c1sxXS0xLGRhdGVDb21wb25lbnRzWzJdKSk7XG4gICAgfVxuICB9XG5cbiAgaWYodmFsPT09Jycpe1xuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICAvLyBUcnkgbnVtZXJpY1xuICBsZXQgbnVtZXJpYzpudW1iZXIgPSArdmFsO1xuICBpZighaXNOYU4obnVtZXJpYykpe1xuICAgIHJldHVybiBudW1lcmljO1xuICB9XG5cbiAgcmV0dXJuIHZhbDtcbn1cbiJdfQ==