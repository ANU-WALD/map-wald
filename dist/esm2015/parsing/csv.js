export function parseCSV(txt, options) {
    const lines = txt.split('\n');
    const headerLength = (options === null || options === void 0 ? void 0 : options.headerRows) || ((options === null || options === void 0 ? void 0 : options.columns) ? 0 : 1);
    const headerLines = lines.slice(0, headerLength);
    const bodyLines = lines.slice(headerLength);
    let columns = options === null || options === void 0 ? void 0 : options.columns;
    if (!columns) {
        const header = headerLines[0];
        columns = header.split(',');
    }
    return bodyLines.filter(ln => ln.length).map(ln => {
        let data = ln.split(',');
        let result = {};
        data.forEach((val, i) => {
            result[columns[i]] = parseVal(val);
        });
        return result;
    });
}
function parseVal(val) {
    // Try date...
    let components = val.split('-');
    if (components.length === 3) {
        let dateComponents = components.map(c => +c);
        if (!dateComponents.some(isNaN)) {
            return new Date(Date.UTC(dateComponents[0], dateComponents[1] - 1, dateComponents[2]));
        }
    }
    if (val === '') {
        return val;
    }
    // Try numeric
    let numeric = +val;
    if (!isNaN(numeric)) {
        return numeric;
    }
    return val;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3N2LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3BhcnNpbmcvY3N2LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVVBLE1BQU0sVUFBVSxRQUFRLENBQUMsR0FBVSxFQUFDLE9BQXlCO0lBQzNELE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUIsTUFBTSxZQUFZLEdBQUcsQ0FBQSxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsVUFBVSxLQUFJLENBQUMsQ0FBQSxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsT0FBTyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2hELE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7SUFFNUMsSUFBSSxPQUFPLEdBQUcsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLE9BQU8sQ0FBQztJQUMvQixJQUFHLENBQUMsT0FBTyxFQUFDO1FBQ1YsTUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLE9BQU8sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzdCO0lBRUQsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQSxFQUFFLENBQUEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUEsRUFBRTtRQUM3QyxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXpCLElBQUksTUFBTSxHQUFZLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsRUFBQyxFQUFFO1lBQ3BCLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FBQyxHQUFVO0lBRTFCLGNBQWM7SUFDZCxJQUFJLFVBQVUsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLElBQUcsVUFBVSxDQUFDLE1BQU0sS0FBRyxDQUFDLEVBQUM7UUFDdkIsSUFBSSxjQUFjLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUEsRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsSUFBRyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUM7WUFDN0IsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDcEY7S0FDRjtJQUVELElBQUcsR0FBRyxLQUFHLEVBQUUsRUFBQztRQUNWLE9BQU8sR0FBRyxDQUFDO0tBQ1o7SUFFRCxjQUFjO0lBQ2QsSUFBSSxPQUFPLEdBQVUsQ0FBQyxHQUFHLENBQUM7SUFDMUIsSUFBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBQztRQUNqQixPQUFPLE9BQU8sQ0FBQztLQUNoQjtJQUVELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGludGVyZmFjZSBUYWJsZVJvd3tcbiAgW2tleTpzdHJpbmddOmFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDc3ZQYXJzZXJPcHRpb25zIHtcbiAgaGVhZGVyUm93cz86bnVtYmVyO1xuICBjb2x1bW5zPzogc3RyaW5nW107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNTVih0eHQ6c3RyaW5nLG9wdGlvbnM/OkNzdlBhcnNlck9wdGlvbnMpOlRhYmxlUm93W117XG4gIGNvbnN0IGxpbmVzID0gdHh0LnNwbGl0KCdcXG4nKTtcbiAgY29uc3QgaGVhZGVyTGVuZ3RoID0gb3B0aW9ucz8uaGVhZGVyUm93cyB8fCAob3B0aW9ucz8uY29sdW1ucyA/IDAgOiAxKTtcbiAgY29uc3QgaGVhZGVyTGluZXMgPSBsaW5lcy5zbGljZSgwLGhlYWRlckxlbmd0aCk7XG4gIGNvbnN0IGJvZHlMaW5lcyA9IGxpbmVzLnNsaWNlKGhlYWRlckxlbmd0aCk7XG5cbiAgbGV0IGNvbHVtbnMgPSBvcHRpb25zPy5jb2x1bW5zO1xuICBpZighY29sdW1ucyl7XG4gICAgY29uc3QgaGVhZGVyID0gaGVhZGVyTGluZXNbMF07XG4gICAgY29sdW1ucyA9IGhlYWRlci5zcGxpdCgnLCcpO1xuICB9XG5cbiAgcmV0dXJuIGJvZHlMaW5lcy5maWx0ZXIobG49PmxuLmxlbmd0aCkubWFwKGxuPT57XG4gICAgbGV0IGRhdGEgPSBsbi5zcGxpdCgnLCcpO1xuXG4gICAgbGV0IHJlc3VsdDpUYWJsZVJvdyA9IHt9O1xuICAgIGRhdGEuZm9yRWFjaCgodmFsLGkpPT57XG4gICAgICByZXN1bHRbY29sdW1uc1tpXV0gPSBwYXJzZVZhbCh2YWwpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwYXJzZVZhbCh2YWw6c3RyaW5nKTphbnl7XG5cbiAgLy8gVHJ5IGRhdGUuLi5cbiAgbGV0IGNvbXBvbmVudHMgPSB2YWwuc3BsaXQoJy0nKTtcbiAgaWYoY29tcG9uZW50cy5sZW5ndGg9PT0zKXtcbiAgICBsZXQgZGF0ZUNvbXBvbmVudHMgPSBjb21wb25lbnRzLm1hcChjPT4rYyk7XG4gICAgaWYoIWRhdGVDb21wb25lbnRzLnNvbWUoaXNOYU4pKXtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyhkYXRlQ29tcG9uZW50c1swXSxkYXRlQ29tcG9uZW50c1sxXS0xLGRhdGVDb21wb25lbnRzWzJdKSk7XG4gICAgfVxuICB9XG5cbiAgaWYodmFsPT09Jycpe1xuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICAvLyBUcnkgbnVtZXJpY1xuICBsZXQgbnVtZXJpYzpudW1iZXIgPSArdmFsO1xuICBpZighaXNOYU4obnVtZXJpYykpe1xuICAgIHJldHVybiBudW1lcmljO1xuICB9XG5cbiAgcmV0dXJuIHZhbDtcbn1cbiJdfQ==