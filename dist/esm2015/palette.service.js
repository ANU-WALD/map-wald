import { Injectable } from '@angular/core';
import { palettes } from './colorbrewer';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
const DEFAULT_NUM_COLOURS = 3;
export class PaletteService {
    constructor(_http) {
        this._http = _http;
        this.namedPalettes = {};
        this._source = '';
    }
    set source(val) {
        this._source = val;
    }
    getPalette(name, reverse, numColours) {
        var palette = null;
        if (this.namedPalettes[name]) {
            palette = this.namedPalettes[name];
        }
        else if (palettes[name]) {
            palette = palettes[name][numColours || DEFAULT_NUM_COLOURS];
        }
        if (palette) {
            if (reverse) {
                return of(palette.slice().reverse());
            }
            return of(palette.slice());
        }
        return this._http.get(this._source + '/' + name + '.pal', { responseType: 'text' }).pipe(map((text) => this.parseNCWMSPalette(text)));
    }
    parseNCWMSPalette(txt) {
        return txt.split('\n')
            .map(ln => ln.replace(/\#.*/g, '').trim().replace(/ +/g, ' '))
            .filter(ln => ln.length)
            .map(e => `rgb(${e.split(' ').join(',')})`);
    }
    colourIndex(val, min, max, count) {
        let point = (val - min) / (max - min);
        let pos = Math.round(point * (count - 1));
        return pos;
    }
}
PaletteService.decorators = [
    { type: Injectable }
];
PaletteService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFsZXR0ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhbGV0dGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBTXJDLE1BQU0sbUJBQW1CLEdBQUMsQ0FBQyxDQUFDO0FBRzVCLE1BQU0sT0FBTyxjQUFjO0lBR3pCLFlBQW9CLEtBQWdCO1FBQWhCLFVBQUssR0FBTCxLQUFLLENBQVc7UUFGcEMsa0JBQWEsR0FBZ0MsRUFBRSxDQUFDO1FBTXhDLFlBQU8sR0FBUSxFQUFFLENBQUM7SUFGMUIsQ0FBQztJQUdELElBQUksTUFBTSxDQUFDLEdBQVU7UUFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBQyxHQUFHLENBQUM7SUFDbkIsQ0FBQztJQUVELFVBQVUsQ0FBQyxJQUFXLEVBQUMsT0FBZ0IsRUFBQyxVQUFrQjtRQUN4RCxJQUFJLE9BQU8sR0FBc0IsSUFBSSxDQUFDO1FBQ3RDLElBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBQztZQUMxQixPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNwQzthQUFNLElBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFDO1lBQ3ZCLE9BQU8sR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxJQUFFLG1CQUFtQixDQUFDLENBQUM7U0FDM0Q7UUFFRCxJQUFHLE9BQU8sRUFBQztZQUNULElBQUcsT0FBTyxFQUFDO2dCQUNULE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO2FBQ3RDO1lBQ0QsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDNUI7UUFFRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUMsR0FBRyxHQUFDLElBQUksR0FBQyxNQUFNLEVBQUMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQy9FLEdBQUcsQ0FBQyxDQUFDLElBQVcsRUFBQyxFQUFFLENBQUEsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsaUJBQWlCLENBQUMsR0FBVTtRQUMxQixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2FBQ25CLEdBQUcsQ0FBQyxFQUFFLENBQUEsRUFBRSxDQUFBLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUMsR0FBRyxDQUFDLENBQUM7YUFDekQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQzthQUN2QixHQUFHLENBQUMsQ0FBQyxDQUFBLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsV0FBVyxDQUFDLEdBQVUsRUFBQyxHQUFVLEVBQUMsR0FBVSxFQUFDLEtBQVk7UUFDdkQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxHQUFHLEdBQUMsR0FBRyxDQUFDLEdBQUMsQ0FBQyxHQUFHLEdBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUMsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7OztZQTNDRixVQUFVOzs7WUFWRixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtwYWxldHRlc30gZnJvbSAnLi9jb2xvcmJyZXdlcic7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IHR5cGUgQ29sb3VyU3BlY2lmaWNhdGlvbiA9IHN0cmluZztcbmV4cG9ydCB0eXBlIENvbG91clBhbGV0dGUgPSBBcnJheTxDb2xvdXJTcGVjaWZpY2F0aW9uPjtcblxuXG5jb25zdCBERUZBVUxUX05VTV9DT0xPVVJTPTM7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQYWxldHRlU2VydmljZSB7XG4gIG5hbWVkUGFsZXR0ZXM6e1trZXk6c3RyaW5nXTpDb2xvdXJQYWxldHRlfSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2h0dHA6SHR0cENsaWVudCkge1xuXG4gIH1cblxuICBwcml2YXRlIF9zb3VyY2U6c3RyaW5nPScnO1xuICBzZXQgc291cmNlKHZhbDpzdHJpbmcpe1xuICAgIHRoaXMuX3NvdXJjZT12YWw7XG4gIH1cblxuICBnZXRQYWxldHRlKG5hbWU6c3RyaW5nLHJldmVyc2U/OmJvb2xlYW4sbnVtQ29sb3Vycz86bnVtYmVyKTpPYnNlcnZhYmxlPENvbG91clBhbGV0dGU+e1xuICAgIHZhciBwYWxldHRlOihDb2xvdXJQYWxldHRlfG51bGwpPW51bGw7XG4gICAgaWYodGhpcy5uYW1lZFBhbGV0dGVzW25hbWVdKXtcbiAgICAgIHBhbGV0dGUgPSB0aGlzLm5hbWVkUGFsZXR0ZXNbbmFtZV07XG4gICAgfSBlbHNlIGlmKHBhbGV0dGVzW25hbWVdKXtcbiAgICAgIHBhbGV0dGUgPSBwYWxldHRlc1tuYW1lXVtudW1Db2xvdXJzfHxERUZBVUxUX05VTV9DT0xPVVJTXTtcbiAgICB9XG5cbiAgICBpZihwYWxldHRlKXtcbiAgICAgIGlmKHJldmVyc2Upe1xuICAgICAgICByZXR1cm4gb2YocGFsZXR0ZS5zbGljZSgpLnJldmVyc2UoKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2YocGFsZXR0ZS5zbGljZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQodGhpcy5fc291cmNlKycvJytuYW1lKycucGFsJyx7IHJlc3BvbnNlVHlwZTogJ3RleHQnIH0pLnBpcGUoXG4gICAgICBtYXAoKHRleHQ6c3RyaW5nKT0+dGhpcy5wYXJzZU5DV01TUGFsZXR0ZSh0ZXh0KSkpO1xuICB9XG5cbiAgcGFyc2VOQ1dNU1BhbGV0dGUodHh0OnN0cmluZyk6Q29sb3VyUGFsZXR0ZXtcbiAgICByZXR1cm4gdHh0LnNwbGl0KCdcXG4nKVxuICAgICAgLm1hcChsbj0+bG4ucmVwbGFjZSgvXFwjLiovZywnJykudHJpbSgpLnJlcGxhY2UoLyArL2csJyAnKSlcbiAgICAgIC5maWx0ZXIobG4gPT4gbG4ubGVuZ3RoKVxuICAgICAgLm1hcChlPT4gYHJnYigke2Uuc3BsaXQoJyAnKS5qb2luKCcsJyl9KWApO1xuICB9XG5cbiAgY29sb3VySW5kZXgodmFsOm51bWJlcixtaW46bnVtYmVyLG1heDpudW1iZXIsY291bnQ6bnVtYmVyKTpudW1iZXJ7XG4gICAgbGV0IHBvaW50ID0gKHZhbC1taW4pLyhtYXgtbWluKTtcbiAgICBsZXQgcG9zID0gTWF0aC5yb3VuZChwb2ludCooY291bnQtMSkpO1xuICAgIHJldHVybiBwb3M7XG4gIH1cbn1cbiJdfQ==