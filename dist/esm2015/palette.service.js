import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { palettes } from './colorbrewer';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
const DEFAULT_NUM_COLOURS = 3;
let PaletteService = class PaletteService {
    constructor(_http) {
        this._http = _http;
        this.namedPalettes = {};
        this._source = '';
    }
    set source(val) {
        this._source = val;
    }
    getPalette(name, reverse, numColours) {
        var palette = null;
        if (this.namedPalettes[name]) {
            palette = this.namedPalettes[name];
        }
        else if (palettes[name]) {
            palette = palettes[name][numColours || DEFAULT_NUM_COLOURS];
        }
        if (palette) {
            if (reverse) {
                return of(palette.slice().reverse());
            }
            return of(palette.slice());
        }
        return this._http.get(this._source + '/' + name + '.pal', { responseType: 'text' }).pipe(map((text) => this.parseNCWMSPalette(text)));
    }
    parseNCWMSPalette(txt) {
        return txt.split('\n')
            .map(ln => ln.replace(/\#.*/g, '').trim().replace(/ +/g, ' '))
            .filter(ln => ln.length)
            .map(e => `rgb(${e.split(' ').join(',')})`);
    }
    colourIndex(val, min, max, count) {
        let point = (val - min) / (max - min);
        let pos = Math.round(point * (count - 1));
        return pos;
    }
};
PaletteService.ctorParameters = () => [
    { type: HttpClient }
];
PaletteService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [HttpClient])
], PaletteService);
export { PaletteService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFsZXR0ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWFwLXdhbGQvIiwic291cmNlcyI6WyJwYWxldHRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN2QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFNckMsTUFBTSxtQkFBbUIsR0FBQyxDQUFDLENBQUM7QUFHNUIsSUFBYSxjQUFjLEdBQTNCLE1BQWEsY0FBYztJQUd6QixZQUFvQixLQUFnQjtRQUFoQixVQUFLLEdBQUwsS0FBSyxDQUFXO1FBRnBDLGtCQUFhLEdBQWdDLEVBQUUsQ0FBQztRQU14QyxZQUFPLEdBQVEsRUFBRSxDQUFDO0lBRjFCLENBQUM7SUFHRCxJQUFJLE1BQU0sQ0FBQyxHQUFVO1FBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUMsR0FBRyxDQUFDO0lBQ25CLENBQUM7SUFFRCxVQUFVLENBQUMsSUFBVyxFQUFDLE9BQWdCLEVBQUMsVUFBa0I7UUFDeEQsSUFBSSxPQUFPLEdBQXNCLElBQUksQ0FBQztRQUN0QyxJQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUM7WUFDMUIsT0FBTyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDcEM7YUFBTSxJQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBQztZQUN2QixPQUFPLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsSUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1NBQzNEO1FBRUQsSUFBRyxPQUFPLEVBQUM7WUFDVCxJQUFHLE9BQU8sRUFBQztnQkFDVCxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQzthQUN0QztZQUNELE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQzVCO1FBRUQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFDLEdBQUcsR0FBQyxJQUFJLEdBQUMsTUFBTSxFQUFDLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUMvRSxHQUFHLENBQUMsQ0FBQyxJQUFXLEVBQUMsRUFBRSxDQUFBLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELGlCQUFpQixDQUFDLEdBQVU7UUFDMUIsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQzthQUNuQixHQUFHLENBQUMsRUFBRSxDQUFBLEVBQUUsQ0FBQSxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3pELE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUM7YUFDdkIsR0FBRyxDQUFDLENBQUMsQ0FBQSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELFdBQVcsQ0FBQyxHQUFVLEVBQUMsR0FBVSxFQUFDLEdBQVUsRUFBQyxLQUFZO1FBQ3ZELElBQUksS0FBSyxHQUFHLENBQUMsR0FBRyxHQUFDLEdBQUcsQ0FBQyxHQUFDLENBQUMsR0FBRyxHQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0NBQ0YsQ0FBQTs7WUF4QzJCLFVBQVU7O0FBSHpCLGNBQWM7SUFEMUIsVUFBVSxFQUFFOzZDQUllLFVBQVU7R0FIekIsY0FBYyxDQTJDMUI7U0EzQ1ksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7cGFsZXR0ZXN9IGZyb20gJy4vY29sb3JicmV3ZXInO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCB0eXBlIENvbG91clNwZWNpZmljYXRpb24gPSBzdHJpbmc7XG5leHBvcnQgdHlwZSBDb2xvdXJQYWxldHRlID0gQXJyYXk8Q29sb3VyU3BlY2lmaWNhdGlvbj47XG5cblxuY29uc3QgREVGQVVMVF9OVU1fQ09MT1VSUz0zO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGFsZXR0ZVNlcnZpY2Uge1xuICBuYW1lZFBhbGV0dGVzOntba2V5OnN0cmluZ106Q29sb3VyUGFsZXR0ZX0gPSB7fTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9odHRwOkh0dHBDbGllbnQpIHtcblxuICB9XG5cbiAgcHJpdmF0ZSBfc291cmNlOnN0cmluZz0nJztcbiAgc2V0IHNvdXJjZSh2YWw6c3RyaW5nKXtcbiAgICB0aGlzLl9zb3VyY2U9dmFsO1xuICB9XG5cbiAgZ2V0UGFsZXR0ZShuYW1lOnN0cmluZyxyZXZlcnNlPzpib29sZWFuLG51bUNvbG91cnM/Om51bWJlcik6T2JzZXJ2YWJsZTxDb2xvdXJQYWxldHRlPntcbiAgICB2YXIgcGFsZXR0ZTooQ29sb3VyUGFsZXR0ZXxudWxsKT1udWxsO1xuICAgIGlmKHRoaXMubmFtZWRQYWxldHRlc1tuYW1lXSl7XG4gICAgICBwYWxldHRlID0gdGhpcy5uYW1lZFBhbGV0dGVzW25hbWVdO1xuICAgIH0gZWxzZSBpZihwYWxldHRlc1tuYW1lXSl7XG4gICAgICBwYWxldHRlID0gcGFsZXR0ZXNbbmFtZV1bbnVtQ29sb3Vyc3x8REVGQVVMVF9OVU1fQ09MT1VSU107XG4gICAgfVxuXG4gICAgaWYocGFsZXR0ZSl7XG4gICAgICBpZihyZXZlcnNlKXtcbiAgICAgICAgcmV0dXJuIG9mKHBhbGV0dGUuc2xpY2UoKS5yZXZlcnNlKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9mKHBhbGV0dGUuc2xpY2UoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0KHRoaXMuX3NvdXJjZSsnLycrbmFtZSsnLnBhbCcseyByZXNwb25zZVR5cGU6ICd0ZXh0JyB9KS5waXBlKFxuICAgICAgbWFwKCh0ZXh0OnN0cmluZyk9PnRoaXMucGFyc2VOQ1dNU1BhbGV0dGUodGV4dCkpKTtcbiAgfVxuXG4gIHBhcnNlTkNXTVNQYWxldHRlKHR4dDpzdHJpbmcpOkNvbG91clBhbGV0dGV7XG4gICAgcmV0dXJuIHR4dC5zcGxpdCgnXFxuJylcbiAgICAgIC5tYXAobG49PmxuLnJlcGxhY2UoL1xcIy4qL2csJycpLnRyaW0oKS5yZXBsYWNlKC8gKy9nLCcgJykpXG4gICAgICAuZmlsdGVyKGxuID0+IGxuLmxlbmd0aClcbiAgICAgIC5tYXAoZT0+IGByZ2IoJHtlLnNwbGl0KCcgJykuam9pbignLCcpfSlgKTtcbiAgfVxuXG4gIGNvbG91ckluZGV4KHZhbDpudW1iZXIsbWluOm51bWJlcixtYXg6bnVtYmVyLGNvdW50Om51bWJlcik6bnVtYmVye1xuICAgIGxldCBwb2ludCA9ICh2YWwtbWluKS8obWF4LW1pbik7XG4gICAgbGV0IHBvcyA9IE1hdGgucm91bmQocG9pbnQqKGNvdW50LTEpKTtcbiAgICByZXR1cm4gcG9zO1xuICB9XG59XG4iXX0=