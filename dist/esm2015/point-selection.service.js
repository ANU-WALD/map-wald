import { Injectable } from '@angular/core';
import { BehaviorSubject, of } from 'rxjs';
import { InterpolationService } from './interpolation.service';
import { MetadataService } from './metadata.service';
import { map } from 'rxjs/operators';
export class PointSelectionService {
    constructor(meta) {
        this.meta = meta;
        this.latestPointSelectionSource = new BehaviorSubject(null);
        this.latestPointSelection = this.latestPointSelectionSource.asObservable();
    }
    unchanged(current, updated) {
        if (!current && !updated) {
            return true;
        }
        if (!current || !updated) {
            return false;
        }
        if (current.variable !== updated.variable) {
            return false;
        }
        if (!Object.keys(current.tags).every(t => current.tags[t] === updated.tags[t])) {
            return false;
        }
        if (current.catalog.url !== updated.catalog.url) {
            return false;
        }
        if (current.feature !== updated.feature) {
            return false;
        }
        return true;
        // return false; // TODO
    }
    pointSelection(sel) {
        let current = this.latestPointSelectionSource.getValue();
        if (this.unchanged(current, sel)) {
            return;
        }
        let url = this.fullUrl(sel);
        if (!this.validUrl(url)) {
            return; // Not a complete selection
        }
        if (!sel.variable) {
            return; // Not a complete selection
        }
        this.latestPointSelectionSource.next(sel);
    }
    fullUrl(sel) {
        let params = Object.assign({}, sel.feature ? sel.feature.properties : {}, sel.tags);
        return InterpolationService.interpolate(sel.catalog.url, params);
    }
    validUrl(url) {
        return url.indexOf('{{') < 0;
    }
    timeseriesVariables(sel) {
        let coords = sel.catalog.coordinates || {};
        let url = this.fullUrl(sel);
        if (!this.validUrl(url)) {
            return of([]);
        }
        return this.meta.ddxForUrl(url).pipe(map(ddx => {
            let variables = ddx.variables;
            let variableNames = Object.keys(variables).filter(v => {
                let dims = ddx.variables[v].dimensions;
                return Object.keys(coords).every(coord => {
                    return dims.find(dim => dim.name === coord);
                });
            });
            return variableNames.map(v => {
                if (sel.catalog && sel.catalog.displayFormat) {
                    let fmt = Object.assign({ variable: v }, ddx.variables[v]);
                    return {
                        value: v,
                        label: InterpolationService.interpolate(sel.catalog.displayFormat, fmt)
                    };
                }
                if (ddx.variables[v].long_name) {
                    return {
                        value: v,
                        label: ddx.variables[v].long_name
                    };
                }
                return {
                    value: v,
                    label: v
                };
            });
        }));
    }
}
PointSelectionService.decorators = [
    { type: Injectable }
];
PointSelectionService.ctorParameters = () => [
    { type: MetadataService }
];
//# sourceMappingURL=data:application/json;base64,