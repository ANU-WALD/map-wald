import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { forkJoin } from 'rxjs';
import { map } from 'rxjs/operators';
import { InterpolationService } from './interpolation.service';
import { MetadataService } from './metadata.service';
let AvailableDatesService = class AvailableDatesService {
    constructor(metadata) {
        this.metadata = metadata;
    }
    fnForYear(mapped, year) {
        const publication = mapped.layer.publications[mapped.options.publication];
        return InterpolationService.interpolate(publication.options.filepath, {
            year: year
        });
    }
    availableDates(mapped, year) {
        let layer = mapped.layer;
        let fn = this.fnForYear(mapped, year);
        let res$ = this.metadata.getTimeDimension(layer.options.host, fn);
        if (!layer.timeshift) {
            return res$;
        }
        if (layer.timePeriod.containsYear(year - 1)) {
            fn = this.fnForYear(mapped, year - 1);
            let prev$ = this.metadata.getTimeDimension(layer.host, fn);
            res$ = forkJoin(...[prev$, res$]).pipe(map((years) => years[0].concat(years[1])));
        }
        return res$.pipe(map(dates => {
            return dates.map(d => {
                let res = new Date(d.getTime());
                res.setUTCDate(d.getUTCDate() - layer.timeshift * layer.timestep);
                return res;
            });
        }), map(dates => dates.filter((d, i) => (i >= Math.abs(layer.timeshift)) && (d.getUTCFullYear() === year))));
    }
};
AvailableDatesService.ctorParameters = () => [
    { type: MetadataService }
];
AvailableDatesService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [MetadataService])
], AvailableDatesService);
export { AvailableDatesService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhaWxhYmxlLWRhdGVzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tYXAtd2FsZC8iLCJzb3VyY2VzIjpbImF2YWlsYWJsZS1kYXRlcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBa0IsUUFBUSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBR2hELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFJckQsSUFBYSxxQkFBcUIsR0FBbEMsTUFBYSxxQkFBcUI7SUFFaEMsWUFBb0IsUUFBd0I7UUFBeEIsYUFBUSxHQUFSLFFBQVEsQ0FBZ0I7SUFFNUMsQ0FBQztJQUVPLFNBQVMsQ0FBQyxNQUFrQixFQUFDLElBQVc7UUFDOUMsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMxRSxPQUFPLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRTtZQUNwRSxJQUFJLEVBQUUsSUFBSTtTQUNYLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxjQUFjLENBQUMsTUFBa0IsRUFBQyxJQUFZO1FBQzVDLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDekIsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUMsSUFBSSxDQUFDLENBQUM7UUFFckMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFBQyxFQUFFLENBQUMsQ0FBQztRQUVqRSxJQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBQztZQUNsQixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBRyxLQUFLLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLEVBQUM7WUFDdkMsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFDLElBQUksR0FBQyxDQUFDLENBQUMsQ0FBQztZQUVuQyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUMsRUFBRSxDQUFDLENBQUM7WUFFMUQsSUFBSSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNuQyxHQUFHLENBQUMsQ0FBQyxLQUFjLEVBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3REO1FBRUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUNaLEdBQUcsQ0FBQyxLQUFLLENBQUEsRUFBRTtZQUNULE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUEsRUFBRTtnQkFDbEIsSUFBSSxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7Z0JBQ2hDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxHQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUM5RCxPQUFPLEdBQUcsQ0FBQztZQUNiLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLEVBQ0YsR0FBRyxDQUFDLEtBQUssQ0FBQSxFQUFFLENBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLEtBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUMvRixDQUFDO0lBQ0osQ0FBQztDQUNGLENBQUE7O1lBekM4QixlQUFlOztBQUZqQyxxQkFBcUI7SUFEakMsVUFBVSxFQUFFOzZDQUdrQixlQUFlO0dBRmpDLHFCQUFxQixDQTJDakM7U0EzQ1kscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YsIGZvcmtKb2luIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBVVENEYXRlIH0gZnJvbSAnLi90aW1lLXV0aWxzLnNlcnZpY2UnO1xuaW1wb3J0IHsgTWFwcGVkTGF5ZXIgfSBmcm9tICcuL2RhdGEvbWFwcGVkLWxheWVyJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEludGVycG9sYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9pbnRlcnBvbGF0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgTWV0YWRhdGFTZXJ2aWNlIH0gZnJvbSAnLi9tZXRhZGF0YS5zZXJ2aWNlJztcbmltcG9ydCB7IExheWVyIH0gZnJvbSAnLi9kYXRhL2NhdGFsb2cnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQXZhaWxhYmxlRGF0ZXNTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1ldGFkYXRhOk1ldGFkYXRhU2VydmljZSkge1xuXG4gIH1cblxuICBwcml2YXRlIGZuRm9yWWVhcihtYXBwZWQ6TWFwcGVkTGF5ZXIseWVhcjpudW1iZXIpe1xuICAgIGNvbnN0IHB1YmxpY2F0aW9uID0gbWFwcGVkLmxheWVyLnB1YmxpY2F0aW9uc1ttYXBwZWQub3B0aW9ucy5wdWJsaWNhdGlvbl07XG4gICAgcmV0dXJuIEludGVycG9sYXRpb25TZXJ2aWNlLmludGVycG9sYXRlKHB1YmxpY2F0aW9uLm9wdGlvbnMuZmlsZXBhdGgsIHtcbiAgICAgIHllYXI6IHllYXJcbiAgICB9KTtcbiAgfVxuXG4gIGF2YWlsYWJsZURhdGVzKG1hcHBlZDpNYXBwZWRMYXllcix5ZWFyPzpudW1iZXIpOk9ic2VydmFibGU8RGF0ZVtdPntcbiAgICBsZXQgbGF5ZXIgPSBtYXBwZWQubGF5ZXI7XG4gICAgbGV0IGZuID0gdGhpcy5mbkZvclllYXIobWFwcGVkLHllYXIpO1xuXG4gICAgbGV0IHJlcyQgPSB0aGlzLm1ldGFkYXRhLmdldFRpbWVEaW1lbnNpb24obGF5ZXIub3B0aW9ucy5ob3N0LGZuKTtcblxuICAgIGlmKCFsYXllci50aW1lc2hpZnQpe1xuICAgICAgcmV0dXJuIHJlcyQ7XG4gICAgfVxuXG4gICAgaWYobGF5ZXIudGltZVBlcmlvZC5jb250YWluc1llYXIoeWVhci0xKSl7XG4gICAgICBmbiA9IHRoaXMuZm5Gb3JZZWFyKG1hcHBlZCx5ZWFyLTEpO1xuXG4gICAgICBsZXQgcHJldiQgPSB0aGlzLm1ldGFkYXRhLmdldFRpbWVEaW1lbnNpb24obGF5ZXIuaG9zdCxmbik7XG5cbiAgICAgIHJlcyQgPSBmb3JrSm9pbiguLi5bcHJldiQscmVzJF0pLnBpcGUoXG4gICAgICAgIG1hcCgoeWVhcnM6RGF0ZVtdW10pPT4geWVhcnNbMF0uY29uY2F0KHllYXJzWzFdKSkpO1xuICAgIH1cblxuICAgIHJldHVybiByZXMkLnBpcGUoXG4gICAgICAgIG1hcChkYXRlcz0+e1xuICAgICAgICAgIHJldHVybiBkYXRlcy5tYXAoZD0+e1xuICAgICAgICAgICAgbGV0IHJlcyA9IG5ldyBEYXRlKGQuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgIHJlcy5zZXRVVENEYXRlKGQuZ2V0VVRDRGF0ZSgpLWxheWVyLnRpbWVzaGlmdCpsYXllci50aW1lc3RlcCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KSxcbiAgICAgICAgbWFwKGRhdGVzPT5kYXRlcy5maWx0ZXIoKGQsaSk9PihpPj1NYXRoLmFicyhsYXllci50aW1lc2hpZnQpKSYmKGQuZ2V0VVRDRnVsbFllYXIoKT09PXllYXIpKSlcbiAgICApO1xuICB9XG59XG4iXX0=