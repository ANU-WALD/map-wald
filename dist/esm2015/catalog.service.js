import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Catalog } from './data/catalog';
import { tap, map } from 'rxjs/operators';
import { MappedLayer } from './data/mapped-layer';
import { MetadataService } from './metadata.service';
export class CatalogService {
    constructor(_http, metadata) {
        this._http = _http;
        this.metadata = metadata;
    }
    load(catalogJSON) {
        this.current = new Catalog(catalogJSON);
        this.current.allLayers().filter(l => l.options.smallExtent).forEach(l => {
            l.spatialExtent = this.findExtentOfLayer(l);
        });
    }
    loadFrom(path) {
        return this._http.get(path).pipe(tap(json => this.load(json)), map(_ => this.current));
        //   var result = new Promise<Catalog>((res,rej)=>{
        //     this._http.get(path).subscribe(json=>{
        //       this.load(json);
        //       res(this.current);
        //     });
        //   });
        // return from(result);
    }
    findExtentOfLayer(l) {
        const tmp = new MappedLayer();
        tmp.layer = l;
        tmp.update();
        return this.metadata.getSpatialExtent(tmp);
    }
}
CatalogService.decorators = [
    { type: Injectable }
];
CatalogService.ctorParameters = () => [
    { type: HttpClient },
    { type: MetadataService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2F0YWxvZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uL3NyYy8iLCJzb3VyY2VzIjpbImNhdGFsb2cuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsT0FBTyxFQUFTLE1BQU0sZ0JBQWdCLENBQUM7QUFFaEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUxQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBR3JELE1BQU0sT0FBTyxjQUFjO0lBR3pCLFlBQW9CLEtBQWdCLEVBQVUsUUFBd0I7UUFBbEQsVUFBSyxHQUFMLEtBQUssQ0FBVztRQUFVLGFBQVEsR0FBUixRQUFRLENBQWdCO0lBQ3RFLENBQUM7SUFFRCxJQUFJLENBQUMsV0FBZTtRQUNsQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRXhDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQSxFQUFFLENBQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBLEVBQUU7WUFDbkUsQ0FBQyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDN0MsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsUUFBUSxDQUFDLElBQVc7UUFDbEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQzlCLEdBQUcsQ0FBQyxJQUFJLENBQUEsRUFBRSxDQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDMUIsR0FBRyxDQUFDLENBQUMsQ0FBQSxFQUFFLENBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFeEIsbURBQW1EO1FBQ25ELDZDQUE2QztRQUM3Qyx5QkFBeUI7UUFDekIsMkJBQTJCO1FBQzNCLFVBQVU7UUFDVixRQUFRO1FBRVIsdUJBQXVCO0lBQ3pCLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxDQUFRO1FBQ3hCLE1BQU0sR0FBRyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFDOUIsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDYixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0MsQ0FBQzs7O1lBbkNGLFVBQVU7OztZQVJGLFVBQVU7WUFNVixlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IENhdGFsb2csIExheWVyIH0gZnJvbSAnLi9kYXRhL2NhdGFsb2cnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFwLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBCb3VuZHMgfSBmcm9tICcuL2RhdGEvYm91bmRzJztcbmltcG9ydCB7IE1hcHBlZExheWVyIH0gZnJvbSAnLi9kYXRhL21hcHBlZC1sYXllcic7XG5pbXBvcnQgeyBNZXRhZGF0YVNlcnZpY2UgfSBmcm9tICcuL21ldGFkYXRhLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ2F0YWxvZ1NlcnZpY2Uge1xuICBjdXJyZW50OkNhdGFsb2c7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfaHR0cDpIdHRwQ2xpZW50LCBwcml2YXRlIG1ldGFkYXRhOk1ldGFkYXRhU2VydmljZSl7XG4gIH1cblxuICBsb2FkKGNhdGFsb2dKU09OOmFueSl7XG4gICAgdGhpcy5jdXJyZW50ID0gbmV3IENhdGFsb2coY2F0YWxvZ0pTT04pO1xuXG4gICAgdGhpcy5jdXJyZW50LmFsbExheWVycygpLmZpbHRlcihsPT5sLm9wdGlvbnMuc21hbGxFeHRlbnQpLmZvckVhY2gobD0+e1xuICAgICAgbC5zcGF0aWFsRXh0ZW50ID0gdGhpcy5maW5kRXh0ZW50T2ZMYXllcihsKVxuICAgIH0pO1xuICB9XG5cbiAgbG9hZEZyb20ocGF0aDpzdHJpbmcpOk9ic2VydmFibGU8Q2F0YWxvZz57XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0KHBhdGgpLnBpcGUoXG4gICAgICB0YXAoanNvbj0+dGhpcy5sb2FkKGpzb24pKSxcbiAgICAgIG1hcChfPT50aGlzLmN1cnJlbnQpKTtcblxuICAgIC8vICAgdmFyIHJlc3VsdCA9IG5ldyBQcm9taXNlPENhdGFsb2c+KChyZXMscmVqKT0+e1xuICAgIC8vICAgICB0aGlzLl9odHRwLmdldChwYXRoKS5zdWJzY3JpYmUoanNvbj0+e1xuICAgIC8vICAgICAgIHRoaXMubG9hZChqc29uKTtcbiAgICAvLyAgICAgICByZXModGhpcy5jdXJyZW50KTtcbiAgICAvLyAgICAgfSk7XG4gICAgLy8gICB9KTtcblxuICAgIC8vIHJldHVybiBmcm9tKHJlc3VsdCk7XG4gIH1cblxuICBmaW5kRXh0ZW50T2ZMYXllcihsOiBMYXllcik6T2JzZXJ2YWJsZTxCb3VuZHM+e1xuICAgIGNvbnN0IHRtcCA9IG5ldyBNYXBwZWRMYXllcigpO1xuICAgIHRtcC5sYXllciA9IGw7XG4gICAgdG1wLnVwZGF0ZSgpO1xuICAgIHJldHVybiB0aGlzLm1ldGFkYXRhLmdldFNwYXRpYWxFeHRlbnQodG1wKTtcbiAgfVxufVxuIl19