import { Injectable } from '@angular/core';
export function utcDate(y, m, d) {
    return new Date(Date.UTC(y, m, d));
}
export function utcDateCopy(d) {
    return utcDate(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());
}
export class TimeUtilsService {
    constructor() {
        this.specialDates = {
            yesterday: () => {
                var d = new Date();
                d.setDate(d.getDate() - 1);
                return d;
            }
        };
    }
    convertDate(d) {
        if (!d) {
            d = new Date();
        }
        var date;
        if (typeof (d) === 'string') {
            var dateText = d;
            if (this.specialDates[dateText]) {
                date = this.specialDates[dateText]();
            }
            else {
                var [year, month, day, other] = d.split('-').map(c => +c);
                date = utcDate(year, month, day);
            }
        }
        else {
            date = d;
        }
        return {
            day: date.getUTCDate(),
            month: date.getUTCMonth() + 1,
            year: date.getUTCFullYear()
        };
    }
    datesEqual(lhs, rhs) {
        if (!lhs || !rhs) {
            return false;
        }
        return (lhs.year === rhs.year) &&
            (lhs.month === rhs.month) &&
            (lhs.day === rhs.day);
    }
}
TimeUtilsService.decorators = [
    { type: Injectable }
];
TimeUtilsService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS11dGlscy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWFwLXdhbGQvIiwic291cmNlcyI6WyJ0aW1lLXV0aWxzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQW9CM0MsTUFBTSxVQUFVLE9BQU8sQ0FBQyxDQUFRLEVBQUMsQ0FBUyxFQUFDLENBQVM7SUFDbEQsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxDQUFTO0lBQ25DLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUUsRUFBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDcEUsQ0FBQztBQUdELE1BQU0sT0FBTyxnQkFBZ0I7SUFFM0I7UUFJQSxpQkFBWSxHQUFnQztZQUMxQyxTQUFTLEVBQUUsR0FBRyxFQUFFO2dCQUNkLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7Z0JBQ25CLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUMzQixPQUFPLENBQUMsQ0FBQztZQUNYLENBQUM7U0FDRixDQUFBO0lBUkQsQ0FBQztJQVVELFdBQVcsQ0FBQyxDQUFrQjtRQUM1QixJQUFHLENBQUMsQ0FBQyxFQUFDO1lBQ0osQ0FBQyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7U0FDaEI7UUFFRCxJQUFJLElBQVksQ0FBQztRQUNqQixJQUFHLE9BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLEVBQUM7WUFDeEIsSUFBSSxRQUFRLEdBQVUsQ0FBQyxDQUFDO1lBQ3hCLElBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsRUFBQztnQkFDN0IsSUFBSSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQzthQUN0QztpQkFBTTtnQkFDTCxJQUFJLENBQUMsSUFBSSxFQUFDLEtBQUssRUFBQyxHQUFHLEVBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN2RCxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBQyxLQUFLLEVBQUMsR0FBRyxDQUFDLENBQUM7YUFDaEM7U0FDRjthQUFNO1lBQ0wsSUFBSSxHQUFHLENBQUMsQ0FBQztTQUNWO1FBRUQsT0FBTztZQUNMLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3RCLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQztZQUM3QixJQUFJLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRTtTQUM1QixDQUFDO0lBQ0osQ0FBQztJQUVELFVBQVUsQ0FBQyxHQUFjLEVBQUMsR0FBYztRQUN0QyxJQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFDO1lBQ2QsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDdkIsQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUM7WUFDekIsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUUvQixDQUFDOzs7WUFqREYsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBEYXRlU3RydWN0IHtcbiAgLy8gbmctYm9vdHN0cmFwXG4gIGRheTpudW1iZXI7XG4gIG1vbnRoOm51bWJlcjtcbiAgeWVhcjpudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVVRDRGF0ZSB7XG4gIGdldFRpbWUoKTogbnVtYmVyO1xuICBnZXRVVENGdWxsWWVhcigpOiBudW1iZXI7XG4gIGdldFVUQ01vbnRoKCk6bnVtYmVyO1xuICBnZXRVVENEYXRlKCk6bnVtYmVyO1xuXG4gIHNldFVUQ0Z1bGxZZWFyKG46IG51bWJlcik6dm9pZDtcbiAgc2V0VVRDTW9udGgobjpudW1iZXIpOnZvaWQ7XG4gIHNldFVUQ0RhdGUobjpudW1iZXIpOnZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1dGNEYXRlKHk6bnVtYmVyLG0/Om51bWJlcixkPzpudW1iZXIpOlVUQ0RhdGV7XG4gIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyh5LG0sZCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXRjRGF0ZUNvcHkoZDpVVENEYXRlKXtcbiAgcmV0dXJuIHV0Y0RhdGUoZC5nZXRVVENGdWxsWWVhcigpLGQuZ2V0VVRDTW9udGgoKSxkLmdldFVUQ0RhdGUoKSk7XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUaW1lVXRpbHNTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcblxuICB9XG5cbiAgc3BlY2lhbERhdGVzOiB7W2tleTpzdHJpbmddOigoKSA9PiBEYXRlKX0gPSB7XG4gICAgeWVzdGVyZGF5OiAoKSA9PiB7XG4gICAgICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gICAgICBkLnNldERhdGUoZC5nZXREYXRlKCkgLSAxKTtcbiAgICAgIHJldHVybiBkO1xuICAgIH1cbiAgfVxuXG4gIGNvbnZlcnREYXRlKGQ6KFVUQ0RhdGV8c3RyaW5nKSk6RGF0ZVN0cnVjdHtcbiAgICBpZighZCl7XG4gICAgICBkID0gbmV3IERhdGUoKTtcbiAgICB9XG5cbiAgICB2YXIgZGF0ZTpVVENEYXRlO1xuICAgIGlmKHR5cGVvZihkKSA9PT0gJ3N0cmluZycpe1xuICAgICAgdmFyIGRhdGVUZXh0OnN0cmluZyA9IGQ7XG4gICAgICBpZih0aGlzLnNwZWNpYWxEYXRlc1tkYXRlVGV4dF0pe1xuICAgICAgICBkYXRlID0gdGhpcy5zcGVjaWFsRGF0ZXNbZGF0ZVRleHRdKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgW3llYXIsbW9udGgsZGF5LG90aGVyXSA9IGQuc3BsaXQoJy0nKS5tYXAoYyA9PiArYyk7XG4gICAgICAgIGRhdGUgPSB1dGNEYXRlKHllYXIsbW9udGgsZGF5KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0ZSA9IGQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRheTogZGF0ZS5nZXRVVENEYXRlKCksXG4gICAgICBtb250aDogZGF0ZS5nZXRVVENNb250aCgpICsgMSxcbiAgICAgIHllYXI6IGRhdGUuZ2V0VVRDRnVsbFllYXIoKVxuICAgIH07XG4gIH1cblxuICBkYXRlc0VxdWFsKGxoczpEYXRlU3RydWN0LHJoczpEYXRlU3RydWN0KTpib29sZWFue1xuICAgIGlmKCFsaHMgfHwgIXJocyl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIChsaHMueWVhciA9PT0gcmhzLnllYXIpICYmXG4gICAgICAgICAgIChsaHMubW9udGggPT09IHJocy5tb250aCkgJiZcbiAgICAgICAgICAgKGxocy5kYXkgPT09IHJocy5kYXkpO1xuXG4gIH1cbn1cbiJdfQ==