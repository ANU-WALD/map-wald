import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
export function utcDate(y, m, d) {
    return new Date(Date.UTC(y, m, d));
}
export function utcDateCopy(d) {
    return utcDate(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());
}
let TimeUtilsService = class TimeUtilsService {
    constructor() {
        this.specialDates = {
            yesterday: () => {
                var d = new Date();
                d.setDate(d.getDate() - 1);
                return d;
            }
        };
    }
    convertDate(d) {
        if (!d) {
            d = new Date();
        }
        var date;
        if (typeof (d) === 'string') {
            var dateText = d;
            if (this.specialDates[dateText]) {
                date = this.specialDates[dateText]();
            }
            else {
                var [year, month, day, other] = d.split('-').map(c => +c);
                date = utcDate(year, month, day);
            }
        }
        else {
            date = d;
        }
        return {
            day: date.getUTCDate(),
            month: date.getUTCMonth() + 1,
            year: date.getUTCFullYear()
        };
    }
    datesEqual(lhs, rhs) {
        if (!lhs || !rhs) {
            return false;
        }
        return (lhs.year === rhs.year) &&
            (lhs.month === rhs.month) &&
            (lhs.day === rhs.day);
    }
};
TimeUtilsService = tslib_1.__decorate([
    Injectable()
], TimeUtilsService);
export { TimeUtilsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS11dGlscy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWFwLXdhbGQvIiwic291cmNlcyI6WyJ0aW1lLXV0aWxzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFjM0MsTUFBTSxVQUFVLE9BQU8sQ0FBQyxDQUFRLEVBQUMsQ0FBUyxFQUFDLENBQVM7SUFDbEQsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxDQUFTO0lBQ25DLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUUsRUFBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDcEUsQ0FBQztBQUdELElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0lBRTNCO1FBSUEsaUJBQVksR0FBZ0M7WUFDMUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtnQkFDZCxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO2dCQUNuQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDM0IsT0FBTyxDQUFDLENBQUM7WUFDWCxDQUFDO1NBQ0YsQ0FBQTtJQVJELENBQUM7SUFVRCxXQUFXLENBQUMsQ0FBa0I7UUFDNUIsSUFBRyxDQUFDLENBQUMsRUFBQztZQUNKLENBQUMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1NBQ2hCO1FBRUQsSUFBSSxJQUFZLENBQUM7UUFDakIsSUFBRyxPQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxFQUFDO1lBQ3hCLElBQUksUUFBUSxHQUFVLENBQUMsQ0FBQztZQUN4QixJQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEVBQUM7Z0JBQzdCLElBQUksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7YUFDdEM7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLElBQUksRUFBQyxLQUFLLEVBQUMsR0FBRyxFQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdkQsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUMsS0FBSyxFQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2hDO1NBQ0Y7YUFBTTtZQUNMLElBQUksR0FBRyxDQUFDLENBQUM7U0FDVjtRQUVELE9BQU87WUFDTCxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUN0QixLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUM7WUFDN0IsSUFBSSxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUU7U0FDNUIsQ0FBQztJQUNKLENBQUM7SUFFRCxVQUFVLENBQUMsR0FBaUIsRUFBQyxHQUFpQjtRQUM1QyxJQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFDO1lBQ2QsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDdkIsQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUM7WUFDekIsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUUvQixDQUFDO0NBQ0YsQ0FBQTtBQWpEWSxnQkFBZ0I7SUFENUIsVUFBVSxFQUFFO0dBQ0EsZ0JBQWdCLENBaUQ1QjtTQWpEWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ2JEYXRlU3RydWN0IH0gZnJvbSBcIkBuZy1ib290c3RyYXAvbmctYm9vdHN0cmFwXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVVRDRGF0ZSB7XG4gIGdldFRpbWUoKTogbnVtYmVyO1xuICBnZXRVVENGdWxsWWVhcigpOiBudW1iZXI7XG4gIGdldFVUQ01vbnRoKCk6bnVtYmVyO1xuICBnZXRVVENEYXRlKCk6bnVtYmVyO1xuXG4gIHNldFVUQ0Z1bGxZZWFyKG46IG51bWJlcik6dm9pZDtcbiAgc2V0VVRDTW9udGgobjpudW1iZXIpOnZvaWQ7XG4gIHNldFVUQ0RhdGUobjpudW1iZXIpOnZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1dGNEYXRlKHk6bnVtYmVyLG0/Om51bWJlcixkPzpudW1iZXIpOlVUQ0RhdGV7XG4gIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyh5LG0sZCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXRjRGF0ZUNvcHkoZDpVVENEYXRlKXtcbiAgcmV0dXJuIHV0Y0RhdGUoZC5nZXRVVENGdWxsWWVhcigpLGQuZ2V0VVRDTW9udGgoKSxkLmdldFVUQ0RhdGUoKSk7XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUaW1lVXRpbHNTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcblxuICB9XG5cbiAgc3BlY2lhbERhdGVzOiB7W2tleTpzdHJpbmddOigoKSA9PiBEYXRlKX0gPSB7XG4gICAgeWVzdGVyZGF5OiAoKSA9PiB7XG4gICAgICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gICAgICBkLnNldERhdGUoZC5nZXREYXRlKCkgLSAxKTtcbiAgICAgIHJldHVybiBkO1xuICAgIH1cbiAgfVxuXG4gIGNvbnZlcnREYXRlKGQ6KFVUQ0RhdGV8c3RyaW5nKSk6TmdiRGF0ZVN0cnVjdHtcbiAgICBpZighZCl7XG4gICAgICBkID0gbmV3IERhdGUoKTtcbiAgICB9XG5cbiAgICB2YXIgZGF0ZTpVVENEYXRlO1xuICAgIGlmKHR5cGVvZihkKSA9PT0gJ3N0cmluZycpe1xuICAgICAgdmFyIGRhdGVUZXh0OnN0cmluZyA9IGQ7XG4gICAgICBpZih0aGlzLnNwZWNpYWxEYXRlc1tkYXRlVGV4dF0pe1xuICAgICAgICBkYXRlID0gdGhpcy5zcGVjaWFsRGF0ZXNbZGF0ZVRleHRdKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgW3llYXIsbW9udGgsZGF5LG90aGVyXSA9IGQuc3BsaXQoJy0nKS5tYXAoYyA9PiArYyk7XG4gICAgICAgIGRhdGUgPSB1dGNEYXRlKHllYXIsbW9udGgsZGF5KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0ZSA9IGQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRheTogZGF0ZS5nZXRVVENEYXRlKCksXG4gICAgICBtb250aDogZGF0ZS5nZXRVVENNb250aCgpICsgMSxcbiAgICAgIHllYXI6IGRhdGUuZ2V0VVRDRnVsbFllYXIoKVxuICAgIH07XG4gIH1cblxuICBkYXRlc0VxdWFsKGxoczpOZ2JEYXRlU3RydWN0LHJoczpOZ2JEYXRlU3RydWN0KTpib29sZWFue1xuICAgIGlmKCFsaHMgfHwgIXJocyl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIChsaHMueWVhciA9PT0gcmhzLnllYXIpICYmXG4gICAgICAgICAgIChsaHMubW9udGggPT09IHJocy5tb250aCkgJiZcbiAgICAgICAgICAgKGxocy5kYXkgPT09IHJocy5kYXkpO1xuXG4gIH1cbn1cbiJdfQ==