import { Injectable } from '@angular/core';
export function utcDate(y, m, d) {
    return new Date(Date.UTC(y, m, d));
}
export function utcDateCopy(d) {
    return utcDate(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());
}
export class TimeUtilsService {
    constructor() {
        this.specialDates = {
            yesterday: () => {
                var d = new Date();
                d.setDate(d.getDate() - 1);
                return d;
            }
        };
    }
    convertDate(d) {
        if (!d) {
            d = new Date();
        }
        var date;
        if (typeof (d) === 'string') {
            var dateText = d;
            if (this.specialDates[dateText]) {
                date = this.specialDates[dateText]();
            }
            else {
                var [year, month, day, other] = d.split('-').map(c => +c);
                date = utcDate(year, month, day);
            }
        }
        else {
            date = d;
        }
        return {
            day: date.getUTCDate(),
            month: date.getUTCMonth() + 1,
            year: date.getUTCFullYear()
        };
    }
    datesEqual(lhs, rhs) {
        if (!lhs || !rhs) {
            return false;
        }
        return (lhs.year === rhs.year) &&
            (lhs.month === rhs.month) &&
            (lhs.day === rhs.day);
    }
}
TimeUtilsService.decorators = [
    { type: Injectable }
];
TimeUtilsService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS11dGlscy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uL3NyYy8iLCJzb3VyY2VzIjpbInRpbWUtdXRpbHMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBb0IzQyxNQUFNLFVBQVUsT0FBTyxDQUFDLENBQVEsRUFBQyxDQUFTLEVBQUMsQ0FBUztJQUNsRCxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLENBQVM7SUFDbkMsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUNwRSxDQUFDO0FBR0QsTUFBTSxPQUFPLGdCQUFnQjtJQUUzQjtRQUlBLGlCQUFZLEdBQWdDO1lBQzFDLFNBQVMsRUFBRSxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztnQkFDbkIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLE9BQU8sQ0FBQyxDQUFDO1lBQ1gsQ0FBQztTQUNGLENBQUE7SUFSRCxDQUFDO0lBVUQsV0FBVyxDQUFDLENBQWtCO1FBQzVCLElBQUcsQ0FBQyxDQUFDLEVBQUM7WUFDSixDQUFDLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztTQUNoQjtRQUVELElBQUksSUFBWSxDQUFDO1FBQ2pCLElBQUcsT0FBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBQztZQUN4QixJQUFJLFFBQVEsR0FBVSxDQUFDLENBQUM7WUFDeEIsSUFBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFDO2dCQUM3QixJQUFJLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO2FBQ3RDO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxJQUFJLEVBQUMsS0FBSyxFQUFDLEdBQUcsRUFBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZELElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxFQUFDLEtBQUssRUFBQyxHQUFHLENBQUMsQ0FBQzthQUNoQztTQUNGO2FBQU07WUFDTCxJQUFJLEdBQUcsQ0FBQyxDQUFDO1NBQ1Y7UUFFRCxPQUFPO1lBQ0wsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDdEIsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDO1lBQzdCLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFO1NBQzVCLENBQUM7SUFDSixDQUFDO0lBRUQsVUFBVSxDQUFDLEdBQWMsRUFBQyxHQUFjO1FBQ3RDLElBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUM7WUFDZCxPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQztZQUN2QixDQUFDLEdBQUcsQ0FBQyxLQUFLLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQztZQUN6QixDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRS9CLENBQUM7OztZQWpERixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERhdGVTdHJ1Y3Qge1xuICAvLyBuZy1ib290c3RyYXBcbiAgZGF5Om51bWJlcjtcbiAgbW9udGg6bnVtYmVyO1xuICB5ZWFyOm51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVVENEYXRlIHtcbiAgZ2V0VGltZSgpOiBudW1iZXI7XG4gIGdldFVUQ0Z1bGxZZWFyKCk6IG51bWJlcjtcbiAgZ2V0VVRDTW9udGgoKTpudW1iZXI7XG4gIGdldFVUQ0RhdGUoKTpudW1iZXI7XG5cbiAgc2V0VVRDRnVsbFllYXIobjogbnVtYmVyKTp2b2lkO1xuICBzZXRVVENNb250aChuOm51bWJlcik6dm9pZDtcbiAgc2V0VVRDRGF0ZShuOm51bWJlcik6dm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHV0Y0RhdGUoeTpudW1iZXIsbT86bnVtYmVyLGQ/Om51bWJlcik6VVRDRGF0ZXtcbiAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKHksbSxkKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1dGNEYXRlQ29weShkOlVUQ0RhdGUpe1xuICByZXR1cm4gdXRjRGF0ZShkLmdldFVUQ0Z1bGxZZWFyKCksZC5nZXRVVENNb250aCgpLGQuZ2V0VVRDRGF0ZSgpKTtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRpbWVVdGlsc1NlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gIH1cblxuICBzcGVjaWFsRGF0ZXM6IHtba2V5OnN0cmluZ106KCgpID0+IERhdGUpfSA9IHtcbiAgICB5ZXN0ZXJkYXk6ICgpID0+IHtcbiAgICAgIHZhciBkID0gbmV3IERhdGUoKTtcbiAgICAgIGQuc2V0RGF0ZShkLmdldERhdGUoKSAtIDEpO1xuICAgICAgcmV0dXJuIGQ7XG4gICAgfVxuICB9XG5cbiAgY29udmVydERhdGUoZDooVVRDRGF0ZXxzdHJpbmcpKTpEYXRlU3RydWN0e1xuICAgIGlmKCFkKXtcbiAgICAgIGQgPSBuZXcgRGF0ZSgpO1xuICAgIH1cblxuICAgIHZhciBkYXRlOlVUQ0RhdGU7XG4gICAgaWYodHlwZW9mKGQpID09PSAnc3RyaW5nJyl7XG4gICAgICB2YXIgZGF0ZVRleHQ6c3RyaW5nID0gZDtcbiAgICAgIGlmKHRoaXMuc3BlY2lhbERhdGVzW2RhdGVUZXh0XSl7XG4gICAgICAgIGRhdGUgPSB0aGlzLnNwZWNpYWxEYXRlc1tkYXRlVGV4dF0oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBbeWVhcixtb250aCxkYXksb3RoZXJdID0gZC5zcGxpdCgnLScpLm1hcChjID0+ICtjKTtcbiAgICAgICAgZGF0ZSA9IHV0Y0RhdGUoeWVhcixtb250aCxkYXkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRlID0gZDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGF5OiBkYXRlLmdldFVUQ0RhdGUoKSxcbiAgICAgIG1vbnRoOiBkYXRlLmdldFVUQ01vbnRoKCkgKyAxLFxuICAgICAgeWVhcjogZGF0ZS5nZXRVVENGdWxsWWVhcigpXG4gICAgfTtcbiAgfVxuXG4gIGRhdGVzRXF1YWwobGhzOkRhdGVTdHJ1Y3QscmhzOkRhdGVTdHJ1Y3QpOmJvb2xlYW57XG4gICAgaWYoIWxocyB8fCAhcmhzKXtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKGxocy55ZWFyID09PSByaHMueWVhcikgJiZcbiAgICAgICAgICAgKGxocy5tb250aCA9PT0gcmhzLm1vbnRoKSAmJlxuICAgICAgICAgICAobGhzLmRheSA9PT0gcmhzLmRheSk7XG5cbiAgfVxufVxuIl19