const NAMED_OPTIONS = {
    host: 'namedHosts',
    interval: 'namedIntervals'
};
function clone(v) {
    return JSON.parse(JSON.stringify(v));
}
function matchFirstDefinedKey(keys, lhs, rhs) {
    for (let k of keys) {
        if (lhs[k] && rhs[k]) {
            return lhs[k] === rhs[k];
        }
    }
    return false;
}
function mergeArraysByKeys(keys, ...sources) {
    if (!sources.length) {
        return [];
    }
    var result = clone(sources[0]).map(p => new Publication(p));
    for (var i = 1; i < sources.length; i++) {
        var source = sources[i];
        for (var j = 0; j < source.length; j++) {
            var publication = source[j];
            var match = result.findIndex((pub) => matchFirstDefinedKey(keys, pub, publication));
            if (match >= 0) {
                var options = Object.assign({}, publication.options || {}, result[match].options || {});
                result[match] = Object.assign(new Publication(), publication, result[match]);
                result[match].options = options;
            }
            else {
                result.push(new Publication(clone(publication)));
            }
        }
    }
    result = result.filter(p => !p.skip);
    return result;
}
function propagate(target, source, skipPublications) {
    target.options = Object.assign({}, source.options || {}, target.options || {});
    if (!skipPublications) {
        target.publications = mergeArraysByKeys(['timestep', 'label'], target.publications || [], source.publications || []);
        //    console.log(target.publications);
    }
}
function instantiateNamedOptions(dest, source) {
    for (var key in NAMED_OPTIONS) {
        const configKey = NAMED_OPTIONS[key];
        if (!source[configKey]) {
            continue;
        }
        if (!dest[key] || (typeof (dest[key]) !== 'string')) {
            continue;
        }
        const lookup = dest[key];
        dest[key] = source[configKey][lookup];
    }
}
export class CatalogOptions {
}
export class Catalog {
    constructor(config) {
        this.themes = [];
        if (!config) {
            return;
        }
        Object.assign(this, config);
        this.themes = config.themes.map((t) => new Theme(t));
        this.propagateOptions();
        this.instantiateNamedOptions();
    }
    propagateOptions() {
        this.themes.forEach(t => {
            propagate(t, this);
            t.propagateOptions();
        });
    }
    instantiateNamedOptions() {
        if (this.publications) {
            this.publications.forEach(p => p.instantiateNamedOptions(this));
        }
        this.themes.forEach(t => t.instantiateNamedOptions(this));
    }
    allLayers() {
        return this.themes.map(t => t.layers).reduce((prev, curr) => prev.concat(curr), []);
    }
}
export class Theme {
    constructor(config) {
        this.layers = [];
        if (!config) {
            return;
        }
        Object.assign(this, config);
        if (config.layers) {
            this.layers = config.layers.map((l) => new Layer(l));
        }
        else {
            this.layers = [];
        }
    }
    propagateOptions() {
        this.layers.forEach(l => {
            propagate(l, this);
            l.propagateOptions();
            l.dataCreator = l.dataCreator || this.dataCreator;
        });
    }
    instantiateNamedOptions(source) {
        instantiateNamedOptions(this.options, source);
        this.publications.forEach(p => p.instantiateNamedOptions(source));
        this.layers.forEach(l => l.instantiateNamedOptions(source));
    }
}
export class Layer {
    constructor(config) {
        this.publications = [];
        this.options = new CatalogOptions();
        if (!config) {
            return;
        }
        Object.assign(this, config);
        if (config.publications) {
            this.publications = config.publications.map((p) => new Publication(p));
        }
        else {
            this.publications = [];
        }
    }
    propagateOptions() {
        this.publications.forEach(p => {
            propagate(p, this, true);
        });
    }
    instantiateNamedOptions(source) {
        instantiateNamedOptions(this.options, source);
        this.publications.forEach(p => p.instantiateNamedOptions(source));
    }
}
export class Publication {
    constructor(config) {
        this.options = new CatalogOptions();
        if (!config) {
            return;
        }
        Object.assign(this, config);
    }
    instantiateNamedOptions(source) {
        instantiateNamedOptions(this.options, source);
    }
}
//# sourceMappingURL=data:application/json;base64,