import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
let TreeFilterService = class TreeFilterService {
    constructor() {
    }
    filterTree(tree, filterText) {
        tree.visible = false;
        filterText = filterText.trim().toLowerCase();
        const containsFilterText = (label, filterText) => label.trim().toLowerCase().indexOf(filterText) !== -1;
        tree.visible = containsFilterText(tree.label, filterText);
        if (tree.hasOwnProperty("children")) {
            if (tree.visible) {
                tree.children.forEach(child => this.showAll(child));
            }
            else {
                tree.children.map(child => {
                    this.filterTree(child, filterText);
                    tree.visible = tree.visible || child.visible;
                    tree.expanded = tree.expanded || child.visible || child.expanded;
                });
            }
        }
        return tree;
    }
    showAll(tree) {
        tree.visible = true;
        if (tree.hasOwnProperty("children")) {
            tree.children.forEach(c => this.showAll(c));
        }
    }
};
TreeFilterService = tslib_1.__decorate([
    Injectable()
], TreeFilterService);
export { TreeFilterService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1maWx0ZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hcC13YWxkLyIsInNvdXJjZXMiOlsidHJlZS1maWx0ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzQyxJQUFhLGlCQUFpQixHQUE5QixNQUFhLGlCQUFpQjtJQUU1QjtJQUNBLENBQUM7SUFFRCxVQUFVLENBQUMsSUFBZSxFQUFFLFVBQWtCO1FBRTVDLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBRXJCLFVBQVUsR0FBRyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFN0MsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEtBQWEsRUFBRSxVQUFrQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRXhILElBQUksQ0FBQyxPQUFPLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztRQUUxRCxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDbkMsSUFBRyxJQUFJLENBQUMsT0FBTyxFQUFDO2dCQUNkLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQSxFQUFFLENBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ25EO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUN4QixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztvQkFFbkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUM7b0JBQzdDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUM7Z0JBQ25FLENBQUMsQ0FBQyxDQUFDO2FBQ0o7U0FDRjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBRWQsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFjO1FBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUMsSUFBSSxDQUFDO1FBQ2xCLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNuQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUEsRUFBRSxDQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMzQztJQUNILENBQUM7Q0FDRixDQUFBO0FBdENZLGlCQUFpQjtJQUQ3QixVQUFVLEVBQUU7R0FDQSxpQkFBaUIsQ0FzQzdCO1NBdENZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRyZWVNb2RlbCB9IGZyb20gJy4vZGF0YS90cmVlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRyZWVGaWx0ZXJTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIGZpbHRlclRyZWUodHJlZTogVHJlZU1vZGVsLCBmaWx0ZXJUZXh0OiBzdHJpbmcpIHtcblxuICAgIHRyZWUudmlzaWJsZSA9IGZhbHNlO1xuXG4gICAgZmlsdGVyVGV4dCA9IGZpbHRlclRleHQudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBjb25zdCBjb250YWluc0ZpbHRlclRleHQgPSAobGFiZWw6IHN0cmluZywgZmlsdGVyVGV4dDogc3RyaW5nKSA9PiBsYWJlbC50cmltKCkudG9Mb3dlckNhc2UoKS5pbmRleE9mKGZpbHRlclRleHQpICE9PSAtMTtcblxuICAgIHRyZWUudmlzaWJsZSA9IGNvbnRhaW5zRmlsdGVyVGV4dCh0cmVlLmxhYmVsLCBmaWx0ZXJUZXh0KTtcblxuICAgIGlmICh0cmVlLmhhc093blByb3BlcnR5KFwiY2hpbGRyZW5cIikpIHtcbiAgICAgIGlmKHRyZWUudmlzaWJsZSl7XG4gICAgICAgIHRyZWUuY2hpbGRyZW4uZm9yRWFjaChjaGlsZD0+dGhpcy5zaG93QWxsKGNoaWxkKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmVlLmNoaWxkcmVuLm1hcChjaGlsZCA9PiB7XG4gICAgICAgICAgdGhpcy5maWx0ZXJUcmVlKGNoaWxkLCBmaWx0ZXJUZXh0KTtcblxuICAgICAgICAgIHRyZWUudmlzaWJsZSA9IHRyZWUudmlzaWJsZSB8fCBjaGlsZC52aXNpYmxlO1xuICAgICAgICAgIHRyZWUuZXhwYW5kZWQgPSB0cmVlLmV4cGFuZGVkIHx8IGNoaWxkLnZpc2libGUgfHwgY2hpbGQuZXhwYW5kZWQ7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cmVlO1xuXG4gIH1cblxuICBzaG93QWxsKHRyZWU6VHJlZU1vZGVsKXtcbiAgICB0cmVlLnZpc2libGU9dHJ1ZTtcbiAgICBpZiAodHJlZS5oYXNPd25Qcm9wZXJ0eShcImNoaWxkcmVuXCIpKSB7XG4gICAgICB0cmVlLmNoaWxkcmVuLmZvckVhY2goYz0+dGhpcy5zaG93QWxsKGMpKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==