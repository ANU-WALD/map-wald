import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { parseData, parseDAS, parseDDX, simplify } from 'dap-query-js/dist/dap-query';
import { map, switchMap } from 'rxjs/operators';
import { forkJoin } from 'rxjs';
export class OpendapService {
    constructor(http) {
        this.http = http;
    }
    makeURL(host, filepath) {
        return host.url + '/dodsC/' + filepath;
    }
    get(url) {
        return this.http.get(url, { responseType: 'text' });
    }
    getData(queryUrl, das) {
        return this.get(queryUrl).pipe(map((txt) => simplify(parseData(txt, das))));
    }
    getDAS(url) {
        return this.get(url + '.das').pipe(map(parseDAS));
    }
    getDDX(url) {
        return this.get(url + '.ddx').pipe(map(parseDDX));
    }
    getExtent(url) {
        console.log(url);
        return forkJoin([
            this.getDAS(url),
            this.getDDX(url)
        ]).pipe(switchMap(([theDAS, theDDX]) => {
            var das = theDAS;
            return forkJoin([
                this.getData(url + '.ascii?latitude', das),
                this.getData(url + '.ascii?longitude', das)
            ]);
        }), map((ll) => {
            var lats = ll[0].latitude;
            var lons = ll[1].longitude;
            return [lats[0], lats[lats.length - 1],
                lons[0], lons[lons.length - 1]];
        }));
    }
    dapRangeQuery(from, to, step) {
        step = step || 1;
        if (to === undefined) {
            to = from;
        }
        return '[' + from + ':' + step + ':' + to + ']';
    }
}
OpendapService.decorators = [
    { type: Injectable }
];
OpendapService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlbmRhcC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uL3NyYy8iLCJzb3VyY2VzIjpbIm9wZW5kYXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBQyxRQUFRLEVBQ25DLFFBQVEsRUFBaUQsTUFBTSw2QkFBNkIsQ0FBQztBQUUvRixPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2hELE9BQU8sRUFBYSxRQUFRLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHM0MsTUFBTSxPQUFPLGNBQWM7SUFFekIsWUFBb0IsSUFBZTtRQUFmLFNBQUksR0FBSixJQUFJLENBQVc7SUFFbkMsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFnQixFQUFDLFFBQWU7UUFDdEMsT0FBTyxJQUFJLENBQUMsR0FBRyxHQUFHLFNBQVMsR0FBRyxRQUFRLENBQUM7SUFDekMsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQTtJQUNwRCxDQUFDO0lBRUQsT0FBTyxDQUFDLFFBQWUsRUFBQyxHQUFVO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQzVCLEdBQUcsQ0FBQyxDQUFDLEdBQVUsRUFBQyxFQUFFLENBQUEsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFVO1FBQ2YsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQzlCLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBVTtRQUNmLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUM5QixHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRUQsU0FBUyxDQUFDLEdBQVU7UUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQixPQUFPLFFBQVEsQ0FBQztZQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1lBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1NBQ2pCLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsTUFBTSxDQUFDLEVBQUMsRUFBRTtZQUNuQyxJQUFJLEdBQUcsR0FBa0IsTUFBTSxDQUFDO1lBQ2hDLE9BQU8sUUFBUSxDQUFDO2dCQUNkLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFDLGlCQUFpQixFQUFDLEdBQUcsQ0FBQztnQkFDdkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUMsa0JBQWtCLEVBQUMsR0FBRyxDQUFDO2FBQ3pDLENBQUMsQ0FBQTtRQUFBLENBQUMsQ0FBQyxFQUNKLEdBQUcsQ0FBQyxDQUFDLEVBQVksRUFBQyxFQUFFO1lBQ2xCLElBQUksSUFBSSxHQUF5QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1lBQ2hELElBQUksSUFBSSxHQUF5QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1lBQ2pELE9BQU8sQ0FBUyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDO2dCQUNuQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1IsQ0FBQztJQUVELGFBQWEsQ0FBQyxJQUFXLEVBQUMsRUFBVSxFQUFDLElBQVk7UUFDL0MsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUM7UUFDakIsSUFBRyxFQUFFLEtBQUcsU0FBUyxFQUFDO1lBQ2hCLEVBQUUsR0FBRyxJQUFJLENBQUM7U0FDWDtRQUNELE9BQU8sR0FBRyxHQUFDLElBQUksR0FBQyxHQUFHLEdBQUMsSUFBSSxHQUFDLEdBQUcsR0FBQyxFQUFFLEdBQUMsR0FBRyxDQUFDO0lBQ3RDLENBQUM7OztZQXZERixVQUFVOzs7WUFQRixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IHBhcnNlRGF0YSwgcGFyc2VEQVMscGFyc2VERFgsXG4gIHNpbXBsaWZ5LCBEYXBEYXRhLCBEYXBEQVMsIERhcEREWCwgRGFwVmFyaWFibGVEYXRhQXJyYXkgfSBmcm9tICdkYXAtcXVlcnktanMvZGlzdC9kYXAtcXVlcnknO1xuaW1wb3J0IHsgQ2F0YWxvZ0hvc3QgfSBmcm9tICcuL2RhdGEvY2F0YWxvZyc7XG5pbXBvcnQgeyBtYXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9ic2VydmFibGUsZm9ya0pvaW4gfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE9wZW5kYXBTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6SHR0cENsaWVudCkge1xuXG4gIH1cblxuICBtYWtlVVJMKGhvc3Q6Q2F0YWxvZ0hvc3QsZmlsZXBhdGg6c3RyaW5nKTpzdHJpbmd7XG4gICAgcmV0dXJuIGhvc3QudXJsICsgJy9kb2RzQy8nICsgZmlsZXBhdGg7XG4gIH1cblxuICBnZXQodXJsOnN0cmluZyk6T2JzZXJ2YWJsZTxzdHJpbmc+e1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCx7IHJlc3BvbnNlVHlwZTogJ3RleHQnIH0pXG4gIH1cblxuICBnZXREYXRhKHF1ZXJ5VXJsOnN0cmluZyxkYXM6RGFwREFTKTpPYnNlcnZhYmxlPERhcERhdGE+e1xuICAgIHJldHVybiB0aGlzLmdldChxdWVyeVVybCkucGlwZShcbiAgICAgIG1hcCgodHh0OnN0cmluZyk9PnNpbXBsaWZ5KHBhcnNlRGF0YSh0eHQsZGFzKSkpKTtcbiAgfVxuXG4gIGdldERBUyh1cmw6c3RyaW5nKTpPYnNlcnZhYmxlPERhcERBUz57XG4gICAgcmV0dXJuIHRoaXMuZ2V0KHVybCsnLmRhcycpLnBpcGUoXG4gICAgICBtYXAocGFyc2VEQVMpKTtcbiAgfVxuXG4gIGdldEREWCh1cmw6c3RyaW5nKTpPYnNlcnZhYmxlPERhcEREWD57XG4gICAgcmV0dXJuIHRoaXMuZ2V0KHVybCsnLmRkeCcpLnBpcGUoXG4gICAgICBtYXAocGFyc2VERFgpKTtcbiAgfVxuXG4gIGdldEV4dGVudCh1cmw6c3RyaW5nKTpPYnNlcnZhYmxlPG51bWJlcltdPntcbiAgICBjb25zb2xlLmxvZyh1cmwpO1xuICAgIHJldHVybiBmb3JrSm9pbihbXG4gICAgICB0aGlzLmdldERBUyh1cmwpLFxuICAgICAgdGhpcy5nZXRERFgodXJsKVxuICAgIF0pLnBpcGUoc3dpdGNoTWFwKChbdGhlREFTLHRoZUREWF0pPT57XG4gICAgICB2YXIgZGFzOkRhcERBUyA9IDxEYXBEQVM+dGhlREFTO1xuICAgICAgcmV0dXJuIGZvcmtKb2luKFtcbiAgICAgICAgdGhpcy5nZXREYXRhKHVybCsnLmFzY2lpP2xhdGl0dWRlJyxkYXMpLFxuICAgICAgICB0aGlzLmdldERhdGEodXJsKycuYXNjaWk/bG9uZ2l0dWRlJyxkYXMpXG4gICAgICBdKX0pLFxuICAgICAgbWFwKChsbDpEYXBEYXRhW10pPT57XG4gICAgICAgIHZhciBsYXRzID0gPERhcFZhcmlhYmxlRGF0YUFycmF5PmxsWzBdLmxhdGl0dWRlO1xuICAgICAgICB2YXIgbG9ucyA9IDxEYXBWYXJpYWJsZURhdGFBcnJheT5sbFsxXS5sb25naXR1ZGU7XG4gICAgICAgIHJldHVybiBbPG51bWJlcj5sYXRzWzBdLDxudW1iZXI+bGF0c1tsYXRzLmxlbmd0aC0xXSxcbiAgICAgICAgICAgICAgICA8bnVtYmVyPmxvbnNbMF0sPG51bWJlcj5sb25zW2xvbnMubGVuZ3RoLTFdXTtcbiAgICAgIH0pKTtcbiAgfVxuXG4gIGRhcFJhbmdlUXVlcnkoZnJvbTpudW1iZXIsdG8/Om51bWJlcixzdGVwPzpudW1iZXIpOnN0cmluZ3tcbiAgICBzdGVwID0gc3RlcCB8fCAxO1xuICAgIGlmKHRvPT09dW5kZWZpbmVkKXtcbiAgICAgIHRvID0gZnJvbTtcbiAgICB9XG4gICAgcmV0dXJuICdbJytmcm9tKyc6JytzdGVwKyc6Jyt0bysnXSc7XG4gIH1cbn1cbiJdfQ==