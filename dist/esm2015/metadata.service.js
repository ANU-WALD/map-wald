import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { OpendapService } from './opendap.service';
import { forkJoin, of } from 'rxjs';
import { publishReplay, refCount, map, switchAll, shareReplay } from 'rxjs/operators';
export const LAT_NAMES = ['latitude', 'lat'];
export const LNG_NAMES = ['longitude', 'lng', 'lon'];
export const TIME_NAMES = ['time', 't', 'Time'];
let MetadataService = class MetadataService {
    constructor(dap) {
        this.dap = dap;
        this.ddxCache = {};
        this.dasCache = {};
        this.timeCache = {};
    }
    identifyCoordinate(ddx, ...possibleNames) {
        for (let n of possibleNames) {
            if (ddx.variables[n]) {
                return n;
            }
        }
        return undefined;
    }
    getDDX(host, file) {
        var url = this.dap.makeURL(host, file);
        return this.ddxForUrl(url);
    }
    ddxForUrl(url) {
        if (!this.ddxCache[url]) {
            this.ddxCache[url] =
                this.dap.getDDX(url).pipe(publishReplay(), refCount());
        }
        return this.ddxCache[url];
    }
    getDDXForLayer(ml) {
        return this.getDDX(ml.flattenedSettings.host, ml.interpolatedFile);
    }
    getDAS(host, file) {
        var url = this.dap.makeURL(host, file);
        return this.dasForUrl(url);
    }
    dasForUrl(url) {
        if (!this.dasCache[url]) {
            this.dasCache[url] =
                this.dap.getDAS(url).pipe(publishReplay(), refCount());
        }
        return this.dasCache[url];
    }
    getDASForLayer(ml) {
        return this.getDAS(ml.flattenedSettings.host, ml.interpolatedFile);
    }
    getMetadata(ml) {
        if (ml.flattenedSettings.host.software !== 'tds') {
            return of({});
        }
        return forkJoin([this.getDASForLayer(ml), this.getDDXForLayer(ml)]).pipe(map(meta => {
            return {
                das: meta[0],
                ddx: meta[1]
            };
        }), map(meta => {
            return Object.assign({}, meta.das.attr || {}, meta.ddx.variables[ml.flattenedSettings.layer || ml.flattenedSettings.variable] || {});
        }));
    }
    populateMetadata(ml) {
        this.getMetadata(ml).subscribe(entry => {
            setTimeout(() => {
                ml.retrievedMetadata = entry;
            });
        });
    }
    getGrid(host, file) {
        const url = this.dap.makeURL(host, file);
        return this.getGridForURL(url);
    }
    getGridForURL(url) {
        const ddx$ = this.ddxForUrl(url);
        const das$ = this.dasForUrl(url);
        const res$ = forkJoin([ddx$, das$]).pipe(map((metadata) => {
            const ddx = metadata[0];
            const das = metadata[1];
            const latCoord = this.identifyCoordinate(ddx, ...LAT_NAMES);
            const lngCoord = this.identifyCoordinate(ddx, ...LNG_NAMES);
            const lat$ = this.dap.getData(`${url}.ascii?${latCoord}`, das).pipe(map((dd) => dd[latCoord]));
            const lng$ = this.dap.getData(`${url}.ascii?${lngCoord}`, das).pipe(map((dd) => dd[lngCoord]));
            return forkJoin(lat$, lng$);
        }), switchAll(), publishReplay(), refCount());
        return res$;
    }
    getGridForLayer(ml) {
        return this.getGrid(ml.flattenedSettings.host, ml.interpolatedFile);
    }
    getSpatialExtent(ml) {
        return this.getGridForLayer(ml).pipe(map(([lats, lngs]) => {
            var result = {
                east: Math.max(...lngs),
                west: Math.min(...lngs),
                north: Math.max(...lats),
                south: Math.min(...lats)
            };
            return result;
        })).pipe(publishReplay(), refCount());
    }
    getTimeDimension(host, file) {
        const url = this.dap.makeURL(host, file);
        return this.getTimeDimensionForURL(url);
    }
    getTimeDimensionForURL(url) {
        if (!this.timeCache[url]) {
            const ddx$ = this.ddxForUrl(url);
            const das$ = this.dasForUrl(url);
            const res$ = forkJoin([ddx$, das$]).pipe(map((metadata) => {
                const ddx = metadata[0];
                const das = metadata[1];
                const timeCoord = this.identifyCoordinate(ddx, ...TIME_NAMES);
                const time$ = this.dap.getData(`${url}.ascii?${timeCoord}`, das).pipe(map((dd) => dd[timeCoord]));
                return time$;
            }), switchAll(), shareReplay());
            this.timeCache[url] = res$;
        }
        return this.timeCache[url];
    }
};
MetadataService.ctorParameters = () => [
    { type: OpendapService }
];
MetadataService = tslib_1.__decorate([
    Injectable()
], MetadataService);
export { MetadataService };
//# sourceMappingURL=data:application/json;base64,