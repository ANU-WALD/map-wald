import { Injectable } from '@angular/core';
import { OpendapService } from './opendap.service';
import { forkJoin, of } from 'rxjs';
import { publishReplay, refCount, map, switchAll, shareReplay } from 'rxjs/operators';
export const LAT_NAMES = ['latitude', 'lat'];
export const LNG_NAMES = ['longitude', 'lng', 'lon'];
export const TIME_NAMES = ['time', 't', 'Time'];
export class MetadataService {
    constructor(dap) {
        this.dap = dap;
        this.ddxCache = {};
        this.dasCache = {};
        this.timeCache = {};
    }
    identifyCoordinate(ddx, ...possibleNames) {
        for (let n of possibleNames) {
            if (ddx.variables[n]) {
                return n;
            }
        }
        return undefined;
    }
    getDDX(host, file) {
        var url = this.dap.makeURL(host, file);
        return this.ddxForUrl(url);
    }
    ddxForUrl(url) {
        if (!this.ddxCache[url]) {
            this.ddxCache[url] =
                this.dap.getDDX(url).pipe(publishReplay(), refCount());
        }
        return this.ddxCache[url];
    }
    getDDXForLayer(ml) {
        return this.getDDX(ml.flattenedSettings.host, ml.interpolatedFile);
    }
    getDAS(host, file) {
        var url = this.dap.makeURL(host, file);
        return this.dasForUrl(url);
    }
    dasForUrl(url) {
        if (!this.dasCache[url]) {
            this.dasCache[url] =
                this.dap.getDAS(url).pipe(publishReplay(), refCount());
        }
        return this.dasCache[url];
    }
    getDASForLayer(ml) {
        return this.getDAS(ml.flattenedSettings.host, ml.interpolatedFile);
    }
    getMetadata(ml) {
        if (ml.flattenedSettings.host.software !== 'tds') {
            return of({});
        }
        return forkJoin([this.getDASForLayer(ml), this.getDDXForLayer(ml)]).pipe(map(meta => {
            return {
                das: meta[0],
                ddx: meta[1]
            };
        }), map(meta => {
            return Object.assign({}, meta.das.attr || {}, meta.ddx.variables[ml.flattenedSettings.layer || ml.flattenedSettings.variable] || {});
        }));
    }
    populateMetadata(ml) {
        this.getMetadata(ml).subscribe(entry => {
            setTimeout(() => {
                ml.retrievedMetadata = entry;
            });
        });
    }
    getGrid(host, file) {
        const url = this.dap.makeURL(host, file);
        return this.getGridForURL(url);
    }
    getGridForURL(url) {
        const ddx$ = this.ddxForUrl(url);
        const das$ = this.dasForUrl(url);
        const res$ = forkJoin([ddx$, das$]).pipe(map((metadata) => {
            const ddx = metadata[0];
            const das = metadata[1];
            const latCoord = this.identifyCoordinate(ddx, ...LAT_NAMES);
            const lngCoord = this.identifyCoordinate(ddx, ...LNG_NAMES);
            const lat$ = this.dap.getData(`${url}.ascii?${latCoord}`, das).pipe(map((dd) => dd[latCoord]));
            const lng$ = this.dap.getData(`${url}.ascii?${lngCoord}`, das).pipe(map((dd) => dd[lngCoord]));
            return forkJoin(lat$, lng$);
        }), switchAll(), publishReplay(), refCount());
        return res$;
    }
    getGridForLayer(ml) {
        return this.getGrid(ml.flattenedSettings.host, ml.interpolatedFile);
    }
    getSpatialExtent(ml) {
        return this.getGridForLayer(ml).pipe(map(([lats, lngs]) => {
            var result = {
                east: Math.max(...lngs),
                west: Math.min(...lngs),
                north: Math.max(...lats),
                south: Math.min(...lats)
            };
            return result;
        })).pipe(publishReplay(), refCount());
    }
    getTimeDimension(host, file) {
        const url = this.dap.makeURL(host, file);
        return this.getTimeDimensionForURL(url);
    }
    getTimeDimensionForURL(url) {
        if (!this.timeCache[url]) {
            const ddx$ = this.ddxForUrl(url);
            const das$ = this.dasForUrl(url);
            const res$ = forkJoin([ddx$, das$]).pipe(map((metadata) => {
                const ddx = metadata[0];
                const das = metadata[1];
                const timeCoord = this.identifyCoordinate(ddx, ...TIME_NAMES);
                const time$ = this.dap.getData(`${url}.ascii?${timeCoord}`, das).pipe(map((dd) => dd[timeCoord]));
                return time$;
            }), switchAll(), shareReplay());
            this.timeCache[url] = res$;
        }
        return this.timeCache[url];
    }
}
MetadataService.decorators = [
    { type: Injectable }
];
MetadataService.ctorParameters = () => [
    { type: OpendapService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tZXRhZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBSW5ELE9BQU8sRUFBRSxRQUFRLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBYSxhQUFhLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQU8sV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHdEcsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFDLENBQUMsVUFBVSxFQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBQyxDQUFDLFdBQVcsRUFBQyxLQUFLLEVBQUMsS0FBSyxDQUFDLENBQUM7QUFDakQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFDLENBQUMsTUFBTSxFQUFDLEdBQUcsRUFBQyxNQUFNLENBQUMsQ0FBQztBQUc1QyxNQUFNLE9BQU8sZUFBZTtJQUkxQixZQUFvQixHQUFrQjtRQUFsQixRQUFHLEdBQUgsR0FBRyxDQUFlO1FBSHRDLGFBQVEsR0FBbUMsRUFBRSxDQUFBO1FBQzdDLGFBQVEsR0FBbUMsRUFBRSxDQUFBO1FBZ0k3QyxjQUFTLEdBQXNDLEVBQUUsQ0FBQztJQTVIbEQsQ0FBQztJQUVELGtCQUFrQixDQUFDLEdBQVUsRUFBQyxHQUFHLGFBQTJCO1FBQzFELEtBQUksSUFBSSxDQUFDLElBQUksYUFBYSxFQUFDO1lBQ3pCLElBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQztnQkFDbEIsT0FBTyxDQUFDLENBQUM7YUFDVjtTQUNGO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELE1BQU0sQ0FB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QyxDQUFDLEVBQUMsU0FBUyxFQUFFLEVBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztTQUM1QjtRQUNELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QixDQUFDOzs7WUF6SkYsVUFBVTs7O1lBWkYsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hcHBlZExheWVyIH0gZnJvbSAnLi9kYXRhL21hcHBlZC1sYXllcic7XG5pbXBvcnQgeyBEYXBERFgsIERhcERBUywgRGFwRGF0YSB9IGZyb20gJ2RhcC1xdWVyeS1qcy9kaXN0L2RhcC1xdWVyeSc7XG5pbXBvcnQgeyBPcGVuZGFwU2VydmljZSB9IGZyb20gJy4vb3BlbmRhcC5zZXJ2aWNlJztcbmltcG9ydCB7IEJvdW5kcyB9IGZyb20gJy4vZGF0YS9ib3VuZHMnO1xuXG5pbXBvcnQgeyBDYXRhbG9nSG9zdCB9IGZyb20gJy4vZGF0YS9jYXRhbG9nJztcbmltcG9ydCB7IGZvcmtKb2luLCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3dpdGNoTWFwLCBwdWJsaXNoUmVwbGF5LCByZWZDb3VudCwgbWFwLCBzd2l0Y2hBbGwsIHRhcCwgc2hhcmVSZXBsYXkgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBVVENEYXRlIH0gZnJvbSAnLi90aW1lLXV0aWxzLnNlcnZpY2UnO1xuXG5leHBvcnQgY29uc3QgTEFUX05BTUVTPVsnbGF0aXR1ZGUnLCdsYXQnXTtcbmV4cG9ydCBjb25zdCBMTkdfTkFNRVM9Wydsb25naXR1ZGUnLCdsbmcnLCdsb24nXTtcbmV4cG9ydCBjb25zdCBUSU1FX05BTUVTPVsndGltZScsJ3QnLCdUaW1lJ107XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNZXRhZGF0YVNlcnZpY2Uge1xuICBkZHhDYWNoZTp7W2tleTpzdHJpbmddOk9ic2VydmFibGU8RGFwRERYPn09e31cbiAgZGFzQ2FjaGU6e1trZXk6c3RyaW5nXTpPYnNlcnZhYmxlPERhcERBUz59PXt9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkYXA6T3BlbmRhcFNlcnZpY2UpIHtcblxuICB9XG5cbiAgaWRlbnRpZnlDb29yZGluYXRlKGRkeDpEYXBERFgsLi4ucG9zc2libGVOYW1lczpBcnJheTxzdHJpbmc+KTpzdHJpbmd7XG4gICAgZm9yKGxldCBuIG9mIHBvc3NpYmxlTmFtZXMpe1xuICAgICAgaWYoZGR4LnZhcmlhYmxlc1tuXSl7XG4gICAgICAgIHJldHVybiBuO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZ2V0RERYKGhvc3Q6Q2F0YWxvZ0hvc3QsZmlsZTpzdHJpbmcpOk9ic2VydmFibGU8RGFwRERYPntcbiAgICB2YXIgdXJsID0gdGhpcy5kYXAubWFrZVVSTChob3N0LGZpbGUpO1xuXG4gICAgcmV0dXJuIHRoaXMuZGR4Rm9yVXJsKHVybCk7XG4gIH1cblxuICBkZHhGb3JVcmwodXJsOnN0cmluZyk6T2JzZXJ2YWJsZTxEYXBERFg+e1xuICAgIGlmKCF0aGlzLmRkeENhY2hlW3VybF0pe1xuICAgICAgdGhpcy5kZHhDYWNoZVt1cmxdID1cbiAgICAgICAgdGhpcy5kYXAuZ2V0RERYKHVybCkucGlwZShwdWJsaXNoUmVwbGF5KCkscmVmQ291bnQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZGR4Q2FjaGVbdXJsXTtcbn1cblxuICBnZXRERFhGb3JMYXllcihtbDpNYXBwZWRMYXllcik6T2JzZXJ2YWJsZTxEYXBERFg+e1xuICAgIHJldHVybiB0aGlzLmdldEREWChtbC5mbGF0dGVuZWRTZXR0aW5ncy5ob3N0LG1sLmludGVycG9sYXRlZEZpbGUpO1xuICB9XG5cbiAgZ2V0REFTKGhvc3Q6Q2F0YWxvZ0hvc3QsZmlsZTpzdHJpbmcpOk9ic2VydmFibGU8RGFwREFTPntcbiAgICB2YXIgdXJsID0gdGhpcy5kYXAubWFrZVVSTChob3N0LGZpbGUpO1xuICAgIHJldHVybiB0aGlzLmRhc0ZvclVybCh1cmwpO1xuICB9XG5cbiAgZGFzRm9yVXJsKHVybDpzdHJpbmcpOk9ic2VydmFibGU8RGFwREFTPntcbiAgICBpZighdGhpcy5kYXNDYWNoZVt1cmxdKXtcbiAgICAgIHRoaXMuZGFzQ2FjaGVbdXJsXSA9XG4gICAgICAgIHRoaXMuZGFwLmdldERBUyh1cmwpLnBpcGUocHVibGlzaFJlcGxheSgpLHJlZkNvdW50KCkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmRhc0NhY2hlW3VybF07XG4gIH1cblxuICBnZXREQVNGb3JMYXllcihtbDpNYXBwZWRMYXllcik6T2JzZXJ2YWJsZTxEYXBEQVM+e1xuICAgIHJldHVybiB0aGlzLmdldERBUyhtbC5mbGF0dGVuZWRTZXR0aW5ncy5ob3N0LG1sLmludGVycG9sYXRlZEZpbGUpO1xuICB9XG5cbiAgZ2V0TWV0YWRhdGEobWw6TWFwcGVkTGF5ZXIpOk9ic2VydmFibGU8YW55PntcbiAgICBpZihtbC5mbGF0dGVuZWRTZXR0aW5ncy5ob3N0LnNvZnR3YXJlICE9PSd0ZHMnKXtcbiAgICAgIHJldHVybiBvZih7fSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvcmtKb2luKFt0aGlzLmdldERBU0ZvckxheWVyKG1sKSx0aGlzLmdldEREWEZvckxheWVyKG1sKV0pLnBpcGUoXG4gICAgICBtYXAobWV0YT0+e1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhczogPERhcERBUz5tZXRhWzBdLFxuICAgICAgICAgIGRkeDogPERhcEREWD5tZXRhWzFdXG4gICAgICAgIH07XG4gICAgICB9KSxcbiAgICAgIG1hcChtZXRhPT57XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhLmRhcy5hdHRyfHx7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YS5kZHgudmFyaWFibGVzW21sLmZsYXR0ZW5lZFNldHRpbmdzLmxheWVyfHxtbC5mbGF0dGVuZWRTZXR0aW5ncy52YXJpYWJsZV18fHt9KTtcbiAgICAgIH0pKTtcbiAgfVxuXG4gIHBvcHVsYXRlTWV0YWRhdGEobWw6TWFwcGVkTGF5ZXIpe1xuICAgIHRoaXMuZ2V0TWV0YWRhdGEobWwpLnN1YnNjcmliZShlbnRyeT0+e1xuICAgICAgc2V0VGltZW91dCgoKT0+e1xuICAgICAgICBtbC5yZXRyaWV2ZWRNZXRhZGF0YSA9IGVudHJ5O1xuICAgICAgfSlcbiAgICB9KTtcbiAgfVxuXG4gIGdldEdyaWQoaG9zdDpDYXRhbG9nSG9zdCxmaWxlOnN0cmluZyk6T2JzZXJ2YWJsZTxudW1iZXJbXVtdPntcbiAgICBjb25zdCB1cmwgPSB0aGlzLmRhcC5tYWtlVVJMKGhvc3QsZmlsZSk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0R3JpZEZvclVSTCh1cmwpO1xuICB9XG5cbiAgZ2V0R3JpZEZvclVSTCh1cmw6c3RyaW5nKTpPYnNlcnZhYmxlPG51bWJlcltdW10+e1xuICAgIGNvbnN0IGRkeCQgPSB0aGlzLmRkeEZvclVybCh1cmwpO1xuICAgIGNvbnN0IGRhcyQgPSB0aGlzLmRhc0ZvclVybCh1cmwpO1xuICAgIGNvbnN0IHJlcyQgPSA8T2JzZXJ2YWJsZTxudW1iZXJbXVtdPj5mb3JrSm9pbihbZGR4JCxkYXMkXSkucGlwZShcbiAgICAgIG1hcCgobWV0YWRhdGE6YW55W10pPT57XG4gICAgICAgIGNvbnN0IGRkeDpEYXBERFggPSBtZXRhZGF0YVswXTtcbiAgICAgICAgY29uc3QgZGFzOkRhcERBUyA9IG1ldGFkYXRhWzFdO1xuXG4gICAgICAgIGNvbnN0IGxhdENvb3JkID0gdGhpcy5pZGVudGlmeUNvb3JkaW5hdGUoZGR4LC4uLkxBVF9OQU1FUyk7XG4gICAgICAgIGNvbnN0IGxuZ0Nvb3JkID0gdGhpcy5pZGVudGlmeUNvb3JkaW5hdGUoZGR4LC4uLkxOR19OQU1FUyk7XG5cbiAgICAgICAgY29uc3QgbGF0JCA9XG4gICAgICAgICAgdGhpcy5kYXAuZ2V0RGF0YShgJHt1cmx9LmFzY2lpPyR7bGF0Q29vcmR9YCxkYXMpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKGRkOkRhcERhdGEpPT48bnVtYmVyW10+ZGRbbGF0Q29vcmRdKSk7XG4gICAgICAgIGNvbnN0IGxuZyQgPVxuICAgICAgICAgIHRoaXMuZGFwLmdldERhdGEoYCR7dXJsfS5hc2NpaT8ke2xuZ0Nvb3JkfWAsZGFzKS5waXBlKFxuICAgICAgICAgICAgbWFwKChkZDpEYXBEYXRhKT0+PG51bWJlcltdPmRkW2xuZ0Nvb3JkXSkpO1xuXG4gICAgICAgIHJldHVybiBmb3JrSm9pbjxudW1iZXJbXT4obGF0JCxsbmckKTtcbiAgICAgIH0pLHN3aXRjaEFsbCgpLHB1Ymxpc2hSZXBsYXkoKSxyZWZDb3VudCgpKTtcbiAgICAgIHJldHVybiByZXMkO1xuICB9XG5cbiAgZ2V0R3JpZEZvckxheWVyKG1sOk1hcHBlZExheWVyKTpPYnNlcnZhYmxlPEFycmF5PEFycmF5PG51bWJlcj4+PntcbiAgICByZXR1cm4gdGhpcy5nZXRHcmlkKG1sLmZsYXR0ZW5lZFNldHRpbmdzLmhvc3QsbWwuaW50ZXJwb2xhdGVkRmlsZSk7XG4gIH1cblxuICBnZXRTcGF0aWFsRXh0ZW50KG1sOk1hcHBlZExheWVyKTpPYnNlcnZhYmxlPEJvdW5kcz57XG4gICAgcmV0dXJuIHRoaXMuZ2V0R3JpZEZvckxheWVyKG1sKS5waXBlKG1hcCgoW2xhdHMsbG5nc10pPT57XG4gICAgICB2YXIgcmVzdWx0OkJvdW5kcyA9IHtcbiAgICAgICAgZWFzdDogTWF0aC5tYXgoLi4ubG5ncyksXG4gICAgICAgIHdlc3Q6IE1hdGgubWluKC4uLmxuZ3MpLFxuICAgICAgICBub3J0aDogTWF0aC5tYXgoLi4ubGF0cyksXG4gICAgICAgIHNvdXRoOiBNYXRoLm1pbiguLi5sYXRzKVxuICAgICAgfTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSkpLnBpcGUocHVibGlzaFJlcGxheSgpLCByZWZDb3VudCgpKTtcbiAgfVxuXG4gIGdldFRpbWVEaW1lbnNpb24oaG9zdDpDYXRhbG9nSG9zdCxmaWxlOnN0cmluZyk6T2JzZXJ2YWJsZTxVVENEYXRlW10+e1xuICAgIGNvbnN0IHVybCA9IHRoaXMuZGFwLm1ha2VVUkwoaG9zdCxmaWxlKTtcbiAgICByZXR1cm4gdGhpcy5nZXRUaW1lRGltZW5zaW9uRm9yVVJMKHVybCk7XG4gIH1cblxuICB0aW1lQ2FjaGU6e1trZXk6c3RyaW5nXTpPYnNlcnZhYmxlPFVUQ0RhdGVbXT59PXt9O1xuXG4gIGdldFRpbWVEaW1lbnNpb25Gb3JVUkwodXJsOnN0cmluZyk6T2JzZXJ2YWJsZTxVVENEYXRlW10+e1xuICAgIGlmKCF0aGlzLnRpbWVDYWNoZVt1cmxdKXtcbiAgICAgIGNvbnN0IGRkeCQgPSB0aGlzLmRkeEZvclVybCh1cmwpO1xuICAgICAgY29uc3QgZGFzJCA9IHRoaXMuZGFzRm9yVXJsKHVybCk7XG4gICAgICBjb25zdCByZXMkID0gPE9ic2VydmFibGU8VVRDRGF0ZVtdPj5mb3JrSm9pbihbZGR4JCxkYXMkXSkucGlwZShcbiAgICAgICAgbWFwKChtZXRhZGF0YTphbnlbXSk9PntcbiAgICAgICAgICBjb25zdCBkZHg6RGFwRERYID0gbWV0YWRhdGFbMF07XG4gICAgICAgICAgY29uc3QgZGFzOkRhcERBUyA9IG1ldGFkYXRhWzFdO1xuXG4gICAgICAgICAgY29uc3QgdGltZUNvb3JkID0gdGhpcy5pZGVudGlmeUNvb3JkaW5hdGUoZGR4LC4uLlRJTUVfTkFNRVMpO1xuXG4gICAgICAgICAgY29uc3QgdGltZSQgPVxuICAgICAgICAgICAgdGhpcy5kYXAuZ2V0RGF0YShgJHt1cmx9LmFzY2lpPyR7dGltZUNvb3JkfWAsZGFzKS5waXBlKFxuICAgICAgICAgICAgICBtYXAoKGRkOkRhcERhdGEpPT48VVRDRGF0ZVtdPmRkW3RpbWVDb29yZF0pKTtcblxuICAgICAgICAgIHJldHVybiB0aW1lJDtcbiAgICAgICAgfSksc3dpdGNoQWxsKCksc2hhcmVSZXBsYXkoKSk7XG4gICAgICB0aGlzLnRpbWVDYWNoZVt1cmxdID0gcmVzJDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudGltZUNhY2hlW3VybF07XG4gIH1cbn1cbiJdfQ==