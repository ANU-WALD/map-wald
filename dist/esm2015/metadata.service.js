import { Injectable } from '@angular/core';
import { OpendapService } from './opendap.service';
import { forkJoin, of } from 'rxjs';
import { publishReplay, refCount, map, switchAll, shareReplay } from 'rxjs/operators';
export const LAT_NAMES = ['latitude', 'lat'];
export const LNG_NAMES = ['longitude', 'lng', 'lon'];
export const TIME_NAMES = ['time', 't', 'Time'];
export class MetadataService {
    constructor(dap) {
        this.dap = dap;
        this.ddxCache = {};
        this.dasCache = {};
        this.timeCache = {};
    }
    identifyCoordinate(ddx, ...possibleNames) {
        for (let n of possibleNames) {
            if (ddx.variables[n]) {
                return n;
            }
        }
        return undefined;
    }
    getDDX(host, file) {
        var url = this.dap.makeURL(host, file);
        return this.ddxForUrl(url);
    }
    ddxForUrl(url) {
        if (!this.ddxCache[url]) {
            this.ddxCache[url] =
                this.dap.getDDX(url).pipe(publishReplay(), refCount());
        }
        return this.ddxCache[url];
    }
    getDDXForLayer(ml) {
        return this.getDDX(ml.flattenedSettings.host, ml.interpolatedFile);
    }
    getDAS(host, file) {
        var url = this.dap.makeURL(host, file);
        return this.dasForUrl(url);
    }
    dasForUrl(url) {
        if (!this.dasCache[url]) {
            this.dasCache[url] =
                this.dap.getDAS(url).pipe(publishReplay(), refCount());
        }
        return this.dasCache[url];
    }
    getDASForLayer(ml) {
        return this.getDAS(ml.flattenedSettings.host, ml.interpolatedFile);
    }
    getMetadata(ml) {
        if (ml.flattenedSettings.host.software !== 'tds') {
            return of({});
        }
        return forkJoin([this.getDASForLayer(ml), this.getDDXForLayer(ml)]).pipe(map(meta => {
            return {
                das: meta[0],
                ddx: meta[1]
            };
        }), map(meta => {
            return Object.assign({}, meta.das.attr || {}, meta.ddx.variables[ml.flattenedSettings.layer || ml.flattenedSettings.variable] || {});
        }));
    }
    populateMetadata(ml) {
        this.getMetadata(ml).subscribe(entry => {
            setTimeout(() => {
                ml.retrievedMetadata = entry;
            });
        });
    }
    getGrid(host, file) {
        const url = this.dap.makeURL(host, file);
        return this.getGridForURL(url);
    }
    getGridForURL(url) {
        const ddx$ = this.ddxForUrl(url);
        const das$ = this.dasForUrl(url);
        const res$ = forkJoin([ddx$, das$]).pipe(map((metadata) => {
            const ddx = metadata[0];
            const das = metadata[1];
            const latCoord = this.identifyCoordinate(ddx, ...LAT_NAMES);
            const lngCoord = this.identifyCoordinate(ddx, ...LNG_NAMES);
            const lat$ = this.dap.getData(`${url}.ascii?${latCoord}`, das).pipe(map((dd) => dd[latCoord]));
            const lng$ = this.dap.getData(`${url}.ascii?${lngCoord}`, das).pipe(map((dd) => dd[lngCoord]));
            return forkJoin(lat$, lng$);
        }), switchAll(), publishReplay(), refCount());
        return res$;
    }
    getGridForLayer(ml) {
        return this.getGrid(ml.flattenedSettings.host, ml.interpolatedFile);
    }
    getSpatialExtent(ml) {
        return this.getGridForLayer(ml).pipe(map(([lats, lngs]) => {
            var result = {
                east: Math.max(...lngs),
                west: Math.min(...lngs),
                north: Math.max(...lats),
                south: Math.min(...lats)
            };
            return result;
        })).pipe(publishReplay(), refCount());
    }
    getTimeDimension(host, file) {
        const url = this.dap.makeURL(host, file);
        return this.getTimeDimensionForURL(url);
    }
    getTimeDimensionForURL(url) {
        if (!this.timeCache[url]) {
            const ddx$ = this.ddxForUrl(url);
            const das$ = this.dasForUrl(url);
            const res$ = forkJoin([ddx$, das$]).pipe(map((metadata) => {
                const ddx = metadata[0];
                const das = metadata[1];
                const timeCoord = this.identifyCoordinate(ddx, ...TIME_NAMES);
                const time$ = this.dap.getData(`${url}.ascii?${timeCoord}`, das).pipe(map((dd) => dd[timeCoord]));
                return time$;
            }), switchAll(), shareReplay());
            this.timeCache[url] = res$;
        }
        return this.timeCache[url];
    }
}
MetadataService.ctorParameters = () => [
    { type: OpendapService }
];
MetadataService.decorators = [
    { type: Injectable }
];
MetadataService.ctorParameters = () => [
    { type: OpendapService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hcC13YWxkLyIsInNvdXJjZXMiOlsibWV0YWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUluRCxPQUFPLEVBQUUsUUFBUSxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoRCxPQUFPLEVBQWEsYUFBYSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFPLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXRHLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBQyxDQUFDLFVBQVUsRUFBQyxLQUFLLENBQUMsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUMsQ0FBQyxXQUFXLEVBQUMsS0FBSyxFQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2pELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBQyxDQUFDLE1BQU0sRUFBQyxHQUFHLEVBQUMsTUFBTSxDQUFDLENBQUM7QUFHNUMsTUFBTSxPQUFPLGVBQWU7SUFJMUIsWUFBb0IsR0FBa0I7UUFBbEIsUUFBRyxHQUFILEdBQUcsQ0FBZTtRQUh0QyxhQUFRLEdBQW1DLEVBQUUsQ0FBQTtRQUM3QyxhQUFRLEdBQW1DLEVBQUUsQ0FBQTtRQWdJN0MsY0FBUyxHQUFtQyxFQUFFLENBQUM7SUE1SC9DLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxHQUFVLEVBQUMsR0FBRyxhQUEyQjtRQUMxRCxLQUFJLElBQUksQ0FBQyxJQUFJLGFBQWEsRUFBQztZQUN6QixJQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUM7Z0JBQ2xCLE9BQU8sQ0FBQyxDQUFDO2FBQ1Y7U0FDRjtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRCxNQUFN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LENBQUMsQ0FBQyxFQUFDLFNBQVMsRUFBRSxFQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7WUFDaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7U0FDNUI7UUFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7O1lBcEp1QixjQUFjOzs7WUFMdkMsVUFBVTs7O1lBWEYsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hcHBlZExheWVyIH0gZnJvbSAnLi9kYXRhL21hcHBlZC1sYXllcic7XG5pbXBvcnQgeyBEYXBERFgsIERhcERBUywgRGFwRGF0YSB9IGZyb20gJ2RhcC1xdWVyeS1qcy9kaXN0L2RhcC1xdWVyeSc7XG5pbXBvcnQgeyBPcGVuZGFwU2VydmljZSB9IGZyb20gJy4vb3BlbmRhcC5zZXJ2aWNlJztcbmltcG9ydCB7IEJvdW5kcyB9IGZyb20gJy4vZGF0YS9ib3VuZHMnO1xuXG5pbXBvcnQgeyBDYXRhbG9nSG9zdCB9IGZyb20gJy4vZGF0YS9jYXRhbG9nJztcbmltcG9ydCB7IGZvcmtKb2luLCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3dpdGNoTWFwLCBwdWJsaXNoUmVwbGF5LCByZWZDb3VudCwgbWFwLCBzd2l0Y2hBbGwsIHRhcCwgc2hhcmVSZXBsYXkgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCBjb25zdCBMQVRfTkFNRVM9WydsYXRpdHVkZScsJ2xhdCddO1xuZXhwb3J0IGNvbnN0IExOR19OQU1FUz1bJ2xvbmdpdHVkZScsJ2xuZycsJ2xvbiddO1xuZXhwb3J0IGNvbnN0IFRJTUVfTkFNRVM9Wyd0aW1lJywndCcsJ1RpbWUnXTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE1ldGFkYXRhU2VydmljZSB7XG4gIGRkeENhY2hlOntba2V5OnN0cmluZ106T2JzZXJ2YWJsZTxEYXBERFg+fT17fVxuICBkYXNDYWNoZTp7W2tleTpzdHJpbmddOk9ic2VydmFibGU8RGFwREFTPn09e31cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhcDpPcGVuZGFwU2VydmljZSkge1xuXG4gIH1cblxuICBpZGVudGlmeUNvb3JkaW5hdGUoZGR4OkRhcEREWCwuLi5wb3NzaWJsZU5hbWVzOkFycmF5PHN0cmluZz4pOnN0cmluZ3tcbiAgICBmb3IobGV0IG4gb2YgcG9zc2libGVOYW1lcyl7XG4gICAgICBpZihkZHgudmFyaWFibGVzW25dKXtcbiAgICAgICAgcmV0dXJuIG47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBnZXRERFgoaG9zdDpDYXRhbG9nSG9zdCxmaWxlOnN0cmluZyk6T2JzZXJ2YWJsZTxEYXBERFg+e1xuICAgIHZhciB1cmwgPSB0aGlzLmRhcC5tYWtlVVJMKGhvc3QsZmlsZSk7XG5cbiAgICByZXR1cm4gdGhpcy5kZHhGb3JVcmwodXJsKTtcbiAgfVxuXG4gIGRkeEZvclVybCh1cmw6c3RyaW5nKTpPYnNlcnZhYmxlPERhcEREWD57XG4gICAgaWYoIXRoaXMuZGR4Q2FjaGVbdXJsXSl7XG4gICAgICB0aGlzLmRkeENhY2hlW3VybF0gPVxuICAgICAgICB0aGlzLmRhcC5nZXRERFgodXJsKS5waXBlKHB1Ymxpc2hSZXBsYXkoKSxyZWZDb3VudCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5kZHhDYWNoZVt1cmxdO1xufVxuXG4gIGdldEREWEZvckxheWVyKG1sOk1hcHBlZExheWVyKTpPYnNlcnZhYmxlPERhcEREWD57XG4gICAgcmV0dXJuIHRoaXMuZ2V0RERYKG1sLmZsYXR0ZW5lZFNldHRpbmdzLmhvc3QsbWwuaW50ZXJwb2xhdGVkRmlsZSk7XG4gIH1cblxuICBnZXREQVMoaG9zdDpDYXRhbG9nSG9zdCxmaWxlOnN0cmluZyk6T2JzZXJ2YWJsZTxEYXBEQVM+e1xuICAgIHZhciB1cmwgPSB0aGlzLmRhcC5tYWtlVVJMKGhvc3QsZmlsZSk7XG4gICAgcmV0dXJuIHRoaXMuZGFzRm9yVXJsKHVybCk7XG4gIH1cblxuICBkYXNGb3JVcmwodXJsOnN0cmluZyk6T2JzZXJ2YWJsZTxEYXBEQVM+e1xuICAgIGlmKCF0aGlzLmRhc0NhY2hlW3VybF0pe1xuICAgICAgdGhpcy5kYXNDYWNoZVt1cmxdID1cbiAgICAgICAgdGhpcy5kYXAuZ2V0REFTKHVybCkucGlwZShwdWJsaXNoUmVwbGF5KCkscmVmQ291bnQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZGFzQ2FjaGVbdXJsXTtcbiAgfVxuXG4gIGdldERBU0ZvckxheWVyKG1sOk1hcHBlZExheWVyKTpPYnNlcnZhYmxlPERhcERBUz57XG4gICAgcmV0dXJuIHRoaXMuZ2V0REFTKG1sLmZsYXR0ZW5lZFNldHRpbmdzLmhvc3QsbWwuaW50ZXJwb2xhdGVkRmlsZSk7XG4gIH1cblxuICBnZXRNZXRhZGF0YShtbDpNYXBwZWRMYXllcik6T2JzZXJ2YWJsZTxhbnk+e1xuICAgIGlmKG1sLmZsYXR0ZW5lZFNldHRpbmdzLmhvc3Quc29mdHdhcmUgIT09J3Rkcycpe1xuICAgICAgcmV0dXJuIG9mKHt9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm9ya0pvaW4oW3RoaXMuZ2V0REFTRm9yTGF5ZXIobWwpLHRoaXMuZ2V0RERYRm9yTGF5ZXIobWwpXSkucGlwZShcbiAgICAgIG1hcChtZXRhPT57XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGFzOiA8RGFwREFTPm1ldGFbMF0sXG4gICAgICAgICAgZGR4OiA8RGFwRERYPm1ldGFbMV1cbiAgICAgICAgfTtcbiAgICAgIH0pLFxuICAgICAgbWFwKG1ldGE9PntcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGEuZGFzLmF0dHJ8fHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhLmRkeC52YXJpYWJsZXNbbWwuZmxhdHRlbmVkU2V0dGluZ3MubGF5ZXJ8fG1sLmZsYXR0ZW5lZFNldHRpbmdzLnZhcmlhYmxlXXx8e30pO1xuICAgICAgfSkpO1xuICB9XG5cbiAgcG9wdWxhdGVNZXRhZGF0YShtbDpNYXBwZWRMYXllcil7XG4gICAgdGhpcy5nZXRNZXRhZGF0YShtbCkuc3Vic2NyaWJlKGVudHJ5PT57XG4gICAgICBzZXRUaW1lb3V0KCgpPT57XG4gICAgICAgIG1sLnJldHJpZXZlZE1ldGFkYXRhID0gZW50cnk7XG4gICAgICB9KVxuICAgIH0pO1xuICB9XG5cbiAgZ2V0R3JpZChob3N0OkNhdGFsb2dIb3N0LGZpbGU6c3RyaW5nKTpPYnNlcnZhYmxlPG51bWJlcltdW10+e1xuICAgIGNvbnN0IHVybCA9IHRoaXMuZGFwLm1ha2VVUkwoaG9zdCxmaWxlKTtcbiAgICByZXR1cm4gdGhpcy5nZXRHcmlkRm9yVVJMKHVybCk7XG4gIH1cblxuICBnZXRHcmlkRm9yVVJMKHVybDpzdHJpbmcpOk9ic2VydmFibGU8bnVtYmVyW11bXT57XG4gICAgY29uc3QgZGR4JCA9IHRoaXMuZGR4Rm9yVXJsKHVybCk7XG4gICAgY29uc3QgZGFzJCA9IHRoaXMuZGFzRm9yVXJsKHVybCk7XG4gICAgY29uc3QgcmVzJCA9IDxPYnNlcnZhYmxlPG51bWJlcltdW10+PmZvcmtKb2luKFtkZHgkLGRhcyRdKS5waXBlKFxuICAgICAgbWFwKChtZXRhZGF0YTphbnlbXSk9PntcbiAgICAgICAgY29uc3QgZGR4OkRhcEREWCA9IG1ldGFkYXRhWzBdO1xuICAgICAgICBjb25zdCBkYXM6RGFwREFTID0gbWV0YWRhdGFbMV07XG5cbiAgICAgICAgY29uc3QgbGF0Q29vcmQgPSB0aGlzLmlkZW50aWZ5Q29vcmRpbmF0ZShkZHgsLi4uTEFUX05BTUVTKTtcbiAgICAgICAgY29uc3QgbG5nQ29vcmQgPSB0aGlzLmlkZW50aWZ5Q29vcmRpbmF0ZShkZHgsLi4uTE5HX05BTUVTKTtcblxuICAgICAgICBjb25zdCBsYXQkID1cbiAgICAgICAgICB0aGlzLmRhcC5nZXREYXRhKGAke3VybH0uYXNjaWk/JHtsYXRDb29yZH1gLGRhcykucGlwZShcbiAgICAgICAgICAgIG1hcCgoZGQ6RGFwRGF0YSk9PjxudW1iZXJbXT5kZFtsYXRDb29yZF0pKTtcbiAgICAgICAgY29uc3QgbG5nJCA9XG4gICAgICAgICAgdGhpcy5kYXAuZ2V0RGF0YShgJHt1cmx9LmFzY2lpPyR7bG5nQ29vcmR9YCxkYXMpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKGRkOkRhcERhdGEpPT48bnVtYmVyW10+ZGRbbG5nQ29vcmRdKSk7XG5cbiAgICAgICAgcmV0dXJuIGZvcmtKb2luPG51bWJlcltdPihsYXQkLGxuZyQpO1xuICAgICAgfSksc3dpdGNoQWxsKCkscHVibGlzaFJlcGxheSgpLHJlZkNvdW50KCkpO1xuICAgICAgcmV0dXJuIHJlcyQ7XG4gIH1cblxuICBnZXRHcmlkRm9yTGF5ZXIobWw6TWFwcGVkTGF5ZXIpOk9ic2VydmFibGU8QXJyYXk8QXJyYXk8bnVtYmVyPj4+e1xuICAgIHJldHVybiB0aGlzLmdldEdyaWQobWwuZmxhdHRlbmVkU2V0dGluZ3MuaG9zdCxtbC5pbnRlcnBvbGF0ZWRGaWxlKTtcbiAgfVxuXG4gIGdldFNwYXRpYWxFeHRlbnQobWw6TWFwcGVkTGF5ZXIpOk9ic2VydmFibGU8Qm91bmRzPntcbiAgICByZXR1cm4gdGhpcy5nZXRHcmlkRm9yTGF5ZXIobWwpLnBpcGUobWFwKChbbGF0cyxsbmdzXSk9PntcbiAgICAgIHZhciByZXN1bHQ6Qm91bmRzID0ge1xuICAgICAgICBlYXN0OiBNYXRoLm1heCguLi5sbmdzKSxcbiAgICAgICAgd2VzdDogTWF0aC5taW4oLi4ubG5ncyksXG4gICAgICAgIG5vcnRoOiBNYXRoLm1heCguLi5sYXRzKSxcbiAgICAgICAgc291dGg6IE1hdGgubWluKC4uLmxhdHMpXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KSkucGlwZShwdWJsaXNoUmVwbGF5KCksIHJlZkNvdW50KCkpO1xuICB9XG5cbiAgZ2V0VGltZURpbWVuc2lvbihob3N0OkNhdGFsb2dIb3N0LGZpbGU6c3RyaW5nKTpPYnNlcnZhYmxlPERhdGVbXT57XG4gICAgY29uc3QgdXJsID0gdGhpcy5kYXAubWFrZVVSTChob3N0LGZpbGUpO1xuICAgIHJldHVybiB0aGlzLmdldFRpbWVEaW1lbnNpb25Gb3JVUkwodXJsKTtcbiAgfVxuXG4gIHRpbWVDYWNoZTp7W2tleTpzdHJpbmddOk9ic2VydmFibGU8RGF0ZVtdPn09e307XG5cbiAgZ2V0VGltZURpbWVuc2lvbkZvclVSTCh1cmw6c3RyaW5nKTpPYnNlcnZhYmxlPERhdGVbXT57XG4gICAgaWYoIXRoaXMudGltZUNhY2hlW3VybF0pe1xuICAgICAgY29uc3QgZGR4JCA9IHRoaXMuZGR4Rm9yVXJsKHVybCk7XG4gICAgICBjb25zdCBkYXMkID0gdGhpcy5kYXNGb3JVcmwodXJsKTtcbiAgICAgIGNvbnN0IHJlcyQgPSA8T2JzZXJ2YWJsZTxEYXRlW10+PmZvcmtKb2luKFtkZHgkLGRhcyRdKS5waXBlKFxuICAgICAgICBtYXAoKG1ldGFkYXRhOmFueVtdKT0+e1xuICAgICAgICAgIGNvbnN0IGRkeDpEYXBERFggPSBtZXRhZGF0YVswXTtcbiAgICAgICAgICBjb25zdCBkYXM6RGFwREFTID0gbWV0YWRhdGFbMV07XG5cbiAgICAgICAgICBjb25zdCB0aW1lQ29vcmQgPSB0aGlzLmlkZW50aWZ5Q29vcmRpbmF0ZShkZHgsLi4uVElNRV9OQU1FUyk7XG5cbiAgICAgICAgICBjb25zdCB0aW1lJCA9XG4gICAgICAgICAgICB0aGlzLmRhcC5nZXREYXRhKGAke3VybH0uYXNjaWk/JHt0aW1lQ29vcmR9YCxkYXMpLnBpcGUoXG4gICAgICAgICAgICAgIG1hcCgoZGQ6RGFwRGF0YSk9PjxEYXRlW10+ZGRbdGltZUNvb3JkXSkpO1xuXG4gICAgICAgICAgcmV0dXJuIHRpbWUkO1xuICAgICAgICB9KSxzd2l0Y2hBbGwoKSxzaGFyZVJlcGxheSgpKTtcbiAgICAgIHRoaXMudGltZUNhY2hlW3VybF0gPSByZXMkO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50aW1lQ2FjaGVbdXJsXTtcbiAgfVxufVxuIl19