"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var interpolation_service_1 = require("../interpolation.service");
var PUBLICATION_PRIORITY_ORDER = [
    'annual',
    'monthly',
    'daily'
];
var ɵ0 = function (host, fn) {
    var components = fn.split('/');
    components.pop();
    return host + "/catalog/" + components.join('/') + "/catalog.html";
}, ɵ1 = function (host, fn, ml) {
    return ml.layer.options.downloadPath || "" + host + fn;
};
exports.ɵ0 = ɵ0;
exports.ɵ1 = ɵ1;
var MAKE_DOWNLOAD_URL = {
    tds: ɵ0,
    static: ɵ1
};
exports.WMS_PARAMETER_NAMES = {
    tds: [
        'layers',
        'styles',
        'colorscalerange',
        'abovemaxcolor',
        'belowmincolor',
        'time',
        'transparent',
        'logscale'
    ],
    geoserver: [
        'transparent',
        'layers'
    ],
    esri: [
        'layers',
        'styles',
        'transparent'
    ]
};
exports.WMS_URL_FORMAT = {
    tds: '/wms/',
    geoserver: '/wms/',
    esri: '/'
};
exports.INTERPOLATED_PARAMETERS = [
    'styles',
    'layers'
];
var MappedLayer = /** @class */ (function () {
    function MappedLayer(data) {
        this.options = {
            date: new Date(2016, 0, 1) // Set to most recent available date
        };
        this.retrievedMetadata = {};
        this.wmsParameters = {};
        this.flattenedSettings = {};
        this.opacity = 1.0;
        Object.assign(this, data || {});
        if (this.layerType === undefined) {
            this.layerType = this.wmsParameters ? 'wms' : undefined;
        }
    }
    MappedLayer.prototype.description = function () {
        return this.layer.description ||
            (this.retrievedMetadata &&
                this.retrievedMetadata[this.layer.descriptionField || 'long_name']);
    };
    MappedLayer.prototype.leading0 = function (n) {
        if (n < 10) {
            return '0' + n;
        }
        return '' + n;
    };
    MappedLayer.prototype.defaultPublication = function () {
        var _this = this;
        var priorityPublication = PUBLICATION_PRIORITY_ORDER.find(function (pp) { return _this.layer.publications.findIndex(function (lp) { return (lp.timestep === pp) || (lp.label === pp); }) >= 0; });
        if (priorityPublication) {
            return this.layer.publications.findIndex(function (p) { return (p.label === priorityPublication) || (p.timestep === priorityPublication); });
        }
        return this.layer.publications.findIndex(function (p) { return !p.skip; });
    };
    MappedLayer.prototype.update = function () {
        var _this = this;
        this.options.publication = (this.options.publication === undefined) ?
            this.defaultPublication() :
            this.options.publication;
        var publication = this.layer.publications[this.options.publication];
        var host = publication.options.host || {};
        var baseURL = host.url;
        var software = host.software || 'tds';
        this.interpolatedFile = (publication.options.filepath || '');
        var mapParams = Object.assign({}, this.layer, publication.options, publication.options.mapOptions || {}, this.options.date ? {
            decade: decadeText(this.options.date),
            year: this.options.date.getFullYear(),
            month: this.leading0(this.options.date.getMonth() + 1),
            day: this.leading0(this.options.date.getDate()),
        } : {}, this.options, this.options.tags || {});
        if (mapParams.timeFormat) {
            mapParams['time'] = interpolation_service_1.InterpolationService.interpolate(mapParams.timeFormat, mapParams);
        }
        mapParams.layers = mapParams.layers || mapParams.layer || mapParams.variable;
        exports.INTERPOLATED_PARAMETERS.forEach(function (p) {
            if (mapParams[p]) {
                mapParams[p] = interpolation_service_1.InterpolationService.interpolate(mapParams[p], mapParams);
            }
        });
        this.interpolatedFile = interpolation_service_1.InterpolationService.interpolate(this.interpolatedFile, mapParams);
        this.url = baseURL + exports.WMS_URL_FORMAT[software] + this.interpolatedFile;
        if (MAKE_DOWNLOAD_URL[software]) {
            this.interpolatedDownloadURL = MAKE_DOWNLOAD_URL[software](host.downloadLink || baseURL, this.interpolatedFile, this);
        }
        else {
            this.interpolatedDownloadURL = host.downloadLink || null;
        }
        if (this.layer.options.legend === 'wms') {
            this.legendURL = this.url + '?service=WMS&request=GetLegendGraphic&format=image/png';
            this.legendURL += "&layer=" + interpolation_service_1.InterpolationService.interpolate(mapParams.layers, mapParams);
            this.legendURL += '&version=1.1.1';
            this.options.legend = true;
        }
        else {
            this.legendURL = null;
        }
        if (mapParams.vectors) {
            this.wmsParameters = null;
            this.layerType = 'vector';
            var styles_1 = mapParams.styles || {};
            this._styleFunc = function (f) {
                return styles_1;
            };
            if (mapParams.vectors === 'point' && mapParams.styles) {
                this.layerType = 'circle';
            }
        }
        else {
            this.layerType = 'wms';
            this.wmsParameters = {};
            exports.WMS_PARAMETER_NAMES[software].forEach(function (param) {
                if (mapParams[param]) {
                    _this.wmsParameters[param] = mapParams[param];
                }
            });
        }
        this.flattenedSettings = mapParams;
        if (mapParams.titleFormat) {
            this.title = interpolation_service_1.InterpolationService.interpolate(mapParams.titleFormat, mapParams);
        }
        else {
            this.title = this.layer.name;
        }
    };
    return MappedLayer;
}());
exports.MappedLayer = MappedLayer;
function decadeText(d) {
    var decade = d.getFullYear().toString().slice(0, 3);
    return decade + "0-" + decade + "9";
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwcGVkLWxheWVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWFwLXdhbGQvIiwic291cmNlcyI6WyJkYXRhL21hcHBlZC1sYXllci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLGtFQUFnRTtBQVloRSxJQUFNLDBCQUEwQixHQUFHO0lBQ2pDLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztDQUNSLENBQUM7U0FHSSxVQUFDLElBQVcsRUFBQyxFQUFTO0lBQ3hCLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0IsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2pCLE9BQVUsSUFBSSxpQkFBWSxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxrQkFBZSxDQUFDO0FBQ2hFLENBQUMsT0FDTSxVQUFDLElBQVcsRUFBQyxFQUFTLEVBQUMsRUFBYztJQUMxQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksSUFBSSxLQUFHLElBQUksR0FBRyxFQUFJLENBQUM7QUFDekQsQ0FBQzs7O0FBUkgsSUFBTSxpQkFBaUIsR0FBNkQ7SUFDbEYsR0FBRyxJQUlGO0lBQ0QsTUFBTSxJQUVMO0NBQ0YsQ0FBQTtBQUVZLFFBQUEsbUJBQW1CLEdBQWdDO0lBQzlELEdBQUcsRUFBRTtRQUNILFFBQVE7UUFDUixRQUFRO1FBQ1IsaUJBQWlCO1FBQ2pCLGVBQWU7UUFDZixlQUFlO1FBQ2YsTUFBTTtRQUNOLGFBQWE7UUFDYixVQUFVO0tBQ1g7SUFDRCxTQUFTLEVBQUU7UUFDVCxhQUFhO1FBQ2IsUUFBUTtLQUNUO0lBQ0QsSUFBSSxFQUFFO1FBQ0osUUFBUTtRQUNSLFFBQVE7UUFDUixhQUFhO0tBQ2Q7Q0FDRixDQUFDO0FBRVcsUUFBQSxjQUFjLEdBQXlCO0lBQ2xELEdBQUcsRUFBQyxPQUFPO0lBQ1gsU0FBUyxFQUFDLE9BQU87SUFDakIsSUFBSSxFQUFDLEdBQUc7Q0FDVCxDQUFDO0FB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Q0FBQyxDQUFPO0lBQ3pCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3BELE9BQVUsTUFBTSxVQUFLLE1BQU0sTUFBRyxDQUFDO0FBQ2pDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMYXllciB9IGZyb20gJy4vY2F0YWxvZyc7XG5pbXBvcnQgeyBJbnRlcnBvbGF0aW9uU2VydmljZSB9IGZyb20gJy4uL2ludGVycG9sYXRpb24uc2VydmljZSc7XG5cbmV4cG9ydCB0eXBlIE1hcHBlZExheWVyVHlwZXMgPSAnd21zJyB8ICd2ZWN0b3InIHwgJ2NpcmNsZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWFwcGVkTGF5ZXJPcHRpb25zIHtcbiAgbGVnZW5kPzogYm9vbGVhbjtcbiAgcHVibGljYXRpb24/OiBudW1iZXI7XG4gIGRhdGU/OiBEYXRlLFxuXG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuY29uc3QgUFVCTElDQVRJT05fUFJJT1JJVFlfT1JERVIgPSBbXG4gICdhbm51YWwnLFxuICAnbW9udGhseScsXG4gICdkYWlseSdcbl07XG5cbmNvbnN0IE1BS0VfRE9XTkxPQURfVVJMOntba2V5OnN0cmluZ106KGE6c3RyaW5nLHM6c3RyaW5nLG1sOk1hcHBlZExheWVyKT0+c3RyaW5nfSA9IHtcbiAgdGRzOihob3N0OnN0cmluZyxmbjpzdHJpbmcpPT57XG4gICAgbGV0IGNvbXBvbmVudHMgPSBmbi5zcGxpdCgnLycpO1xuICAgIGNvbXBvbmVudHMucG9wKCk7XG4gICAgcmV0dXJuIGAke2hvc3R9L2NhdGFsb2cvJHtjb21wb25lbnRzLmpvaW4oJy8nKX0vY2F0YWxvZy5odG1sYDtcbiAgfSxcbiAgc3RhdGljOihob3N0OnN0cmluZyxmbjpzdHJpbmcsbWw6TWFwcGVkTGF5ZXIpPT57XG4gICAgcmV0dXJuIG1sLmxheWVyLm9wdGlvbnMuZG93bmxvYWRQYXRoIHx8IGAke2hvc3R9JHtmbn1gO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBXTVNfUEFSQU1FVEVSX05BTUVTOntba2V5OnN0cmluZ106QXJyYXk8c3RyaW5nPn0gPSB7XG4gIHRkczogW1xuICAgICdsYXllcnMnLFxuICAgICdzdHlsZXMnLFxuICAgICdjb2xvcnNjYWxlcmFuZ2UnLFxuICAgICdhYm92ZW1heGNvbG9yJyxcbiAgICAnYmVsb3dtaW5jb2xvcicsXG4gICAgJ3RpbWUnLFxuICAgICd0cmFuc3BhcmVudCcsXG4gICAgJ2xvZ3NjYWxlJ1xuICBdLFxuICBnZW9zZXJ2ZXI6IFtcbiAgICAndHJhbnNwYXJlbnQnLFxuICAgICdsYXllcnMnXG4gIF0sXG4gIGVzcmk6IFtcbiAgICAnbGF5ZXJzJyxcbiAgICAnc3R5bGVzJyxcbiAgICAndHJhbnNwYXJlbnQnXG4gIF1cbn07XG5cbmV4cG9ydCBjb25zdCBXTVNfVVJMX0ZPUk1BVDp7W2tleTpzdHJpbmddOnN0cmluZ30gPSB7XG4gIHRkczonL3dtcy8nLFxuICBnZW9zZXJ2ZXI6Jy93bXMvJyxcbiAgZXNyaTonLydcbn07XG5cbmV4cG9ydCBjb25zdCBJTlRFUlBPTEFURURfUEFSQU1FVEVSUyA9IFtcbiAgJ3N0eWxlcycsXG4gICdsYXllcnMnXG5dO1xuXG5leHBvcnQgY2xhc3MgTWFwcGVkTGF5ZXIge1xuICBjb25zdHJ1Y3RvcihkYXRhPzphbnkpe1xuICAgIE9iamVjdC5hc3NpZ24odGhpcyxkYXRhfHx7fSk7XG4gICAgaWYodGhpcy5sYXllclR5cGU9PT11bmRlZmluZWQpe1xuICAgICAgdGhpcy5sYXllclR5cGUgPSB0aGlzLndtc1BhcmFtZXRlcnM/J3dtcyc6dW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIHRpdGxlOnN0cmluZztcblxuICBsYXllcjogTGF5ZXI7XG4gIG9wdGlvbnM6IE1hcHBlZExheWVyT3B0aW9ucyA9IHtcbiAgICBkYXRlOiBuZXcgRGF0ZSgyMDE2LCAwLCAxKSAvLyBTZXQgdG8gbW9zdCByZWNlbnQgYXZhaWxhYmxlIGRhdGVcbiAgfTtcblxuICBsZWdlbmRVUkw6c3RyaW5nO1xuICBsYXllclR5cGU6IE1hcHBlZExheWVyVHlwZXM7XG4gIHJldHJpZXZlZE1ldGFkYXRhOiB7W2tleTpzdHJpbmddOmFueX0gPSB7fTtcblxuICBpbnRlcnBvbGF0ZWRGaWxlOnN0cmluZztcbiAgaW50ZXJwb2xhdGVkRG93bmxvYWRVUkw6c3RyaW5nO1xuICB1cmw6IHN0cmluZztcbiAgd21zUGFyYW1ldGVyczogYW55ID0ge307XG4gIGZsYXR0ZW5lZFNldHRpbmdzOiBhbnkgPSB7fTtcbiAgc3RhdGljRGF0YTphbnk7XG4gIG9wYWNpdHkgPSAxLjA7XG5cbiAgX3N0eWxlRnVuYzogKGY6YW55KT0+dm9pZDtcblxuICBkZXNjcmlwdGlvbigpOnN0cmluZ3tcbiAgICByZXR1cm4gdGhpcy5sYXllci5kZXNjcmlwdGlvbiB8fFxuICAgICAgKHRoaXMucmV0cmlldmVkTWV0YWRhdGEgJiZcbiAgICAgICB0aGlzLnJldHJpZXZlZE1ldGFkYXRhW3RoaXMubGF5ZXIuZGVzY3JpcHRpb25GaWVsZHx8J2xvbmdfbmFtZSddKTtcbiAgfVxuXG4gIGxlYWRpbmcwKG46IG51bWJlcik6IHN0cmluZyB7XG4gICAgaWYgKG4gPCAxMCkge1xuICAgICAgcmV0dXJuICcwJyArIG47XG4gICAgfVxuICAgIHJldHVybiAnJyArIG47XG4gIH1cblxuICBkZWZhdWx0UHVibGljYXRpb24oKTpudW1iZXJ7XG4gICAgY29uc3QgcHJpb3JpdHlQdWJsaWNhdGlvbiA9IFBVQkxJQ0FUSU9OX1BSSU9SSVRZX09SREVSLmZpbmQoXG4gICAgICBwcD0+dGhpcy5sYXllci5wdWJsaWNhdGlvbnMuZmluZEluZGV4KGxwPT4obHAudGltZXN0ZXA9PT1wcCl8fChscC5sYWJlbD09PXBwKSk+PTApO1xuICAgIGlmKHByaW9yaXR5UHVibGljYXRpb24pe1xuICAgICAgcmV0dXJuIHRoaXMubGF5ZXIucHVibGljYXRpb25zLmZpbmRJbmRleChwPT4ocC5sYWJlbD09PXByaW9yaXR5UHVibGljYXRpb24pfHwocC50aW1lc3RlcD09PXByaW9yaXR5UHVibGljYXRpb24pKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubGF5ZXIucHVibGljYXRpb25zLmZpbmRJbmRleChwID0+ICFwLnNraXApO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIHRoaXMub3B0aW9ucy5wdWJsaWNhdGlvbiA9ICh0aGlzLm9wdGlvbnMucHVibGljYXRpb24gPT09IHVuZGVmaW5lZCkgP1xuICAgICAgdGhpcy5kZWZhdWx0UHVibGljYXRpb24oKSA6XG4gICAgICB0aGlzLm9wdGlvbnMucHVibGljYXRpb247XG5cbiAgICBjb25zdCBwdWJsaWNhdGlvbiA9IHRoaXMubGF5ZXIucHVibGljYXRpb25zW3RoaXMub3B0aW9ucy5wdWJsaWNhdGlvbl07XG5cbiAgICBjb25zdCBob3N0ID0gcHVibGljYXRpb24ub3B0aW9ucy5ob3N0IHx8IHt9O1xuICAgIGNvbnN0IGJhc2VVUkwgPSBob3N0LnVybDtcblxuICAgIGNvbnN0IHNvZnR3YXJlID0gaG9zdC5zb2Z0d2FyZSB8fCAndGRzJztcblxuICAgIHRoaXMuaW50ZXJwb2xhdGVkRmlsZSA9IChwdWJsaWNhdGlvbi5vcHRpb25zLmZpbGVwYXRoIHx8ICcnKVxuICAgIGNvbnN0IG1hcFBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe30sXG4gICAgICB0aGlzLmxheWVyLFxuICAgICAgcHVibGljYXRpb24ub3B0aW9ucyxcbiAgICAgIHB1YmxpY2F0aW9uLm9wdGlvbnMubWFwT3B0aW9ucyB8fCB7fSxcbiAgICAgIHRoaXMub3B0aW9ucy5kYXRlID8ge1xuICAgICAgICBkZWNhZGU6IGRlY2FkZVRleHQodGhpcy5vcHRpb25zLmRhdGUpLFxuICAgICAgICB5ZWFyOiB0aGlzLm9wdGlvbnMuZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICBtb250aDogdGhpcy5sZWFkaW5nMCh0aGlzLm9wdGlvbnMuZGF0ZS5nZXRNb250aCgpICsgMSksXG4gICAgICAgIGRheTogdGhpcy5sZWFkaW5nMCh0aGlzLm9wdGlvbnMuZGF0ZS5nZXREYXRlKCkpLFxuICAgICAgfSA6IHt9LFxuICAgICAgdGhpcy5vcHRpb25zLFxuICAgICAgdGhpcy5vcHRpb25zLnRhZ3MgfHwge30pO1xuXG4gICAgaWYgKG1hcFBhcmFtcy50aW1lRm9ybWF0KSB7XG4gICAgICBtYXBQYXJhbXNbJ3RpbWUnXSA9IEludGVycG9sYXRpb25TZXJ2aWNlLmludGVycG9sYXRlKG1hcFBhcmFtcy50aW1lRm9ybWF0LCBtYXBQYXJhbXMpO1xuICAgIH1cbiAgICBtYXBQYXJhbXMubGF5ZXJzID0gbWFwUGFyYW1zLmxheWVycyB8fCBtYXBQYXJhbXMubGF5ZXIgfHwgbWFwUGFyYW1zLnZhcmlhYmxlO1xuICAgIElOVEVSUE9MQVRFRF9QQVJBTUVURVJTLmZvckVhY2gocD0+e1xuICAgICAgaWYobWFwUGFyYW1zW3BdKXtcbiAgICAgICAgbWFwUGFyYW1zW3BdID0gSW50ZXJwb2xhdGlvblNlcnZpY2UuaW50ZXJwb2xhdGUobWFwUGFyYW1zW3BdLG1hcFBhcmFtcyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5pbnRlcnBvbGF0ZWRGaWxlID0gSW50ZXJwb2xhdGlvblNlcnZpY2UuaW50ZXJwb2xhdGUodGhpcy5pbnRlcnBvbGF0ZWRGaWxlLCBtYXBQYXJhbXMpO1xuICAgIHRoaXMudXJsID0gYmFzZVVSTCArIFdNU19VUkxfRk9STUFUW3NvZnR3YXJlXSArIHRoaXMuaW50ZXJwb2xhdGVkRmlsZTtcbiAgICBpZihNQUtFX0RPV05MT0FEX1VSTFtzb2Z0d2FyZV0pe1xuICAgICAgdGhpcy5pbnRlcnBvbGF0ZWREb3dubG9hZFVSTD1NQUtFX0RPV05MT0FEX1VSTFtzb2Z0d2FyZV0oaG9zdC5kb3dubG9hZExpbmt8fGJhc2VVUkwsdGhpcy5pbnRlcnBvbGF0ZWRGaWxlLHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmludGVycG9sYXRlZERvd25sb2FkVVJMPWhvc3QuZG93bmxvYWRMaW5rfHxudWxsO1xuICAgIH1cblxuICAgIGlmKHRoaXMubGF5ZXIub3B0aW9ucy5sZWdlbmQ9PT0nd21zJyl7XG4gICAgICB0aGlzLmxlZ2VuZFVSTCA9IHRoaXMudXJsICsgJz9zZXJ2aWNlPVdNUyZyZXF1ZXN0PUdldExlZ2VuZEdyYXBoaWMmZm9ybWF0PWltYWdlL3BuZyc7XG4gICAgICB0aGlzLmxlZ2VuZFVSTCArPSBgJmxheWVyPSR7SW50ZXJwb2xhdGlvblNlcnZpY2UuaW50ZXJwb2xhdGUobWFwUGFyYW1zLmxheWVycyxtYXBQYXJhbXMpfWA7XG4gICAgICB0aGlzLmxlZ2VuZFVSTCArPSAnJnZlcnNpb249MS4xLjEnO1xuICAgICAgdGhpcy5vcHRpb25zLmxlZ2VuZD10cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxlZ2VuZFVSTD1udWxsO1xuICAgIH1cblxuICAgIGlmIChtYXBQYXJhbXMudmVjdG9ycykge1xuICAgICAgdGhpcy53bXNQYXJhbWV0ZXJzID0gbnVsbDtcbiAgICAgIHRoaXMubGF5ZXJUeXBlID0gJ3ZlY3Rvcic7XG4gICAgICBsZXQgc3R5bGVzID0gbWFwUGFyYW1zLnN0eWxlcyB8fCB7fTtcbiAgICAgIHRoaXMuX3N0eWxlRnVuYyA9IChmOmFueSk9PntcbiAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgIH1cblxuICAgICAgaWYobWFwUGFyYW1zLnZlY3RvcnM9PT0ncG9pbnQnICYmIG1hcFBhcmFtcy5zdHlsZXMpe1xuICAgICAgICB0aGlzLmxheWVyVHlwZSA9ICdjaXJjbGUnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxheWVyVHlwZSA9ICd3bXMnO1xuICAgICAgdGhpcy53bXNQYXJhbWV0ZXJzID0ge307XG4gICAgICBXTVNfUEFSQU1FVEVSX05BTUVTW3NvZnR3YXJlXS5mb3JFYWNoKHBhcmFtID0+IHtcbiAgICAgICAgaWYgKG1hcFBhcmFtc1twYXJhbV0pIHtcbiAgICAgICAgICB0aGlzLndtc1BhcmFtZXRlcnNbcGFyYW1dID0gbWFwUGFyYW1zW3BhcmFtXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuZmxhdHRlbmVkU2V0dGluZ3MgPSBtYXBQYXJhbXM7XG5cbiAgICBpZihtYXBQYXJhbXMudGl0bGVGb3JtYXQpe1xuICAgICAgdGhpcy50aXRsZSA9IEludGVycG9sYXRpb25TZXJ2aWNlLmludGVycG9sYXRlKG1hcFBhcmFtcy50aXRsZUZvcm1hdCxtYXBQYXJhbXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGl0bGUgPSB0aGlzLmxheWVyLm5hbWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlY2FkZVRleHQoZDogRGF0ZSk6IHN0cmluZyB7XG4gIGxldCBkZWNhZGUgPSBkLmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKS5zbGljZSgwLCAzKTtcbiAgcmV0dXJuIGAke2RlY2FkZX0wLSR7ZGVjYWRlfTlgO1xufVxuIl19