import { InterpolationService } from '../interpolation.service';
var PUBLICATION_PRIORITY_ORDER = [
    'annual',
    'monthly',
    'daily'
];
var ɵ0 = function (host, fn) {
    var components = fn.split('/');
    components.pop();
    return host + "/catalog/" + components.join('/') + "/catalog.html";
}, ɵ1 = function (host, fn, ml) {
    return ml.layer.options.downloadPath || "" + host + fn;
};
var MAKE_DOWNLOAD_URL = {
    tds: ɵ0,
    static: ɵ1
};
export var WMS_PARAMETER_NAMES = {
    tds: [
        'layers',
        'styles',
        'colorscalerange',
        'abovemaxcolor',
        'belowmincolor',
        'time',
        'transparent',
        'logscale'
    ],
    geoserver: [
        'transparent',
        'layers'
    ],
    esri: [
        'layers',
        'styles',
        'transparent'
    ]
};
export var WMS_URL_FORMAT = {
    tds: '/wms/',
    geoserver: '/wms/',
    esri: '/'
};
export var INTERPOLATED_PARAMETERS = [
    'styles',
    'layers'
];
var MappedLayer = /** @class */ (function () {
    function MappedLayer(data) {
        this.options = {
            date: new Date(2019, 0, 1) // Set to most recent available date
        };
        this.retrievedMetadata = {};
        this.wmsParameters = {};
        this.flattenedSettings = {};
        this.opacity = 1.0;
        Object.assign(this, data || {});
        if (this.layerType === undefined) {
            this.layerType = this.wmsParameters ? 'wms' : undefined;
        }
    }
    MappedLayer.prototype.description = function () {
        return this.layer.description ||
            (this.retrievedMetadata &&
                this.retrievedMetadata[this.layer.descriptionField || 'long_name']);
    };
    MappedLayer.prototype.leading0 = function (n) {
        if (n < 10) {
            return '0' + n;
        }
        return '' + n;
    };
    MappedLayer.prototype.defaultPublication = function () {
        var _this = this;
        var priorityPublication = PUBLICATION_PRIORITY_ORDER.find(function (pp) { return _this.layer.publications.findIndex(function (lp) { return (lp.timestep === pp) || (lp.label === pp); }) >= 0; });
        if (priorityPublication) {
            return this.layer.publications.findIndex(function (p) { return (p.label === priorityPublication) || (p.timestep === priorityPublication); });
        }
        return this.layer.publications.findIndex(function (p) { return !p.skip; });
    };
    MappedLayer.prototype.update = function () {
        var _this = this;
        this.options.publication = (this.options.publication === undefined) ?
            this.defaultPublication() :
            this.options.publication;
        var publication = this.layer.publications[this.options.publication];
        var host = publication.options.host || {};
        var baseURL = host.url;
        var software = host.software || 'tds';
        this.interpolatedFile = (publication.options.filepath || '');
        var mapParams = Object.assign({}, this.layer, publication.options, publication.options.mapOptions || {}, this.options.date ? {
            decade: decadeText(this.options.date),
            year: this.options.date.getFullYear(),
            month: this.leading0(this.options.date.getMonth() + 1),
            day: this.leading0(this.options.date.getDate()),
        } : {}, this.options, this.options.tags || {});
        if (mapParams.timeFormat) {
            mapParams['time'] = InterpolationService.interpolate(mapParams.timeFormat, mapParams);
        }
        mapParams.layers = mapParams.layers || mapParams.layer || mapParams.variable;
        INTERPOLATED_PARAMETERS.forEach(function (p) {
            if (mapParams[p]) {
                mapParams[p] = InterpolationService.interpolate(mapParams[p], mapParams);
            }
        });
        this.interpolatedFile = InterpolationService.interpolate(this.interpolatedFile, mapParams);
        this.url = baseURL + WMS_URL_FORMAT[software] + this.interpolatedFile;
        if (MAKE_DOWNLOAD_URL[software]) {
            this.interpolatedDownloadURL = MAKE_DOWNLOAD_URL[software](host.downloadLink || baseURL, this.interpolatedFile, this);
        }
        else {
            this.interpolatedDownloadURL = host.downloadLink || null;
        }
        if (this.layer.options.legend === 'wms') {
            this.legendURL = this.url + '?service=WMS&request=GetLegendGraphic&format=image/png';
            this.legendURL += "&layer=" + InterpolationService.interpolate(mapParams.layers, mapParams);
            this.legendURL += '&version=1.1.1';
            this.options.legend = true;
        }
        else {
            this.legendURL = null;
        }
        if (mapParams.vectors) {
            this.wmsParameters = null;
            this.layerType = 'vector';
            var styles_1 = mapParams.styles || {};
            this._styleFunc = function (f) {
                return styles_1;
            };
            if (mapParams.vectors === 'point' && mapParams.styles) {
                this.layerType = 'circle';
            }
        }
        else {
            this.layerType = 'wms';
            this.wmsParameters = {};
            WMS_PARAMETER_NAMES[software].forEach(function (param) {
                if (mapParams[param]) {
                    _this.wmsParameters[param] = mapParams[param];
                }
            });
        }
        this.flattenedSettings = mapParams;
        if (mapParams.titleFormat) {
            this.title = InterpolationService.interpolate(mapParams.titleFormat, mapParams);
        }
        else {
            this.title = this.layer.name;
        }
    };
    return MappedLayer;
}());
export { MappedLayer };
function decadeText(d) {
    var decade = d.getFullYear().toString().slice(0, 3);
    return decade + "0-" + decade + "9";
}
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,