export function parseCSV(txt) {
    var lines = txt.split('\n');
    var header = lines[0];
    lines = lines.slice(1);
    var columns = header.split(',');
    return lines.filter(function (ln) { return ln.length; }).map(function (ln) {
        var data = ln.split(',');
        var result = {};
        data.forEach(function (val, i) {
            result[columns[i]] = parseVal(val);
        });
        return result;
    });
}
function parseVal(val) {
    // Try date...
    var components = val.split('-');
    if (components.length === 3) {
        var dateComponents = components.map(function (c) { return +c; });
        if (!dateComponents.some(isNaN)) {
            return new Date(Date.UTC(dateComponents[0], dateComponents[1] - 1, dateComponents[2]));
        }
    }
    if (val === '') {
        return val;
    }
    // Try numeric
    var numeric = +val;
    if (!isNaN(numeric)) {
        return numeric;
    }
    return val;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3N2LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWFwLXdhbGQvIiwic291cmNlcyI6WyJwYXJzaW5nL2Nzdi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxNQUFNLFVBQVUsUUFBUSxDQUFDLEdBQVU7SUFDakMsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEIsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkIsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoQyxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQSxFQUFFLElBQUUsT0FBQSxFQUFFLENBQUMsTUFBTSxFQUFULENBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLEVBQUU7UUFDdkMsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV6QixJQUFJLE1BQU0sR0FBWSxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFDLEdBQUcsRUFBQyxDQUFDO1lBQ2pCLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FBQyxHQUFVO0lBRTFCLGNBQWM7SUFDZCxJQUFJLFVBQVUsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLElBQUcsVUFBVSxDQUFDLE1BQU0sS0FBRyxDQUFDLEVBQUM7UUFDdkIsSUFBSSxjQUFjLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBRSxPQUFBLENBQUMsQ0FBQyxFQUFGLENBQUUsQ0FBQyxDQUFDO1FBQzNDLElBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFDO1lBQzdCLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BGO0tBQ0Y7SUFFRCxJQUFHLEdBQUcsS0FBRyxFQUFFLEVBQUM7UUFDVixPQUFPLEdBQUcsQ0FBQztLQUNaO0lBRUQsY0FBYztJQUNkLElBQUksT0FBTyxHQUFVLENBQUMsR0FBRyxDQUFDO0lBQzFCLElBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUM7UUFDakIsT0FBTyxPQUFPLENBQUM7S0FDaEI7SUFFRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBpbnRlcmZhY2UgVGFibGVSb3d7XG4gIFtrZXk6c3RyaW5nXTphbnk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNTVih0eHQ6c3RyaW5nKTpUYWJsZVJvd1tde1xuICBsZXQgbGluZXMgPSB0eHQuc3BsaXQoJ1xcbicpO1xuICBsZXQgaGVhZGVyID0gbGluZXNbMF07XG4gIGxpbmVzID0gbGluZXMuc2xpY2UoMSk7XG4gIGxldCBjb2x1bW5zID0gaGVhZGVyLnNwbGl0KCcsJyk7XG5cbiAgcmV0dXJuIGxpbmVzLmZpbHRlcihsbj0+bG4ubGVuZ3RoKS5tYXAobG49PntcbiAgICBsZXQgZGF0YSA9IGxuLnNwbGl0KCcsJyk7XG5cbiAgICBsZXQgcmVzdWx0OlRhYmxlUm93ID0ge307XG4gICAgZGF0YS5mb3JFYWNoKCh2YWwsaSk9PntcbiAgICAgIHJlc3VsdFtjb2x1bW5zW2ldXSA9IHBhcnNlVmFsKHZhbCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVmFsKHZhbDpzdHJpbmcpOmFueXtcblxuICAvLyBUcnkgZGF0ZS4uLlxuICBsZXQgY29tcG9uZW50cyA9IHZhbC5zcGxpdCgnLScpO1xuICBpZihjb21wb25lbnRzLmxlbmd0aD09PTMpe1xuICAgIGxldCBkYXRlQ29tcG9uZW50cyA9IGNvbXBvbmVudHMubWFwKGM9PitjKTtcbiAgICBpZighZGF0ZUNvbXBvbmVudHMuc29tZShpc05hTikpe1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKGRhdGVDb21wb25lbnRzWzBdLGRhdGVDb21wb25lbnRzWzFdLTEsZGF0ZUNvbXBvbmVudHNbMl0pKTtcbiAgICB9XG4gIH1cblxuICBpZih2YWw9PT0nJyl7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIC8vIFRyeSBudW1lcmljXG4gIGxldCBudW1lcmljOm51bWJlciA9ICt2YWw7XG4gIGlmKCFpc05hTihudW1lcmljKSl7XG4gICAgcmV0dXJuIG51bWVyaWM7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuIl19