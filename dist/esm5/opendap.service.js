import { __read } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { parseData, parseDAS, parseDDX, simplify } from 'dap-query-js/dist/dap-query';
import { map, switchMap } from 'rxjs/operators';
import { forkJoin } from 'rxjs';
var OpendapService = /** @class */ (function () {
    function OpendapService(http) {
        this.http = http;
    }
    OpendapService.prototype.makeURL = function (host, filepath) {
        return host.url + '/dodsC/' + filepath;
    };
    OpendapService.prototype.get = function (url) {
        return this.http.get(url, { responseType: 'text' });
    };
    OpendapService.prototype.getData = function (queryUrl, das) {
        return this.get(queryUrl).pipe(map(function (txt) { return simplify(parseData(txt, das)); }));
    };
    OpendapService.prototype.getDAS = function (url) {
        return this.get(url + '.das').pipe(map(parseDAS));
    };
    OpendapService.prototype.getDDX = function (url) {
        return this.get(url + '.ddx').pipe(map(parseDDX));
    };
    OpendapService.prototype.getExtent = function (url) {
        var _this = this;
        console.log(url);
        return forkJoin([
            this.getDAS(url),
            this.getDDX(url)
        ]).pipe(switchMap(function (_a) {
            var _b = __read(_a, 2), theDAS = _b[0], theDDX = _b[1];
            var das = theDAS;
            return forkJoin([
                _this.getData(url + '.ascii?latitude', das),
                _this.getData(url + '.ascii?longitude', das)
            ]);
        }), map(function (ll) {
            var lats = ll[0].latitude;
            var lons = ll[1].longitude;
            return [lats[0], lats[lats.length - 1],
                lons[0], lons[lons.length - 1]];
        }));
    };
    OpendapService.prototype.dapRangeQuery = function (from, to, step) {
        step = step || 1;
        if (to === undefined) {
            to = from;
        }
        return '[' + from + ':' + step + ':' + to + ']';
    };
    OpendapService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    OpendapService.decorators = [
        { type: Injectable }
    ];
    OpendapService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return OpendapService;
}());
export { OpendapService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlbmRhcC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWFwLXdhbGQvIiwic291cmNlcyI6WyJvcGVuZGFwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFDLFFBQVEsRUFDbkMsUUFBUSxFQUFpRCxNQUFNLDZCQUE2QixDQUFDO0FBRS9GLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDaEQsT0FBTyxFQUFhLFFBQVEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUzQztJQUdFLHdCQUFvQixJQUFlO1FBQWYsU0FBSSxHQUFKLElBQUksQ0FBVztJQUVuQyxDQUFDO0lBRUQsZ0NBQU8sR0FBUCxVQUFRLElBQWdCLEVBQUMsUUFBZTtRQUN0QyxPQUFPLElBQUksQ0FBQyxHQUFHLEdBQUcsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUN6QyxDQUFDO0lBRUQsNEJBQUcsR0FBSCxVQUFJLEdBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBQyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFBO0lBQ3BELENBQUM7SUFFRCxnQ0FBTyxHQUFQLFVBQVEsUUFBZSxFQUFDLEdBQVU7UUFDaEMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FDNUIsR0FBRyxDQUFDLFVBQUMsR0FBVSxJQUFHLE9BQUEsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUMsR0FBRyxDQUFDLENBQUMsRUFBNUIsQ0FBNEIsQ0FBQyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELCtCQUFNLEdBQU4sVUFBTyxHQUFVO1FBQ2YsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQzlCLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFFRCwrQkFBTSxHQUFOLFVBQU8sR0FBVTtRQUNmLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUM5QixHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRUQsa0NBQVMsR0FBVCxVQUFVLEdBQVU7UUFBcEIsaUJBaUJDO1FBaEJDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakIsT0FBTyxRQUFRLENBQUM7WUFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUNoQixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztTQUNqQixDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFDLEVBQWU7Z0JBQWYsS0FBQSxhQUFlLEVBQWQsTUFBTSxRQUFBLEVBQUMsTUFBTSxRQUFBO1lBQy9CLElBQUksR0FBRyxHQUFrQixNQUFNLENBQUM7WUFDaEMsT0FBTyxRQUFRLENBQUM7Z0JBQ2QsS0FBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUMsaUJBQWlCLEVBQUMsR0FBRyxDQUFDO2dCQUN2QyxLQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBQyxrQkFBa0IsRUFBQyxHQUFHLENBQUM7YUFDekMsQ0FBQyxDQUFBO1FBQUEsQ0FBQyxDQUFDLEVBQ0osR0FBRyxDQUFDLFVBQUMsRUFBWTtZQUNmLElBQUksSUFBSSxHQUF5QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1lBQ2hELElBQUksSUFBSSxHQUF5QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1lBQ2pELE9BQU8sQ0FBUyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDO2dCQUNuQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1IsQ0FBQztJQUVELHNDQUFhLEdBQWIsVUFBYyxJQUFXLEVBQUMsRUFBVSxFQUFDLElBQVk7UUFDL0MsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUM7UUFDakIsSUFBRyxFQUFFLEtBQUcsU0FBUyxFQUFDO1lBQ2hCLEVBQUUsR0FBRyxJQUFJLENBQUM7U0FDWDtRQUNELE9BQU8sR0FBRyxHQUFDLElBQUksR0FBQyxHQUFHLEdBQUMsSUFBSSxHQUFDLEdBQUcsR0FBQyxFQUFFLEdBQUMsR0FBRyxDQUFDO0lBQ3RDLENBQUM7O2dCQXBEd0IsVUFBVTs7O2dCQUhwQyxVQUFVOzs7Z0JBUEYsVUFBVTs7SUErRG5CLHFCQUFDO0NBQUEsQUF4REQsSUF3REM7U0F2RFksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBwYXJzZURhdGEsIHBhcnNlREFTLHBhcnNlRERYLFxuICBzaW1wbGlmeSwgRGFwRGF0YSwgRGFwREFTLCBEYXBERFgsIERhcFZhcmlhYmxlRGF0YUFycmF5IH0gZnJvbSAnZGFwLXF1ZXJ5LWpzL2Rpc3QvZGFwLXF1ZXJ5JztcbmltcG9ydCB7IENhdGFsb2dIb3N0IH0gZnJvbSAnLi9kYXRhL2NhdGFsb2cnO1xuaW1wb3J0IHsgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLGZvcmtKb2luIH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBPcGVuZGFwU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOkh0dHBDbGllbnQpIHtcblxuICB9XG5cbiAgbWFrZVVSTChob3N0OkNhdGFsb2dIb3N0LGZpbGVwYXRoOnN0cmluZyk6c3RyaW5ne1xuICAgIHJldHVybiBob3N0LnVybCArICcvZG9kc0MvJyArIGZpbGVwYXRoO1xuICB9XG5cbiAgZ2V0KHVybDpzdHJpbmcpOk9ic2VydmFibGU8c3RyaW5nPntcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwseyByZXNwb25zZVR5cGU6ICd0ZXh0JyB9KVxuICB9XG5cbiAgZ2V0RGF0YShxdWVyeVVybDpzdHJpbmcsZGFzOkRhcERBUyk6T2JzZXJ2YWJsZTxEYXBEYXRhPntcbiAgICByZXR1cm4gdGhpcy5nZXQocXVlcnlVcmwpLnBpcGUoXG4gICAgICBtYXAoKHR4dDpzdHJpbmcpPT5zaW1wbGlmeShwYXJzZURhdGEodHh0LGRhcykpKSk7XG4gIH1cblxuICBnZXREQVModXJsOnN0cmluZyk6T2JzZXJ2YWJsZTxEYXBEQVM+e1xuICAgIHJldHVybiB0aGlzLmdldCh1cmwrJy5kYXMnKS5waXBlKFxuICAgICAgbWFwKHBhcnNlREFTKSk7XG4gIH1cblxuICBnZXRERFgodXJsOnN0cmluZyk6T2JzZXJ2YWJsZTxEYXBERFg+e1xuICAgIHJldHVybiB0aGlzLmdldCh1cmwrJy5kZHgnKS5waXBlKFxuICAgICAgbWFwKHBhcnNlRERYKSk7XG4gIH1cblxuICBnZXRFeHRlbnQodXJsOnN0cmluZyk6T2JzZXJ2YWJsZTxudW1iZXJbXT57XG4gICAgY29uc29sZS5sb2codXJsKTtcbiAgICByZXR1cm4gZm9ya0pvaW4oW1xuICAgICAgdGhpcy5nZXREQVModXJsKSxcbiAgICAgIHRoaXMuZ2V0RERYKHVybClcbiAgICBdKS5waXBlKHN3aXRjaE1hcCgoW3RoZURBUyx0aGVERFhdKT0+e1xuICAgICAgdmFyIGRhczpEYXBEQVMgPSA8RGFwREFTPnRoZURBUztcbiAgICAgIHJldHVybiBmb3JrSm9pbihbXG4gICAgICAgIHRoaXMuZ2V0RGF0YSh1cmwrJy5hc2NpaT9sYXRpdHVkZScsZGFzKSxcbiAgICAgICAgdGhpcy5nZXREYXRhKHVybCsnLmFzY2lpP2xvbmdpdHVkZScsZGFzKVxuICAgICAgXSl9KSxcbiAgICAgIG1hcCgobGw6RGFwRGF0YVtdKT0+e1xuICAgICAgICB2YXIgbGF0cyA9IDxEYXBWYXJpYWJsZURhdGFBcnJheT5sbFswXS5sYXRpdHVkZTtcbiAgICAgICAgdmFyIGxvbnMgPSA8RGFwVmFyaWFibGVEYXRhQXJyYXk+bGxbMV0ubG9uZ2l0dWRlO1xuICAgICAgICByZXR1cm4gWzxudW1iZXI+bGF0c1swXSw8bnVtYmVyPmxhdHNbbGF0cy5sZW5ndGgtMV0sXG4gICAgICAgICAgICAgICAgPG51bWJlcj5sb25zWzBdLDxudW1iZXI+bG9uc1tsb25zLmxlbmd0aC0xXV07XG4gICAgICB9KSk7XG4gIH1cblxuICBkYXBSYW5nZVF1ZXJ5KGZyb206bnVtYmVyLHRvPzpudW1iZXIsc3RlcD86bnVtYmVyKTpzdHJpbmd7XG4gICAgc3RlcCA9IHN0ZXAgfHwgMTtcbiAgICBpZih0bz09PXVuZGVmaW5lZCl7XG4gICAgICB0byA9IGZyb207XG4gICAgfVxuICAgIHJldHVybiAnWycrZnJvbSsnOicrc3RlcCsnOicrdG8rJ10nO1xuICB9XG59XG4iXX0=