import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { parseData, parseDAS, parseDDX, simplify } from 'dap-query-js/dist/dap-query';
import { map, switchMap } from 'rxjs/operators';
import { forkJoin } from 'rxjs';
var OpendapService = /** @class */ (function () {
    function OpendapService(http) {
        this.http = http;
    }
    OpendapService.prototype.makeURL = function (host, filepath) {
        return host.url + '/dodsC/' + filepath;
    };
    OpendapService.prototype.get = function (url) {
        return this.http.get(url, { responseType: 'text' });
    };
    OpendapService.prototype.getData = function (queryUrl, das) {
        return this.get(queryUrl).pipe(map(function (txt) { return simplify(parseData(txt, das)); }));
    };
    OpendapService.prototype.getDAS = function (url) {
        return this.get(url + '.das').pipe(map(parseDAS));
    };
    OpendapService.prototype.getDDX = function (url) {
        return this.get(url + '.ddx').pipe(map(parseDDX));
    };
    OpendapService.prototype.getExtent = function (url) {
        var _this = this;
        console.log(url);
        return forkJoin([
            this.getDAS(url),
            this.getDDX(url)
        ]).pipe(switchMap(function (_a) {
            var _b = tslib_1.__read(_a, 2), theDAS = _b[0], theDDX = _b[1];
            var das = theDAS;
            return forkJoin([
                _this.getData(url + '.ascii?latitude', das),
                _this.getData(url + '.ascii?longitude', das)
            ]);
        }), map(function (ll) {
            var lats = ll[0].latitude;
            var lons = ll[1].longitude;
            return [lats[0], lats[lats.length - 1],
                lons[0], lons[lons.length - 1]];
        }));
    };
    OpendapService.prototype.dapRangeQuery = function (from, to, step) {
        step = step || 1;
        if (to === undefined) {
            to = from;
        }
        return '[' + from + ':' + step + ':' + to + ']';
    };
    OpendapService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    OpendapService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [HttpClient])
    ], OpendapService);
    return OpendapService;
}());
export { OpendapService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlbmRhcC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWFwLXdhbGQvIiwic291cmNlcyI6WyJvcGVuZGFwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFDLFFBQVEsRUFDbkMsUUFBUSxFQUFpRCxNQUFNLDZCQUE2QixDQUFDO0FBRS9GLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDaEQsT0FBTyxFQUFhLFFBQVEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUczQztJQUVFLHdCQUFvQixJQUFlO1FBQWYsU0FBSSxHQUFKLElBQUksQ0FBVztJQUVuQyxDQUFDO0lBRUQsZ0NBQU8sR0FBUCxVQUFRLElBQWdCLEVBQUMsUUFBZTtRQUN0QyxPQUFPLElBQUksQ0FBQyxHQUFHLEdBQUcsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUN6QyxDQUFDO0lBRUQsNEJBQUcsR0FBSCxVQUFJLEdBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBQyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFBO0lBQ3BELENBQUM7SUFFRCxnQ0FBTyxHQUFQLFVBQVEsUUFBZSxFQUFDLEdBQVU7UUFDaEMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FDNUIsR0FBRyxDQUFDLFVBQUMsR0FBVSxJQUFHLE9BQUEsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUMsR0FBRyxDQUFDLENBQUMsRUFBNUIsQ0FBNEIsQ0FBQyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELCtCQUFNLEdBQU4sVUFBTyxHQUFVO1FBQ2YsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQzlCLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFFRCwrQkFBTSxHQUFOLFVBQU8sR0FBVTtRQUNmLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUM5QixHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRUQsa0NBQVMsR0FBVCxVQUFVLEdBQVU7UUFBcEIsaUJBaUJDO1FBaEJDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakIsT0FBTyxRQUFRLENBQUM7WUFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUNoQixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztTQUNqQixDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFDLEVBQWU7Z0JBQWYsMEJBQWUsRUFBZCxjQUFNLEVBQUMsY0FBTTtZQUMvQixJQUFJLEdBQUcsR0FBa0IsTUFBTSxDQUFDO1lBQ2hDLE9BQU8sUUFBUSxDQUFDO2dCQUNkLEtBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFDLGlCQUFpQixFQUFDLEdBQUcsQ0FBQztnQkFDdkMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUMsa0JBQWtCLEVBQUMsR0FBRyxDQUFDO2FBQ3pDLENBQUMsQ0FBQTtRQUFBLENBQUMsQ0FBQyxFQUNKLEdBQUcsQ0FBQyxVQUFDLEVBQVk7WUFDZixJQUFJLElBQUksR0FBeUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztZQUNoRCxJQUFJLElBQUksR0FBeUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztZQUNqRCxPQUFPLENBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQztnQkFDbkMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkQsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7SUFFRCxzQ0FBYSxHQUFiLFVBQWMsSUFBVyxFQUFDLEVBQVUsRUFBQyxJQUFZO1FBQy9DLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDO1FBQ2pCLElBQUcsRUFBRSxLQUFHLFNBQVMsRUFBQztZQUNoQixFQUFFLEdBQUcsSUFBSSxDQUFDO1NBQ1g7UUFDRCxPQUFPLEdBQUcsR0FBQyxJQUFJLEdBQUMsR0FBRyxHQUFDLElBQUksR0FBQyxHQUFHLEdBQUMsRUFBRSxHQUFDLEdBQUcsQ0FBQztJQUN0QyxDQUFDOztnQkFwRHdCLFVBQVU7O0lBRnhCLGNBQWM7UUFEMUIsVUFBVSxFQUFFO2lEQUdjLFVBQVU7T0FGeEIsY0FBYyxDQXVEMUI7SUFBRCxxQkFBQztDQUFBLEFBdkRELElBdURDO1NBdkRZLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgcGFyc2VEYXRhLCBwYXJzZURBUyxwYXJzZUREWCxcbiAgc2ltcGxpZnksIERhcERhdGEsIERhcERBUywgRGFwRERYLCBEYXBWYXJpYWJsZURhdGFBcnJheSB9IGZyb20gJ2RhcC1xdWVyeS1qcy9kaXN0L2RhcC1xdWVyeSc7XG5pbXBvcnQgeyBDYXRhbG9nSG9zdCB9IGZyb20gJy4vZGF0YS9jYXRhbG9nJztcbmltcG9ydCB7IG1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSxmb3JrSm9pbiB9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgT3BlbmRhcFNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDpIdHRwQ2xpZW50KSB7XG5cbiAgfVxuXG4gIG1ha2VVUkwoaG9zdDpDYXRhbG9nSG9zdCxmaWxlcGF0aDpzdHJpbmcpOnN0cmluZ3tcbiAgICByZXR1cm4gaG9zdC51cmwgKyAnL2RvZHNDLycgKyBmaWxlcGF0aDtcbiAgfVxuXG4gIGdldCh1cmw6c3RyaW5nKTpPYnNlcnZhYmxlPHN0cmluZz57XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsLHsgcmVzcG9uc2VUeXBlOiAndGV4dCcgfSlcbiAgfVxuXG4gIGdldERhdGEocXVlcnlVcmw6c3RyaW5nLGRhczpEYXBEQVMpOk9ic2VydmFibGU8RGFwRGF0YT57XG4gICAgcmV0dXJuIHRoaXMuZ2V0KHF1ZXJ5VXJsKS5waXBlKFxuICAgICAgbWFwKCh0eHQ6c3RyaW5nKT0+c2ltcGxpZnkocGFyc2VEYXRhKHR4dCxkYXMpKSkpO1xuICB9XG5cbiAgZ2V0REFTKHVybDpzdHJpbmcpOk9ic2VydmFibGU8RGFwREFTPntcbiAgICByZXR1cm4gdGhpcy5nZXQodXJsKycuZGFzJykucGlwZShcbiAgICAgIG1hcChwYXJzZURBUykpO1xuICB9XG5cbiAgZ2V0RERYKHVybDpzdHJpbmcpOk9ic2VydmFibGU8RGFwRERYPntcbiAgICByZXR1cm4gdGhpcy5nZXQodXJsKycuZGR4JykucGlwZShcbiAgICAgIG1hcChwYXJzZUREWCkpO1xuICB9XG5cbiAgZ2V0RXh0ZW50KHVybDpzdHJpbmcpOk9ic2VydmFibGU8bnVtYmVyW10+e1xuICAgIGNvbnNvbGUubG9nKHVybCk7XG4gICAgcmV0dXJuIGZvcmtKb2luKFtcbiAgICAgIHRoaXMuZ2V0REFTKHVybCksXG4gICAgICB0aGlzLmdldEREWCh1cmwpXG4gICAgXSkucGlwZShzd2l0Y2hNYXAoKFt0aGVEQVMsdGhlRERYXSk9PntcbiAgICAgIHZhciBkYXM6RGFwREFTID0gPERhcERBUz50aGVEQVM7XG4gICAgICByZXR1cm4gZm9ya0pvaW4oW1xuICAgICAgICB0aGlzLmdldERhdGEodXJsKycuYXNjaWk/bGF0aXR1ZGUnLGRhcyksXG4gICAgICAgIHRoaXMuZ2V0RGF0YSh1cmwrJy5hc2NpaT9sb25naXR1ZGUnLGRhcylcbiAgICAgIF0pfSksXG4gICAgICBtYXAoKGxsOkRhcERhdGFbXSk9PntcbiAgICAgICAgdmFyIGxhdHMgPSA8RGFwVmFyaWFibGVEYXRhQXJyYXk+bGxbMF0ubGF0aXR1ZGU7XG4gICAgICAgIHZhciBsb25zID0gPERhcFZhcmlhYmxlRGF0YUFycmF5PmxsWzFdLmxvbmdpdHVkZTtcbiAgICAgICAgcmV0dXJuIFs8bnVtYmVyPmxhdHNbMF0sPG51bWJlcj5sYXRzW2xhdHMubGVuZ3RoLTFdLFxuICAgICAgICAgICAgICAgIDxudW1iZXI+bG9uc1swXSw8bnVtYmVyPmxvbnNbbG9ucy5sZW5ndGgtMV1dO1xuICAgICAgfSkpO1xuICB9XG5cbiAgZGFwUmFuZ2VRdWVyeShmcm9tOm51bWJlcix0bz86bnVtYmVyLHN0ZXA/Om51bWJlcik6c3RyaW5ne1xuICAgIHN0ZXAgPSBzdGVwIHx8IDE7XG4gICAgaWYodG89PT11bmRlZmluZWQpe1xuICAgICAgdG8gPSBmcm9tO1xuICAgIH1cbiAgICByZXR1cm4gJ1snK2Zyb20rJzonK3N0ZXArJzonK3RvKyddJztcbiAgfVxufVxuIl19