import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { OpendapService } from './opendap.service';
import { MetadataService, LAT_NAMES, LNG_NAMES, TIME_NAMES } from './metadata.service';
import { forkJoin } from 'rxjs';
import { switchMap, map } from 'rxjs/operators';
;
var TimeseriesService = /** @class */ (function () {
    function TimeseriesService(metadata, dap) {
        this.metadata = metadata;
        this.dap = dap;
    }
    TimeseriesService.prototype.getTimeseries = function (host, file, variable, pt, additionalIndices, fillValue) {
        var _this = this;
        additionalIndices = additionalIndices || {};
        var url = this.dap.makeURL(host, file);
        var ddx$ = this.metadata.ddxForUrl(url);
        var das$ = this.metadata.dasForUrl(url);
        var variable = variable;
        return forkJoin(ddx$, das$, this.metadata.getGrid(host, file)).pipe(switchMap(function (_a) {
            var _b = tslib_1.__read(_a, 3), ddx = _b[0], das = _b[1], latsAndLngs = _b[2];
            var lats = latsAndLngs[0];
            var lngs = latsAndLngs[1];
            var latIndex = _this.indexInDimension(pt.lat, lats);
            var lngIndex = _this.indexInDimension(pt.lng, lngs);
            if (fillValue === undefined) {
                fillValue = +ddx.variables[variable]._FillValue;
            }
            var query = _this.makeTimeQuery(ddx, variable, latIndex, lngIndex, additionalIndices);
            return _this.dap.getData(url + ".ascii?" + variable + query, das);
        }), map(function (data) {
            var vals = data[variable];
            if (!vals.length) {
                vals = [data[variable]];
            }
            return {
                dates: (data.time || data.t),
                values: vals.map(function (v) { return (v === fillValue) ? NaN : v; })
            };
        }));
    };
    TimeseriesService.prototype.getTimeseriesForLayer = function (ml, pt) {
        return this.getTimeseries(ml.flattenedSettings.host, ml.interpolatedFile, ml.flattenedSettings.layer || ml.flattenedSettings.variable, pt, null, ml.flattenedSettings.fillValue);
    };
    TimeseriesService.prototype.makeTimeQuery = function (ddx, variable, latIndex, lngIndex, additionalIndices) {
        var _this = this;
        var metadata = ddx.variables[variable];
        var query = '';
        metadata.dimensions.forEach(function (dim) {
            var dName = dim.name.toLowerCase();
            if (TIME_NAMES.indexOf(dName) >= 0) {
                query += _this.dapRangeQuery(0, +(dim.size) - 1);
            }
            else if (LAT_NAMES.indexOf(dName) >= 0) {
                query += _this.dapRangeQuery(latIndex);
            }
            else if (LNG_NAMES.indexOf(dName) >= 0) {
                query += _this.dapRangeQuery(lngIndex);
            }
            else {
                query += _this.dapRangeQuery(additionalIndices[dName] || 0);
            }
        });
        return query;
    };
    TimeseriesService.prototype.dapRangeQuery = function (from, to, step) {
        step = step || 1;
        if (to === undefined) {
            to = from;
        }
        return '[' + from + ':' + step + ':' + to + ']';
    };
    TimeseriesService.prototype.indexInDimension = function (c, dim, trim) {
        var minIndex = 0;
        var maxIndex = dim.length - 1;
        if (trim) {
            maxIndex -= trim;
        }
        var rev = dim[0] > dim[dim.length - 1];
        if (rev) {
            minIndex = maxIndex;
            maxIndex = 0;
        }
        var currentIndex;
        while ((minIndex <= maxIndex) || (rev && (maxIndex <= minIndex))) {
            if (c <= dim[minIndex]) {
                return minIndex;
            }
            if (c >= dim[maxIndex]) {
                return maxIndex;
            }
            currentIndex = Math.floor((minIndex + maxIndex) / 2);
            var d1 = Math.abs(dim[currentIndex] - c);
            var d2 = Math.abs(dim[currentIndex + 1] - c);
            if (rev) {
                if (d2 <= d1) {
                    maxIndex = currentIndex + 1;
                }
                else {
                    minIndex = currentIndex;
                }
            }
            else {
                if (d2 <= d1) {
                    minIndex = currentIndex + 1;
                }
                else {
                    maxIndex = currentIndex;
                }
            }
        }
        return currentIndex;
    };
    ;
    TimeseriesService.ctorParameters = function () { return [
        { type: MetadataService },
        { type: OpendapService }
    ]; };
    TimeseriesService = tslib_1.__decorate([
        Injectable()
    ], TimeseriesService);
    return TimeseriesService;
}());
export { TimeseriesService };
//# sourceMappingURL=data:application/json;base64,