import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { OpendapService } from './opendap.service';
import { MetadataService, LAT_NAMES, LNG_NAMES, TIME_NAMES } from './metadata.service';
import { forkJoin } from 'rxjs';
import { switchMap, map } from 'rxjs/operators';
;
var TimeseriesService = /** @class */ (function () {
    function TimeseriesService(metadata, dap) {
        this.metadata = metadata;
        this.dap = dap;
    }
    TimeseriesService.prototype.getTimeseries = function (host, file, variable, pt, additionalIndices, fillValue) {
        var _this = this;
        additionalIndices = additionalIndices || {};
        var url = this.dap.makeURL(host, file);
        var ddx$ = this.metadata.ddxForUrl(url);
        var das$ = this.metadata.dasForUrl(url);
        var variable = variable;
        return forkJoin(ddx$, das$, this.metadata.getGrid(host, file)).pipe(switchMap(function (_a) {
            var _b = tslib_1.__read(_a, 3), ddx = _b[0], das = _b[1], latsAndLngs = _b[2];
            var lats = latsAndLngs[0];
            var lngs = latsAndLngs[1];
            var latIndex = _this.indexInDimension(pt.lat, lats);
            var lngIndex = _this.indexInDimension(pt.lng, lngs);
            if (fillValue === undefined) {
                fillValue = +ddx.variables[variable]._FillValue;
            }
            var query = _this.makeTimeQuery(ddx, variable, latIndex, lngIndex, additionalIndices);
            return _this.dap.getData(url + ".ascii?" + variable + query, das);
        }), map(function (data) {
            var vals = data[variable];
            if (!vals.length) {
                vals = [data[variable]];
            }
            return {
                dates: (data.time || data.t),
                values: vals.map(function (v) { return (v === fillValue) ? NaN : v; })
            };
        }));
    };
    TimeseriesService.prototype.getTimeseriesForLayer = function (ml, pt) {
        return this.getTimeseries(ml.flattenedSettings.host, ml.interpolatedFile, ml.flattenedSettings.layer || ml.flattenedSettings.variable, pt, null, ml.flattenedSettings.fillValue);
    };
    TimeseriesService.prototype.makeTimeQuery = function (ddx, variable, latIndex, lngIndex, additionalIndices) {
        var _this = this;
        var metadata = ddx.variables[variable];
        var query = '';
        metadata.dimensions.forEach(function (dim) {
            var dName = dim.name.toLowerCase();
            if (TIME_NAMES.indexOf(dName) >= 0) {
                query += _this.dapRangeQuery(0, +(dim.size) - 1);
            }
            else if (LAT_NAMES.indexOf(dName) >= 0) {
                query += _this.dapRangeQuery(latIndex);
            }
            else if (LNG_NAMES.indexOf(dName) >= 0) {
                query += _this.dapRangeQuery(lngIndex);
            }
            else {
                query += _this.dapRangeQuery(additionalIndices[dName] || 0);
            }
        });
        return query;
    };
    TimeseriesService.prototype.dapRangeQuery = function (from, to, step) {
        step = step || 1;
        if (to === undefined) {
            to = from;
        }
        return '[' + from + ':' + step + ':' + to + ']';
    };
    TimeseriesService.prototype.indexInDimension = function (c, dim, trim) {
        var minIndex = 0;
        var maxIndex = dim.length - 1;
        if (trim) {
            maxIndex -= trim;
        }
        var rev = dim[0] > dim[dim.length - 1];
        if (rev) {
            minIndex = maxIndex;
            maxIndex = 0;
        }
        var currentIndex;
        while ((minIndex <= maxIndex) || (rev && (maxIndex <= minIndex))) {
            if (c <= dim[minIndex]) {
                return minIndex;
            }
            if (c >= dim[maxIndex]) {
                return maxIndex;
            }
            currentIndex = Math.floor((minIndex + maxIndex) / 2);
            var d1 = Math.abs(dim[currentIndex] - c);
            var d2 = Math.abs(dim[currentIndex + 1] - c);
            if (rev) {
                if (d2 <= d1) {
                    maxIndex = currentIndex + 1;
                }
                else {
                    minIndex = currentIndex;
                }
            }
            else {
                if (d2 <= d1) {
                    minIndex = currentIndex + 1;
                }
                else {
                    maxIndex = currentIndex;
                }
            }
        }
        return currentIndex;
    };
    ;
    TimeseriesService.ctorParameters = function () { return [
        { type: MetadataService },
        { type: OpendapService }
    ]; };
    TimeseriesService = tslib_1.__decorate([
        Injectable()
    ], TimeseriesService);
    return TimeseriesService;
}());
export { TimeseriesService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXNlcmllcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWFwLXdhbGQvIiwic291cmNlcyI6WyJ0aW1lc2VyaWVzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUd2RixPQUFPLEVBQUUsUUFBUSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQzVDLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFpQi9DLENBQUM7QUFHRjtJQUVFLDJCQUFvQixRQUF3QixFQUFTLEdBQWtCO1FBQW5ELGFBQVEsR0FBUixRQUFRLENBQWdCO1FBQVMsUUFBRyxHQUFILEdBQUcsQ0FBZTtJQUV2RSxDQUFDO0lBRUQseUNBQWEsR0FBYixVQUFjLElBQWdCLEVBQUMsSUFBVyxFQUFDLFFBQWUsRUFDNUMsRUFBd0IsRUFBQyxpQkFBcUIsRUFDOUMsU0FBaUI7UUFGL0IsaUJBNkJDO1FBMUJDLGlCQUFpQixHQUFHLGlCQUFpQixJQUFJLEVBQUUsQ0FBQztRQUM1QyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEMsSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3hCLE9BQU8sUUFBUSxDQUFDLElBQUksRUFBQyxJ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Y0FBYzs7SUFGNUQsaUJBQWlCO1FBRDdCLFVBQVUsRUFBRTtPQUNBLGlCQUFpQixDQXdIN0I7SUFBRCx3QkFBQztDQUFBLEFBeEhELElBd0hDO1NBeEhZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hcHBlZExheWVyIH0gZnJvbSAnLi9kYXRhL21hcHBlZC1sYXllcic7XG5pbXBvcnQgeyBMYXRMbmcgfSBmcm9tICdAYWdtL2NvcmUnO1xuaW1wb3J0IHsgT3BlbmRhcFNlcnZpY2UgfSBmcm9tICcuL29wZW5kYXAuc2VydmljZSc7XG5pbXBvcnQgeyBNZXRhZGF0YVNlcnZpY2UsIExBVF9OQU1FUywgTE5HX05BTUVTLCBUSU1FX05BTUVTIH0gZnJvbSAnLi9tZXRhZGF0YS5zZXJ2aWNlJztcbmltcG9ydCB7IERhcEREWCwgRGFwREFTLCBEYXBEYXRhIH0gZnJvbSAnZGFwLXF1ZXJ5LWpzL2Rpc3QvZGFwLXF1ZXJ5JztcbmltcG9ydCB7IENhdGFsb2dIb3N0LCBMYXllciB9IGZyb20gJy4vZGF0YS9jYXRhbG9nJztcbmltcG9ydCB7IGZvcmtKb2luLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGludGVyZmFjZSBUaW1lU2VyaWVze1xuICBkYXRlczpBcnJheTxEYXRlPjtcbiAgdmFsdWVzOkFycmF5PG51bWJlcj47XG4gIGxhYmVsPzpzdHJpbmc7XG4gIHRhZ3M/OntcbiAgICBba2V5OnN0cmluZ106YW55XG4gIH07XG4gIHN0eWxlPzpzdHJpbmc7XG4gIHVuaXRzPzpzdHJpbmc7XG4gIFtrZXk6c3RyaW5nXTphbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2ltcGxlTGF0TG5ne1xuICBsYXQ6bnVtYmVyLFxuICBsbmc6bnVtYmVyXG59O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGltZXNlcmllc1NlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbWV0YWRhdGE6TWV0YWRhdGFTZXJ2aWNlLHByaXZhdGUgZGFwOk9wZW5kYXBTZXJ2aWNlKSB7XG5cbiAgfVxuXG4gIGdldFRpbWVzZXJpZXMoaG9zdDpDYXRhbG9nSG9zdCxmaWxlOnN0cmluZyx2YXJpYWJsZTpzdHJpbmcsXG4gICAgICAgICAgICAgICAgcHQ6KExhdExuZ3xTaW1wbGVMYXRMbmcpLGFkZGl0aW9uYWxJbmRpY2VzOmFueSxcbiAgICAgICAgICAgICAgICBmaWxsVmFsdWU/Om51bWJlcik6T2JzZXJ2YWJsZTxUaW1lU2VyaWVzPntcbiAgICBhZGRpdGlvbmFsSW5kaWNlcyA9IGFkZGl0aW9uYWxJbmRpY2VzIHx8IHt9O1xuICAgIHZhciB1cmwgPSB0aGlzLmRhcC5tYWtlVVJMKGhvc3QsZmlsZSk7XG4gICAgdmFyIGRkeCQgPSB0aGlzLm1ldGFkYXRhLmRkeEZvclVybCh1cmwpO1xuICAgIHZhciBkYXMkID0gdGhpcy5tZXRhZGF0YS5kYXNGb3JVcmwodXJsKTtcbiAgICB2YXIgdmFyaWFibGUgPSB2YXJpYWJsZTtcbiAgICByZXR1cm4gZm9ya0pvaW4oZGR4JCxkYXMkLHRoaXMubWV0YWRhdGEuZ2V0R3JpZChob3N0LGZpbGUpKS5waXBlKHN3aXRjaE1hcChcbiAgICAgIChbZGR4LGRhcyxsYXRzQW5kTG5nc10pPT57XG4gICAgICAgIGNvbnN0IGxhdHM6bnVtYmVyW10gPSAoPG51bWJlcltdW10+bGF0c0FuZExuZ3MpWzBdO1xuICAgICAgICBjb25zdCBsbmdzOm51bWJlcltdID0gKDxudW1iZXJbXVtdPmxhdHNBbmRMbmdzKVsxXTtcbiAgICAgIHZhciBsYXRJbmRleCA9IHRoaXMuaW5kZXhJbkRpbWVuc2lvbigoPGFueT5wdCkubGF0LGxhdHMpO1xuICAgICAgdmFyIGxuZ0luZGV4ID0gdGhpcy5pbmRleEluRGltZW5zaW9uKCg8YW55PnB0KS5sbmcsbG5ncyk7XG4gICAgICBpZihmaWxsVmFsdWU9PT11bmRlZmluZWQpe1xuICAgICAgICBmaWxsVmFsdWUgPSArKDxEYXBERFg+ZGR4KS52YXJpYWJsZXNbdmFyaWFibGVdLl9GaWxsVmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgcXVlcnkgPSB0aGlzLm1ha2VUaW1lUXVlcnkoPERhcEREWD5kZHgsdmFyaWFibGUsbGF0SW5kZXgsbG5nSW5kZXgsYWRkaXRpb25hbEluZGljZXMpO1xuICAgICAgcmV0dXJuIHRoaXMuZGFwLmdldERhdGEoYCR7dXJsfS5hc2NpaT8ke3ZhcmlhYmxlfSR7cXVlcnl9YCw8RGFwREFTPmRhcylcbiAgICB9KSxtYXAoKGRhdGE6RGFwRGF0YSk9PntcbiAgICAgIGxldCB2YWxzID0gKDxudW1iZXJbXT4gZGF0YVt2YXJpYWJsZV0pO1xuICAgICAgaWYoIXZhbHMubGVuZ3RoKXtcbiAgICAgICAgdmFscyA9IFs8bnVtYmVyPmRhdGFbdmFyaWFibGVdXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRhdGVzOjxBcnJheTxEYXRlPj4gKGRhdGEudGltZXx8ZGF0YS50KSxcbiAgICAgICAgdmFsdWVzOnZhbHMubWFwKHY9Pih2PT09ZmlsbFZhbHVlKT9OYU46dilcbiAgICAgIH07XG4gICAgfSkpO1xuICB9XG5cbiAgZ2V0VGltZXNlcmllc0ZvckxheWVyKG1sOk1hcHBlZExheWVyLHB0OkxhdExuZyk6T2JzZXJ2YWJsZTxUaW1lU2VyaWVzPntcbiAgICByZXR1cm4gdGhpcy5nZXRUaW1lc2VyaWVzKG1sLmZsYXR0ZW5lZFNldHRpbmdzLmhvc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtbC5pbnRlcnBvbGF0ZWRGaWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWwuZmxhdHRlbmVkU2V0dGluZ3MubGF5ZXJ8fG1sLmZsYXR0ZW5lZFNldHRpbmdzLnZhcmlhYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWwuZmxhdHRlbmVkU2V0dGluZ3MuZmlsbFZhbHVlKTtcbiAgfVxuXG5cbiAgbWFrZVRpbWVRdWVyeShkZHg6RGFwRERYLHZhcmlhYmxlOnN0cmluZyxsYXRJbmRleDpudW1iZXIsbG5nSW5kZXg6bnVtYmVyLGFkZGl0aW9uYWxJbmRpY2VzOmFueSk6c3RyaW5ne1xuICAgIHZhciBtZXRhZGF0YSA9IGRkeC52YXJpYWJsZXNbdmFyaWFibGVdO1xuICAgIHZhciBxdWVyeT0nJztcblxuICAgIG1ldGFkYXRhLmRpbWVuc2lvbnMuZm9yRWFjaCgoZGltOmFueSk9PntcbiAgICAgIHZhciBkTmFtZTpzdHJpbmcgPSBkaW0ubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYoVElNRV9OQU1FUy5pbmRleE9mKGROYW1lKT49MCl7XG4gICAgICAgIHF1ZXJ5ICs9IHRoaXMuZGFwUmFuZ2VRdWVyeSgwLCsoZGltLnNpemUpLTEpO1xuICAgICAgfSBlbHNlIGlmKExBVF9OQU1FUy5pbmRleE9mKGROYW1lKT49MCl7XG4gICAgICAgICAgcXVlcnkgKz0gdGhpcy5kYXBSYW5nZVF1ZXJ5KGxhdEluZGV4KTtcbiAgICAgIH0gZWxzZSBpZihMTkdfTkFNRVMuaW5kZXhPZihkTmFtZSk+PTApe1xuICAgICAgICBxdWVyeSArPSB0aGlzLmRhcFJhbmdlUXVlcnkobG5nSW5kZXgpO1xuICAgICAgfSBlbHNlIHsgXG4gICAgICAgIHF1ZXJ5ICs9IHRoaXMuZGFwUmFuZ2VRdWVyeShhZGRpdGlvbmFsSW5kaWNlc1tkTmFtZV18fDApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBxdWVyeTtcbiAgfVxuXG4gIGRhcFJhbmdlUXVlcnkoZnJvbTpudW1iZXIsdG8/Om51bWJlcixzdGVwPzpudW1iZXIpOnN0cmluZ3tcbiAgICBzdGVwID0gc3RlcCB8fCAxO1xuICAgIGlmKHRvPT09dW5kZWZpbmVkKXtcbiAgICAgIHRvID0gZnJvbTtcbiAgICB9XG4gICAgcmV0dXJuICdbJytmcm9tKyc6JytzdGVwKyc6Jyt0bysnXSc7XG4gIH1cblxuICBpbmRleEluRGltZW5zaW9uKGM6bnVtYmVyLGRpbTpBcnJheTxudW1iZXI+LHRyaW0/Om51bWJlcik6bnVtYmVye1xuICAgIHZhciBtaW5JbmRleCA9IDA7XG4gICAgdmFyIG1heEluZGV4ID0gZGltLmxlbmd0aC0xO1xuXG4gICAgaWYodHJpbSl7XG4gICAgICBtYXhJbmRleC09dHJpbTtcbiAgICB9XG5cbiAgICBjb25zdCByZXYgPSBkaW1bMF0gPiBkaW1bZGltLmxlbmd0aC0xXTtcbiAgICBpZihyZXYpe1xuICAgICAgbWluSW5kZXggPSBtYXhJbmRleDtcbiAgICAgIG1heEluZGV4ID0gMDtcbiAgICB9XG4gICAgdmFyIGN1cnJlbnRJbmRleDtcblxuICAgIHdoaWxlKChtaW5JbmRleDw9bWF4SW5kZXgpfHwocmV2JiYobWF4SW5kZXg8PW1pbkluZGV4KSkpe1xuICAgICAgaWYoYzw9ZGltW21pbkluZGV4XSl7XG4gICAgICAgIHJldHVybiBtaW5JbmRleDtcbiAgICAgIH1cblxuICAgICAgaWYoYz49ZGltW21heEluZGV4XSl7XG4gICAgICAgIHJldHVybiBtYXhJbmRleDtcbiAgICAgIH1cblxuICAgICAgY3VycmVudEluZGV4ID0gTWF0aC5mbG9vcigobWluSW5kZXggKyBtYXhJbmRleCkgLyAyKTtcblxuICAgICAgdmFyIGQxID0gTWF0aC5hYnMoZGltW2N1cnJlbnRJbmRleF0tYyk7XG4gICAgICB2YXIgZDIgPSBNYXRoLmFicyhkaW1bY3VycmVudEluZGV4KzFdLWMpO1xuXG4gICAgICBpZihyZXYpe1xuICAgICAgICBpZiAoZDIgPD0gZDEpIHtcbiAgICAgICAgICAgIG1heEluZGV4ID0gY3VycmVudEluZGV4ICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1pbkluZGV4ID0gY3VycmVudEluZGV4O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZDIgPD0gZDEpIHtcbiAgICAgICAgICAgIG1pbkluZGV4ID0gY3VycmVudEluZGV4ICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1heEluZGV4ID0gY3VycmVudEluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50SW5kZXg7XG4gIH07XG5cbn1cbiJdfQ==