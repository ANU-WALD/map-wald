import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
//const proj4 = require('proj4');
//const Proj = proj4.Proj;
//const defs = proj4.defs;
//proj4.InterfaceProjection;
//const InterfaceCoordinates = proj4.InterfaceCoordinates;
//const TemplateCoordinates = proj4.TemplateCoordinates;
//const proj4 = require('proj4').default;
import * as proj4 from 'proj4';
var D2R = Math.PI / 180;
var WMSService = /** @class */ (function () {
    function WMSService() {
        this.webMercator = (proj4.default || proj4).Proj('EPSG:3857');
        //this.webMercator = proj4.Proj(proj4.defs('EPSG:3857'));
    }
    WMSService_1 = WMSService;
    WMSService.prototype.pointToWebMercator = function (pt) {
        var ptRadians = { x: pt.lng() * D2R, y: pt.lat() * D2R };
        var ptWM = this.webMercator.forward({ x: ptRadians.x, y: ptRadians.y });
        return ptWM;
    };
    ;
    WMSService.prototype.computeTileBounds = function (map, coord, zoom) {
        var proj = map.getProjection();
        var zfactor = Math.pow(2, zoom);
        var xScale = WMSService_1.TILE_WIDTH / zfactor;
        var yScale = WMSService_1.TILE_HEIGHT / zfactor;
        var topLeftLatLng = proj.fromPointToLatLng({ x: coord.x * xScale, y: coord.y * yScale });
        var bottomRightLatLng = proj.fromPointToLatLng({ x: (coord.x + 1) * xScale, y: (coord.y + 1) * yScale });
        var topLeftWebMercator = this.pointToWebMercator(topLeftLatLng);
        var bottomRightWebMercator = this.pointToWebMercator(bottomRightLatLng);
        if (topLeftWebMercator.x > bottomRightWebMercator.x) {
            if (topLeftLatLng.lng() === 180.0) {
                topLeftWebMercator.x = -topLeftWebMercator.x;
            }
            else {
                bottomRightWebMercator.x = -bottomRightWebMercator.x;
            }
        }
        var bbox = [topLeftWebMercator.x, bottomRightWebMercator.y, bottomRightWebMercator.x, topLeftWebMercator.y];
        var bboxTxt = bbox.map(function (n) { return n.toFixed(20).replace(/\.?0+$/, ""); }); // Avoid e notation on small numbers
        return bboxTxt.join(',');
    };
    ;
    WMSService.prototype.buildImageMap = function (getMap, getURL, getOptions, getOpacity) {
        var me = this;
        return new window.google.maps.ImageMapType({
            getTileUrl: function (coord, zoom) {
                var theMap = getMap();
                if (!theMap) {
                    return '';
                }
                var bbox = me.computeTileBounds(theMap, coord, zoom);
                var url = getURL(zoom) + '&service=WMS&version=1.1.1&request=GetMap';
                url += "&BBOX=" + bbox; // set bounding box
                url += "&FORMAT=image/png"; //WMS format
                var layerParams = getOptions ? getOptions(zoom) : {};
                layerParams.width = WMSService_1.TILE_WIDTH;
                layerParams.height = WMSService_1.TILE_HEIGHT;
                for (var key in layerParams) {
                    url += '&' + key + '=' + layerParams[key];
                }
                url += "&SRS=EPSG:3857"; //set Web Mercator
                return url;
            },
            tileSize: new window.google.maps.Size(WMSService_1.TILE_SIZE, WMSService_1.TILE_SIZE),
            isPng: true,
            opacity: getOpacity ? getOpacity() : 1.0
        });
    };
    ;
    var WMSService_1;
    WMSService.TILE_SIZE = 256;
    WMSService.TILE_WIDTH = WMSService_1.TILE_SIZE;
    WMSService.TILE_HEIGHT = WMSService_1.TILE_SIZE;
    WMSService = WMSService_1 = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [])
    ], WMSService);
    return WMSService;
}());
export { WMSService };
//# sourceMappingURL=data:application/json;base64,