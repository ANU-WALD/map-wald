import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { OpendapService } from './opendap.service';
import { forkJoin, of } from 'rxjs';
import { publishReplay, refCount, map, switchAll, shareReplay } from 'rxjs/operators';
export var LAT_NAMES = ['latitude', 'lat'];
export var LNG_NAMES = ['longitude', 'lng', 'lon'];
export var TIME_NAMES = ['time', 't'];
var MetadataService = /** @class */ (function () {
    function MetadataService(dap) {
        this.dap = dap;
        this.ddxCache = {};
        this.dasCache = {};
        this.timeCache = {};
    }
    MetadataService.prototype.identifyCoordinate = function (ddx) {
        var e_1, _a;
        var possibleNames = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            possibleNames[_i - 1] = arguments[_i];
        }
        try {
            for (var possibleNames_1 = tslib_1.__values(possibleNames), possibleNames_1_1 = possibleNames_1.next(); !possibleNames_1_1.done; possibleNames_1_1 = possibleNames_1.next()) {
                var n = possibleNames_1_1.value;
                if (ddx.variables[n]) {
                    return n;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (possibleNames_1_1 && !possibleNames_1_1.done && (_a = possibleNames_1.return)) _a.call(possibleNames_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return undefined;
    };
    MetadataService.prototype.getDDX = function (host, file) {
        var url = this.dap.makeURL(host, file);
        return this.ddxForUrl(url);
    };
    MetadataService.prototype.ddxForUrl = function (url) {
        if (!this.ddxCache[url]) {
            this.ddxCache[url] =
                this.dap.getDDX(url).pipe(publishReplay(), refCount());
        }
        return this.ddxCache[url];
    };
    MetadataService.prototype.getDDXForLayer = function (ml) {
        return this.getDDX(ml.flattenedSettings.host, ml.interpolatedFile);
    };
    MetadataService.prototype.getDAS = function (host, file) {
        var url = this.dap.makeURL(host, file);
        return this.dasForUrl(url);
    };
    MetadataService.prototype.dasForUrl = function (url) {
        if (!this.dasCache[url]) {
            this.dasCache[url] =
                this.dap.getDAS(url).pipe(publishReplay(), refCount());
        }
        return this.dasCache[url];
    };
    MetadataService.prototype.getDASForLayer = function (ml) {
        return this.getDAS(ml.flattenedSettings.host, ml.interpolatedFile);
    };
    MetadataService.prototype.getMetadata = function (ml) {
        if (ml.flattenedSettings.host.software !== 'tds') {
            return of({});
        }
        return forkJoin([this.getDASForLayer(ml), this.getDDXForLayer(ml)]).pipe(map(function (meta) {
            return {
                das: meta[0],
                ddx: meta[1]
            };
        }), map(function (meta) {
            return Object.assign({}, meta.das.attr || {}, meta.ddx.variables[ml.flattenedSettings.layer || ml.flattenedSettings.variable] || {});
        }));
    };
    MetadataService.prototype.populateMetadata = function (ml) {
        this.getMetadata(ml).subscribe(function (entry) {
            setTimeout(function () {
                ml.retrievedMetadata = entry;
            });
        });
    };
    MetadataService.prototype.getGrid = function (host, file) {
        var url = this.dap.makeURL(host, file);
        return this.getGridForURL(url);
    };
    MetadataService.prototype.getGridForURL = function (url) {
        var _this = this;
        var ddx$ = this.ddxForUrl(url);
        var das$ = this.dasForUrl(url);
        var res$ = forkJoin([ddx$, das$]).pipe(map(function (metadata) {
            var ddx = metadata[0];
            var das = metadata[1];
            var latCoord = _this.identifyCoordinate.apply(_this, tslib_1.__spread([ddx], LAT_NAMES));
            var lngCoord = _this.identifyCoordinate.apply(_this, tslib_1.__spread([ddx], LNG_NAMES));
            var lat$ = _this.dap.getData(url + ".ascii?" + latCoord, das).pipe(map(function (dd) { return dd[latCoord]; }));
            var lng$ = _this.dap.getData(url + ".ascii?" + lngCoord, das).pipe(map(function (dd) { return dd[lngCoord]; }));
            return forkJoin(lat$, lng$);
        }), switchAll(), publishReplay(), refCount());
        return res$;
    };
    MetadataService.prototype.getGridForLayer = function (ml) {
        return this.getGrid(ml.flattenedSettings.host, ml.interpolatedFile);
    };
    MetadataService.prototype.getSpatialExtent = function (ml) {
        return this.getGridForLayer(ml).pipe(map(function (_a) {
            var _b = tslib_1.__read(_a, 2), lats = _b[0], lngs = _b[1];
            var result = {
                east: Math.max.apply(Math, tslib_1.__spread(lngs)),
                west: Math.min.apply(Math, tslib_1.__spread(lngs)),
                north: Math.max.apply(Math, tslib_1.__spread(lats)),
                south: Math.min.apply(Math, tslib_1.__spread(lats))
            };
            return result;
        })).pipe(publishReplay(), refCount());
    };
    MetadataService.prototype.getTimeDimension = function (host, file) {
        var url = this.dap.makeURL(host, file);
        return this.getTimeDimensionForURL(url);
    };
    MetadataService.prototype.getTimeDimensionForURL = function (url) {
        var _this = this;
        if (!this.timeCache[url]) {
            var ddx$ = this.ddxForUrl(url);
            var das$ = this.dasForUrl(url);
            var res$ = forkJoin([ddx$, das$]).pipe(map(function (metadata) {
                var ddx = metadata[0];
                var das = metadata[1];
                var timeCoord = _this.identifyCoordinate.apply(_this, tslib_1.__spread([ddx], TIME_NAMES));
                var time$ = _this.dap.getData(url + ".ascii?" + timeCoord, das).pipe(map(function (dd) { return dd[timeCoord]; }));
                return time$;
            }), switchAll(), shareReplay());
            this.timeCache[url] = res$;
        }
        return this.timeCache[url];
    };
    MetadataService.ctorParameters = function () { return [
        { type: OpendapService }
    ]; };
    MetadataService = tslib_1.__decorate([
        Injectable()
    ], MetadataService);
    return MetadataService;
}());
export { MetadataService };
//# sourceMappingURL=data:application/json;base64,