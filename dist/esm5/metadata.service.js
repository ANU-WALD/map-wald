import { __read, __spread, __values } from "tslib";
import { Injectable } from '@angular/core';
import { OpendapService } from './opendap.service';
import { forkJoin, of } from 'rxjs';
import { publishReplay, refCount, map, switchAll, shareReplay } from 'rxjs/operators';
export var LAT_NAMES = ['latitude', 'lat'];
export var LNG_NAMES = ['longitude', 'lng', 'lon'];
export var TIME_NAMES = ['time', 't', 'Time'];
var MetadataService = /** @class */ (function () {
    function MetadataService(dap) {
        this.dap = dap;
        this.ddxCache = {};
        this.dasCache = {};
        this.timeCache = {};
    }
    MetadataService.prototype.identifyCoordinate = function (ddx) {
        var e_1, _a;
        var possibleNames = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            possibleNames[_i - 1] = arguments[_i];
        }
        try {
            for (var possibleNames_1 = __values(possibleNames), possibleNames_1_1 = possibleNames_1.next(); !possibleNames_1_1.done; possibleNames_1_1 = possibleNames_1.next()) {
                var n = possibleNames_1_1.value;
                if (ddx.variables[n]) {
                    return n;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (possibleNames_1_1 && !possibleNames_1_1.done && (_a = possibleNames_1.return)) _a.call(possibleNames_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return undefined;
    };
    MetadataService.prototype.getDDX = function (host, file) {
        var url = this.dap.makeURL(host, file);
        return this.ddxForUrl(url);
    };
    MetadataService.prototype.ddxForUrl = function (url) {
        if (!this.ddxCache[url]) {
            this.ddxCache[url] =
                this.dap.getDDX(url).pipe(publishReplay(), refCount());
        }
        return this.ddxCache[url];
    };
    MetadataService.prototype.getDDXForLayer = function (ml) {
        return this.getDDX(ml.flattenedSettings.host, ml.interpolatedFile);
    };
    MetadataService.prototype.getDAS = function (host, file) {
        var url = this.dap.makeURL(host, file);
        return this.dasForUrl(url);
    };
    MetadataService.prototype.dasForUrl = function (url) {
        if (!this.dasCache[url]) {
            this.dasCache[url] =
                this.dap.getDAS(url).pipe(publishReplay(), refCount());
        }
        return this.dasCache[url];
    };
    MetadataService.prototype.getDASForLayer = function (ml) {
        return this.getDAS(ml.flattenedSettings.host, ml.interpolatedFile);
    };
    MetadataService.prototype.getMetadata = function (ml) {
        if (ml.flattenedSettings.host.software !== 'tds') {
            return of({});
        }
        return forkJoin([this.getDASForLayer(ml), this.getDDXForLayer(ml)]).pipe(map(function (meta) {
            return {
                das: meta[0],
                ddx: meta[1]
            };
        }), map(function (meta) {
            return Object.assign({}, meta.das.attr || {}, meta.ddx.variables[ml.flattenedSettings.layer || ml.flattenedSettings.variable] || {});
        }));
    };
    MetadataService.prototype.populateMetadata = function (ml) {
        this.getMetadata(ml).subscribe(function (entry) {
            setTimeout(function () {
                ml.retrievedMetadata = entry;
            });
        });
    };
    MetadataService.prototype.getGrid = function (host, file) {
        var url = this.dap.makeURL(host, file);
        return this.getGridForURL(url);
    };
    MetadataService.prototype.getGridForURL = function (url) {
        var _this = this;
        var ddx$ = this.ddxForUrl(url);
        var das$ = this.dasForUrl(url);
        var res$ = forkJoin([ddx$, das$]).pipe(map(function (metadata) {
            var ddx = metadata[0];
            var das = metadata[1];
            var latCoord = _this.identifyCoordinate.apply(_this, __spread([ddx], LAT_NAMES));
            var lngCoord = _this.identifyCoordinate.apply(_this, __spread([ddx], LNG_NAMES));
            var lat$ = _this.dap.getData(url + ".ascii?" + latCoord, das).pipe(map(function (dd) { return dd[latCoord]; }));
            var lng$ = _this.dap.getData(url + ".ascii?" + lngCoord, das).pipe(map(function (dd) { return dd[lngCoord]; }));
            return forkJoin(lat$, lng$);
        }), switchAll(), publishReplay(), refCount());
        return res$;
    };
    MetadataService.prototype.getGridForLayer = function (ml) {
        return this.getGrid(ml.flattenedSettings.host, ml.interpolatedFile);
    };
    MetadataService.prototype.getSpatialExtent = function (ml) {
        return this.getGridForLayer(ml).pipe(map(function (_a) {
            var _b = __read(_a, 2), lats = _b[0], lngs = _b[1];
            var result = {
                east: Math.max.apply(Math, __spread(lngs)),
                west: Math.min.apply(Math, __spread(lngs)),
                north: Math.max.apply(Math, __spread(lats)),
                south: Math.min.apply(Math, __spread(lats))
            };
            return result;
        })).pipe(publishReplay(), refCount());
    };
    MetadataService.prototype.getTimeDimension = function (host, file) {
        var url = this.dap.makeURL(host, file);
        return this.getTimeDimensionForURL(url);
    };
    MetadataService.prototype.getTimeDimensionForURL = function (url) {
        var _this = this;
        if (!this.timeCache[url]) {
            var ddx$ = this.ddxForUrl(url);
            var das$ = this.dasForUrl(url);
            var res$ = forkJoin([ddx$, das$]).pipe(map(function (metadata) {
                var ddx = metadata[0];
                var das = metadata[1];
                var timeCoord = _this.identifyCoordinate.apply(_this, __spread([ddx], TIME_NAMES));
                var time$ = _this.dap.getData(url + ".ascii?" + timeCoord, das).pipe(map(function (dd) { return dd[timeCoord]; }));
                return time$;
            }), switchAll(), shareReplay());
            this.timeCache[url] = res$;
        }
        return this.timeCache[url];
    };
    MetadataService.ctorParameters = function () { return [
        { type: OpendapService }
    ]; };
    MetadataService.decorators = [
        { type: Injectable }
    ];
    MetadataService.ctorParameters = function () { return [
        { type: OpendapService }
    ]; };
    return MetadataService;
}());
export { MetadataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hcC13YWxkLyIsInNvdXJjZXMiOlsibWV0YWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFJbkQsT0FBTyxFQUFFLFFBQVEsRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEQsT0FBTyxFQUFhLGFBQWEsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBTyxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV0RyxNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUMsQ0FBQyxVQUFVLEVBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUMsTUFBTSxDQUFDLElBQU0sU0FBUyxHQUFDLENBQUMsV0FBVyxFQUFDLEtBQUssRUFBQyxLQUFLLENBQUMsQ0FBQztBQUNqRCxNQUFNLENBQUMsSUFBTSxVQUFVLEdBQUMsQ0FBQyxNQUFNLEVBQUMsR0FBRyxFQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRTVDO0lBS0UseUJBQW9CLEdBQWtCO1FBQWxCLFFBQUcsR0FBSCxHQUFHLENBQWU7UUFIdEMsYUFBUSxHQUFtQyxFQUFFLENBQUE7UUFDN0MsYUFBUSxHQUFtQyxFQUFFLENBQUE7UUFnSTdDLGNBQVMsR0FBbUMsRUFBRSxDQUFDO0lBNUgvQyxDQUFDO0lBRUQsNENBQWtCLEdBQWxCLFVBQW1CLEdBQVU7O1FBQUMsdUJBQThCO2FBQTlCLFVBQThCLEVBQTlCLHFCQUE4QixFQUE5QixJQUE4QjtZQUE5QixzQ0FBOEI7OztZQUMxRCxLQUFhLElBQUEsa0JBQUEsU0FBQSxhQUFhLENBQUEsNENBQUEsdUVBQUM7Z0JBQXZCLElBQUksQ0FBQywwQkFBQTtnQkFDUCxJQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFD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QUFDO2dCQUU3RCxJQUFNLEtBQUssR0FDVCxLQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBSSxHQUFHLGVBQVUsU0FBVyxFQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDcEQsR0FBRyxDQUFDLFVBQUMsRUFBVSxJQUFHLE9BQVEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFyQixDQUFxQixDQUFDLENBQUMsQ0FBQztnQkFFOUMsT0FBTyxLQUFLLENBQUM7WUFDZixDQUFDLENBQUMsRUFBQyxTQUFTLEVBQUUsRUFBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQzVCO1FBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdCLENBQUM7O2dCQXBKdUIsY0FBYzs7O2dCQUx2QyxVQUFVOzs7Z0JBWEYsY0FBYzs7SUFxS3ZCLHNCQUFDO0NBQUEsQUExSkQsSUEwSkM7U0F6SlksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hcHBlZExheWVyIH0gZnJvbSAnLi9kYXRhL21hcHBlZC1sYXllcic7XG5pbXBvcnQgeyBEYXBERFgsIERhcERBUywgRGFwRGF0YSB9IGZyb20gJ2RhcC1xdWVyeS1qcy9kaXN0L2RhcC1xdWVyeSc7XG5pbXBvcnQgeyBPcGVuZGFwU2VydmljZSB9IGZyb20gJy4vb3BlbmRhcC5zZXJ2aWNlJztcbmltcG9ydCB7IEJvdW5kcyB9IGZyb20gJy4vZGF0YS9ib3VuZHMnO1xuXG5pbXBvcnQgeyBDYXRhbG9nSG9zdCB9IGZyb20gJy4vZGF0YS9jYXRhbG9nJztcbmltcG9ydCB7IGZvcmtKb2luLCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3dpdGNoTWFwLCBwdWJsaXNoUmVwbGF5LCByZWZDb3VudCwgbWFwLCBzd2l0Y2hBbGwsIHRhcCwgc2hhcmVSZXBsYXkgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCBjb25zdCBMQVRfTkFNRVM9WydsYXRpdHVkZScsJ2xhdCddO1xuZXhwb3J0IGNvbnN0IExOR19OQU1FUz1bJ2xvbmdpdHVkZScsJ2xuZycsJ2xvbiddO1xuZXhwb3J0IGNvbnN0IFRJTUVfTkFNRVM9Wyd0aW1lJywndCcsJ1RpbWUnXTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE1ldGFkYXRhU2VydmljZSB7XG4gIGRkeENhY2hlOntba2V5OnN0cmluZ106T2JzZXJ2YWJsZTxEYXBERFg+fT17fVxuICBkYXNDYWNoZTp7W2tleTpzdHJpbmddOk9ic2VydmFibGU8RGFwREFTPn09e31cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhcDpPcGVuZGFwU2VydmljZSkge1xuXG4gIH1cblxuICBpZGVudGlmeUNvb3JkaW5hdGUoZGR4OkRhcEREWCwuLi5wb3NzaWJsZU5hbWVzOkFycmF5PHN0cmluZz4pOnN0cmluZ3tcbiAgICBmb3IobGV0IG4gb2YgcG9zc2libGVOYW1lcyl7XG4gICAgICBpZihkZHgudmFyaWFibGVzW25dKXtcbiAgICAgICAgcmV0dXJuIG47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBnZXRERFgoaG9zdDpDYXRhbG9nSG9zdCxmaWxlOnN0cmluZyk6T2JzZXJ2YWJsZTxEYXBERFg+e1xuICAgIHZhciB1cmwgPSB0aGlzLmRhcC5tYWtlVVJMKGhvc3QsZmlsZSk7XG5cbiAgICByZXR1cm4gdGhpcy5kZHhGb3JVcmwodXJsKTtcbiAgfVxuXG4gIGRkeEZvclVybCh1cmw6c3RyaW5nKTpPYnNlcnZhYmxlPERhcEREWD57XG4gICAgaWYoIXRoaXMuZGR4Q2FjaGVbdXJsXSl7XG4gICAgICB0aGlzLmRkeENhY2hlW3VybF0gPVxuICAgICAgICB0aGlzLmRhcC5nZXRERFgodXJsKS5waXBlKHB1Ymxpc2hSZXBsYXkoKSxyZWZDb3VudCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5kZHhDYWNoZVt1cmxdO1xufVxuXG4gIGdldEREWEZvckxheWVyKG1sOk1hcHBlZExheWVyKTpPYnNlcnZhYmxlPERhcEREWD57XG4gICAgcmV0dXJuIHRoaXMuZ2V0RERYKG1sLmZsYXR0ZW5lZFNldHRpbmdzLmhvc3QsbWwuaW50ZXJwb2xhdGVkRmlsZSk7XG4gIH1cblxuICBnZXREQVMoaG9zdDpDYXRhbG9nSG9zdCxmaWxlOnN0cmluZyk6T2JzZXJ2YWJsZTxEYXBEQVM+e1xuICAgIHZhciB1cmwgPSB0aGlzLmRhcC5tYWtlVVJMKGhvc3QsZmlsZSk7XG4gICAgcmV0dXJuIHRoaXMuZGFzRm9yVXJsKHVybCk7XG4gIH1cblxuICBkYXNGb3JVcmwodXJsOnN0cmluZyk6T2JzZXJ2YWJsZTxEYXBEQVM+e1xuICAgIGlmKCF0aGlzLmRhc0NhY2hlW3VybF0pe1xuICAgICAgdGhpcy5kYXNDYWNoZVt1cmxdID1cbiAgICAgICAgdGhpcy5kYXAuZ2V0REFTKHVybCkucGlwZShwdWJsaXNoUmVwbGF5KCkscmVmQ291bnQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZGFzQ2FjaGVbdXJsXTtcbiAgfVxuXG4gIGdldERBU0ZvckxheWVyKG1sOk1hcHBlZExheWVyKTpPYnNlcnZhYmxlPERhcERBUz57XG4gICAgcmV0dXJuIHRoaXMuZ2V0REFTKG1sLmZsYXR0ZW5lZFNldHRpbmdzLmhvc3QsbWwuaW50ZXJwb2xhdGVkRmlsZSk7XG4gIH1cblxuICBnZXRNZXRhZGF0YShtbDpNYXBwZWRMYXllcik6T2JzZXJ2YWJsZTxhbnk+e1xuICAgIGlmKG1sLmZsYXR0ZW5lZFNldHRpbmdzLmhvc3Quc29mdHdhcmUgIT09J3Rkcycpe1xuICAgICAgcmV0dXJuIG9mKHt9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm9ya0pvaW4oW3RoaXMuZ2V0REFTRm9yTGF5ZXIobWwpLHRoaXMuZ2V0RERYRm9yTGF5ZXIobWwpXSkucGlwZShcbiAgICAgIG1hcChtZXRhPT57XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGFzOiA8RGFwREFTPm1ldGFbMF0sXG4gICAgICAgICAgZGR4OiA8RGFwRERYPm1ldGFbMV1cbiAgICAgICAgfTtcbiAgICAgIH0pLFxuICAgICAgbWFwKG1ldGE9PntcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGEuZGFzLmF0dHJ8fHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhLmRkeC52YXJpYWJsZXNbbWwuZmxhdHRlbmVkU2V0dGluZ3MubGF5ZXJ8fG1sLmZsYXR0ZW5lZFNldHRpbmdzLnZhcmlhYmxlXXx8e30pO1xuICAgICAgfSkpO1xuICB9XG5cbiAgcG9wdWxhdGVNZXRhZGF0YShtbDpNYXBwZWRMYXllcil7XG4gICAgdGhpcy5nZXRNZXRhZGF0YShtbCkuc3Vic2NyaWJlKGVudHJ5PT57XG4gICAgICBzZXRUaW1lb3V0KCgpPT57XG4gICAgICAgIG1sLnJldHJpZXZlZE1ldGFkYXRhID0gZW50cnk7XG4gICAgICB9KVxuICAgIH0pO1xuICB9XG5cbiAgZ2V0R3JpZChob3N0OkNhdGFsb2dIb3N0LGZpbGU6c3RyaW5nKTpPYnNlcnZhYmxlPG51bWJlcltdW10+e1xuICAgIGNvbnN0IHVybCA9IHRoaXMuZGFwLm1ha2VVUkwoaG9zdCxmaWxlKTtcbiAgICByZXR1cm4gdGhpcy5nZXRHcmlkRm9yVVJMKHVybCk7XG4gIH1cblxuICBnZXRHcmlkRm9yVVJMKHVybDpzdHJpbmcpOk9ic2VydmFibGU8bnVtYmVyW11bXT57XG4gICAgY29uc3QgZGR4JCA9IHRoaXMuZGR4Rm9yVXJsKHVybCk7XG4gICAgY29uc3QgZGFzJCA9IHRoaXMuZGFzRm9yVXJsKHVybCk7XG4gICAgY29uc3QgcmVzJCA9IDxPYnNlcnZhYmxlPG51bWJlcltdW10+PmZvcmtKb2luKFtkZHgkLGRhcyRdKS5waXBlKFxuICAgICAgbWFwKChtZXRhZGF0YTphbnlbXSk9PntcbiAgICAgICAgY29uc3QgZGR4OkRhcEREWCA9IG1ldGFkYXRhWzBdO1xuICAgICAgICBjb25zdCBkYXM6RGFwREFTID0gbWV0YWRhdGFbMV07XG5cbiAgICAgICAgY29uc3QgbGF0Q29vcmQgPSB0aGlzLmlkZW50aWZ5Q29vcmRpbmF0ZShkZHgsLi4uTEFUX05BTUVTKTtcbiAgICAgICAgY29uc3QgbG5nQ29vcmQgPSB0aGlzLmlkZW50aWZ5Q29vcmRpbmF0ZShkZHgsLi4uTE5HX05BTUVTKTtcblxuICAgICAgICBjb25zdCBsYXQkID1cbiAgICAgICAgICB0aGlzLmRhcC5nZXREYXRhKGAke3VybH0uYXNjaWk/JHtsYXRDb29yZH1gLGRhcykucGlwZShcbiAgICAgICAgICAgIG1hcCgoZGQ6RGFwRGF0YSk9PjxudW1iZXJbXT5kZFtsYXRDb29yZF0pKTtcbiAgICAgICAgY29uc3QgbG5nJCA9XG4gICAgICAgICAgdGhpcy5kYXAuZ2V0RGF0YShgJHt1cmx9LmFzY2lpPyR7bG5nQ29vcmR9YCxkYXMpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKGRkOkRhcERhdGEpPT48bnVtYmVyW10+ZGRbbG5nQ29vcmRdKSk7XG5cbiAgICAgICAgcmV0dXJuIGZvcmtKb2luPG51bWJlcltdPihsYXQkLGxuZyQpO1xuICAgICAgfSksc3dpdGNoQWxsKCkscHVibGlzaFJlcGxheSgpLHJlZkNvdW50KCkpO1xuICAgICAgcmV0dXJuIHJlcyQ7XG4gIH1cblxuICBnZXRHcmlkRm9yTGF5ZXIobWw6TWFwcGVkTGF5ZXIpOk9ic2VydmFibGU8QXJyYXk8QXJyYXk8bnVtYmVyPj4+e1xuICAgIHJldHVybiB0aGlzLmdldEdyaWQobWwuZmxhdHRlbmVkU2V0dGluZ3MuaG9zdCxtbC5pbnRlcnBvbGF0ZWRGaWxlKTtcbiAgfVxuXG4gIGdldFNwYXRpYWxFeHRlbnQobWw6TWFwcGVkTGF5ZXIpOk9ic2VydmFibGU8Qm91bmRzPntcbiAgICByZXR1cm4gdGhpcy5nZXRHcmlkRm9yTGF5ZXIobWwpLnBpcGUobWFwKChbbGF0cyxsbmdzXSk9PntcbiAgICAgIHZhciByZXN1bHQ6Qm91bmRzID0ge1xuICAgICAgICBlYXN0OiBNYXRoLm1heCguLi5sbmdzKSxcbiAgICAgICAgd2VzdDogTWF0aC5taW4oLi4ubG5ncyksXG4gICAgICAgIG5vcnRoOiBNYXRoLm1heCguLi5sYXRzKSxcbiAgICAgICAgc291dGg6IE1hdGgubWluKC4uLmxhdHMpXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KSkucGlwZShwdWJsaXNoUmVwbGF5KCksIHJlZkNvdW50KCkpO1xuICB9XG5cbiAgZ2V0VGltZURpbWVuc2lvbihob3N0OkNhdGFsb2dIb3N0LGZpbGU6c3RyaW5nKTpPYnNlcnZhYmxlPERhdGVbXT57XG4gICAgY29uc3QgdXJsID0gdGhpcy5kYXAubWFrZVVSTChob3N0LGZpbGUpO1xuICAgIHJldHVybiB0aGlzLmdldFRpbWVEaW1lbnNpb25Gb3JVUkwodXJsKTtcbiAgfVxuXG4gIHRpbWVDYWNoZTp7W2tleTpzdHJpbmddOk9ic2VydmFibGU8RGF0ZVtdPn09e307XG5cbiAgZ2V0VGltZURpbWVuc2lvbkZvclVSTCh1cmw6c3RyaW5nKTpPYnNlcnZhYmxlPERhdGVbXT57XG4gICAgaWYoIXRoaXMudGltZUNhY2hlW3VybF0pe1xuICAgICAgY29uc3QgZGR4JCA9IHRoaXMuZGR4Rm9yVXJsKHVybCk7XG4gICAgICBjb25zdCBkYXMkID0gdGhpcy5kYXNGb3JVcmwodXJsKTtcbiAgICAgIGNvbnN0IHJlcyQgPSA8T2JzZXJ2YWJsZTxEYXRlW10+PmZvcmtKb2luKFtkZHgkLGRhcyRdKS5waXBlKFxuICAgICAgICBtYXAoKG1ldGFkYXRhOmFueVtdKT0+e1xuICAgICAgICAgIGNvbnN0IGRkeDpEYXBERFggPSBtZXRhZGF0YVswXTtcbiAgICAgICAgICBjb25zdCBkYXM6RGFwREFTID0gbWV0YWRhdGFbMV07XG5cbiAgICAgICAgICBjb25zdCB0aW1lQ29vcmQgPSB0aGlzLmlkZW50aWZ5Q29vcmRpbmF0ZShkZHgsLi4uVElNRV9OQU1FUyk7XG5cbiAgICAgICAgICBjb25zdCB0aW1lJCA9XG4gICAgICAgICAgICB0aGlzLmRhcC5nZXREYXRhKGAke3VybH0uYXNjaWk/JHt0aW1lQ29vcmR9YCxkYXMpLnBpcGUoXG4gICAgICAgICAgICAgIG1hcCgoZGQ6RGFwRGF0YSk9PjxEYXRlW10+ZGRbdGltZUNvb3JkXSkpO1xuXG4gICAgICAgICAgcmV0dXJuIHRpbWUkO1xuICAgICAgICB9KSxzd2l0Y2hBbGwoKSxzaGFyZVJlcGxheSgpKTtcbiAgICAgIHRoaXMudGltZUNhY2hlW3VybF0gPSByZXMkO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50aW1lQ2FjaGVbdXJsXTtcbiAgfVxufVxuIl19